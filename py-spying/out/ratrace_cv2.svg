<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="346" onload="init(evt)" viewBox="0 0 1200 346" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="346" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="335.00"> </text><svg id="frames" x="10" width="1180"><g><title>icv_l9_ownsCopy_8u_E9 (libopencv_quality.so.4.2.0) (463 samples, 1.94%)</title><rect x="0.8175%" y="84" width="1.9411%" height="15" fill="rgb(227,0,7)"/><text x="1.0675%" y="94.50">i..</text></g><g><title>ff_read_packet (utils.c:856) (280 samples, 1.17%)</title><rect x="2.9556%" y="212" width="1.1739%" height="15" fill="rgb(217,0,24)"/><text x="3.2056%" y="222.50"></text></g><g><title>avi_read_packet (avidec.c:1541) (244 samples, 1.02%)</title><rect x="3.1065%" y="228" width="1.0229%" height="15" fill="rgb(221,193,54)"/><text x="3.3565%" y="238.50"></text></g><g><title>read_frame_internal (utils.c:1582) (284 samples, 1.19%)</title><rect x="2.9556%" y="196" width="1.1906%" height="15" fill="rgb(248,212,6)"/><text x="3.2056%" y="206.50"></text></g><g><title>av_read_frame (utils.c:1779) (472 samples, 1.98%)</title><rect x="2.9263%" y="180" width="1.9788%" height="15" fill="rgb(208,68,35)"/><text x="3.1763%" y="190.50">a..</text></g><g><title>submit_packet (pthread_frame.c:408) (1,239 samples, 5.19%)</title><rect x="5.0015%" y="276" width="5.1943%" height="15" fill="rgb(232,128,0)"/><text x="5.2515%" y="286.50">submit..</text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (libpthread-2.27.so) (1,239 samples, 5.19%)</title><rect x="5.0015%" y="292" width="5.1943%" height="15" fill="rgb(207,160,47)"/><text x="5.2515%" y="302.50">pthrea..</text></g><g><title>ff_thread_decode_frame (pthread_frame.c:490) (1,712 samples, 7.18%)</title><rect x="4.9889%" y="260" width="7.1773%" height="15" fill="rgb(228,23,34)"/><text x="5.2389%" y="270.50">ff_thread_..</text></g><g><title>submit_packet (pthread_frame.c:438) (246 samples, 1.03%)</title><rect x="11.1349%" y="276" width="1.0313%" height="15" fill="rgb(218,30,26)"/><text x="11.3849%" y="286.50"></text></g><g><title>pthread_mutex_unlock (libpthread-2.27.so) (246 samples, 1.03%)</title><rect x="11.1349%" y="292" width="1.0313%" height="15" fill="rgb(220,122,19)"/><text x="11.3849%" y="302.50"></text></g><g><title>__lll_unlock_wake (libpthread-2.27.so) (246 samples, 1.03%)</title><rect x="11.1349%" y="308" width="1.0313%" height="15" fill="rgb(250,228,42)"/><text x="11.3849%" y="318.50"></text></g><g><title>decode_simple_internal (decode.c:451) (1,716 samples, 7.19%)</title><rect x="4.9805%" y="244" width="7.1941%" height="15" fill="rgb(240,193,28)"/><text x="5.2305%" y="254.50">decode_sim..</text></g><g><title>decode_receive_frame_internal (decode.c:647) (1,727 samples, 7.24%)</title><rect x="4.9595%" y="212" width="7.2402%" height="15" fill="rgb(216,20,37)"/><text x="5.2095%" y="222.50">decode_rec..</text></g><g><title>decode_simple_receive_frame (decode.c:629) (1,727 samples, 7.24%)</title><rect x="4.9595%" y="228" width="7.2402%" height="15" fill="rgb(206,188,39)"/><text x="5.2095%" y="238.50">decode_sim..</text></g><g><title>compat_decode (decode.c:841) (1,739 samples, 7.29%)</title><rect x="4.9344%" y="180" width="7.2905%" height="15" fill="rgb(217,207,13)"/><text x="5.1844%" y="190.50">compat_dec..</text></g><g><title>avcodec_send_packet (decode.c:706) (1,736 samples, 7.28%)</title><rect x="4.9470%" y="196" width="7.2779%" height="15" fill="rgb(231,73,38)"/><text x="5.1970%" y="206.50">avcodec_se..</text></g><g><title>ff_thread_decode_frame (pthread_frame.c:490) (240 samples, 1.01%)</title><rect x="12.3884%" y="260" width="1.0062%" height="15" fill="rgb(225,20,46)"/><text x="12.6384%" y="270.50"></text></g><g><title>decode_simple_internal (decode.c:451) (251 samples, 1.05%)</title><rect x="12.3800%" y="244" width="1.0523%" height="15" fill="rgb(210,31,41)"/><text x="12.6300%" y="254.50"></text></g><g><title>decode_receive_frame_internal (decode.c:647) (260 samples, 1.09%)</title><rect x="12.3632%" y="212" width="1.0900%" height="15" fill="rgb(221,200,47)"/><text x="12.6132%" y="222.50"></text></g><g><title>decode_simple_receive_frame (decode.c:629) (260 samples, 1.09%)</title><rect x="12.3632%" y="228" width="1.0900%" height="15" fill="rgb(226,26,5)"/><text x="12.6132%" y="238.50"></text></g><g><title>avcodec_receive_frame (decode.c:754) (266 samples, 1.12%)</title><rect x="12.3590%" y="196" width="1.1152%" height="15" fill="rgb(249,33,26)"/><text x="12.6090%" y="206.50"></text></g><g><title>compat_decode (decode.c:854) (301 samples, 1.26%)</title><rect x="12.2249%" y="180" width="1.2619%" height="15" fill="rgb(235,183,28)"/><text x="12.4749%" y="190.50"></text></g><g><title>cv::VideoCapture::grab (libopencv_videoio.so.4.2.0) (2,560 samples, 10.73%)</title><rect x="2.8382%" y="116" width="10.7324%" height="15" fill="rgb(221,5,38)"/><text x="3.0882%" y="126.50">cv::VideoCapture..</text></g><g><title>cv::(anonymous namespace)::CvCapture_FFMPEG_proxy::grabFrame (libopencv_videoio.so.4.2.0) (2,559 samples, 10.73%)</title><rect x="2.8424%" y="132" width="10.7282%" height="15" fill="rgb(247,18,42)"/><text x="3.0924%" y="142.50">cv::(anonymous n..</text></g><g><title>cvGrabFrame_FFMPEG (libopencv_videoio.so.4.2.0) (2,559 samples, 10.73%)</title><rect x="2.8424%" y="148" width="10.7282%" height="15" fill="rgb(241,131,45)"/><text x="3.0924%" y="158.50">cvGrabFrame_FFMP..</text></g><g><title>CvCapture_FFMPEG::grabFrame (libopencv_videoio.so.4.2.0) (2,556 samples, 10.72%)</title><rect x="2.8550%" y="164" width="10.7156%" height="15" fill="rgb(249,31,29)"/><text x="3.1050%" y="174.50">CvCapture_FFMPEG..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:379) (280 samples, 1.17%)</title><rect x="14.6858%" y="196" width="1.1739%" height="15" fill="rgb(225,111,53)"/><text x="14.9358%" y="206.50"></text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:380) (249 samples, 1.04%)</title><rect x="15.8596%" y="196" width="1.0439%" height="15" fill="rgb(238,160,17)"/><text x="16.1096%" y="206.50"></text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:383) (250 samples, 1.05%)</title><rect x="17.6959%" y="196" width="1.0481%" height="15" fill="rgb(214,148,48)"/><text x="17.9459%" y="206.50"></text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:387) (303 samples, 1.27%)</title><rect x="20.2364%" y="196" width="1.2703%" height="15" fill="rgb(232,36,49)"/><text x="20.4864%" y="206.50"></text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:391) (307 samples, 1.29%)</title><rect x="23.1124%" y="196" width="1.2870%" height="15" fill="rgb(209,103,24)"/><text x="23.3624%" y="206.50"></text></g><g><title>cv::VideoCapture::retrieve (libopencv_videoio.so.4.2.0) (2,829 samples, 11.86%)</title><rect x="13.5706%" y="116" width="11.8601%" height="15" fill="rgb(229,88,8)"/><text x="13.8206%" y="126.50">cv::VideoCapture::..</text></g><g><title>cv::(anonymous namespace)::CvCapture_FFMPEG_proxy::retrieveFrame (libopencv_videoio.so.4.2.0) (2,827 samples, 11.85%)</title><rect x="13.5790%" y="132" width="11.8518%" height="15" fill="rgb(213,181,19)"/><text x="13.8290%" y="142.50">cv::(anonymous nam..</text></g><g><title>cvRetrieveFrame_FFMPEG (libopencv_videoio.so.4.2.0) (2,746 samples, 11.51%)</title><rect x="13.9186%" y="148" width="11.5122%" height="15" fill="rgb(254,191,54)"/><text x="14.1686%" y="158.50">cvRetrieveFrame_F..</text></g><g><title>CvCapture_FFMPEG::retrieveFrame (libopencv_videoio.so.4.2.0) (2,743 samples, 11.50%)</title><rect x="13.9312%" y="164" width="11.4996%" height="15" fill="rgb(241,83,37)"/><text x="14.1812%" y="174.50">CvCapture_FFMPEG:..</text></g><g><title>sws_scale (swscale.c:989) (2,727 samples, 11.43%)</title><rect x="13.9982%" y="180" width="11.4325%" height="15" fill="rgb(233,36,39)"/><text x="14.2482%" y="190.50">sws_scale (swscal..</text></g><g><title>cv::VideoCapture::read (libopencv_videoio.so.4.2.0) (5,394 samples, 22.61%)</title><rect x="2.8256%" y="100" width="22.6135%" height="15" fill="rgb(226,3,54)"/><text x="3.0756%" y="110.50">cv::VideoCapture::read (libopencv_vi..</text></g><g><title>&lt;module&gt; (PV_ratrace_cv2.py:10) (5,908 samples, 24.77%)</title><rect x="0.6792%" y="68" width="24.7684%" height="15" fill="rgb(245,192,40)"/><text x="0.9292%" y="78.50">&lt;module&gt; (PV_ratrace_cv2.py:10)</text></g><g><title>pyopencv_cv_VideoCapture_read (cv2.cpython-38-x86_64-linux-gnu.so) (5,412 samples, 22.69%)</title><rect x="2.7586%" y="84" width="22.6890%" height="15" fill="rgb(238,167,29)"/><text x="3.0086%" y="94.50">pyopencv_cv_VideoCapture_read (cv2.c..</text></g><g><title>PyDataMem_FREE (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (301 samples, 1.26%)</title><rect x="25.6320%" y="100" width="1.2619%" height="15" fill="rgb(232,182,51)"/><text x="25.8820%" y="110.50"></text></g><g><title>free (libc-2.27.so) (299 samples, 1.25%)</title><rect x="25.6404%" y="116" width="1.2535%" height="15" fill="rgb(231,60,39)"/><text x="25.8904%" y="126.50"></text></g><g><title>0x7f405c755448 (libc-2.27.so) (294 samples, 1.23%)</title><rect x="25.6613%" y="132" width="1.2325%" height="15" fill="rgb(208,69,12)"/><text x="25.9113%" y="142.50"></text></g><g><title>__default_morecore (libc-2.27.so) (294 samples, 1.23%)</title><rect x="25.6613%" y="148" width="1.2325%" height="15" fill="rgb(235,93,37)"/><text x="25.9113%" y="158.50"></text></g><g><title>sbrk (libc-2.27.so) (294 samples, 1.23%)</title><rect x="25.6613%" y="164" width="1.2325%" height="15" fill="rgb(213,116,39)"/><text x="25.9113%" y="174.50"></text></g><g><title>brk (libc-2.27.so) (294 samples, 1.23%)</title><rect x="25.6613%" y="180" width="1.2325%" height="15" fill="rgb(222,207,29)"/><text x="25.9113%" y="190.50"></text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (332 samples, 1.39%)</title><rect x="25.6236%" y="84" width="1.3919%" height="15" fill="rgb(206,96,30)"/><text x="25.8736%" y="94.50"></text></g><g><title>gomp_dynamic_max_threads (proc.c:196) (301 samples, 1.26%)</title><rect x="27.8120%" y="212" width="1.2619%" height="15" fill="rgb(218,138,4)"/><text x="28.0620%" y="222.50"></text></g><g><title>getloadavg (libc-2.27.so) (301 samples, 1.26%)</title><rect x="27.8120%" y="228" width="1.2619%" height="15" fill="rgb(250,191,14)"/><text x="28.0620%" y="238.50"></text></g><g><title>GOMP_parallel (parallel.c:169) (338 samples, 1.42%)</title><rect x="27.7994%" y="180" width="1.4170%" height="15" fill="rgb(239,60,40)"/><text x="28.0494%" y="190.50"></text></g><g><title>gomp_resolve_num_threads (parallel.c:69) (335 samples, 1.40%)</title><rect x="27.8120%" y="196" width="1.4044%" height="15" fill="rgb(206,27,48)"/><text x="28.0620%" y="206.50"></text></g><g><title>futex_wake (futex.h:66) (312 samples, 1.31%)</title><rect x="29.6189%" y="212" width="1.3080%" height="15" fill="rgb(225,35,8)"/><text x="29.8689%" y="222.50"></text></g><g><title>do_spin (wait.h:56) (3,147 samples, 13.19%)</title><rect x="30.9395%" y="244" width="13.1933%" height="15" fill="rgb(250,213,24)"/><text x="31.1895%" y="254.50">do_spin (wait.h:56)</text></g><g><title>do_spin (wait.h:57) (811 samples, 3.40%)</title><rect x="44.1328%" y="244" width="3.4000%" height="15" fill="rgb(247,123,22)"/><text x="44.3828%" y="254.50">do_..</text></g><g><title>do_wait (wait.h:66) (3,959 samples, 16.60%)</title><rect x="30.9395%" y="228" width="16.5975%" height="15" fill="rgb(231,138,38)"/><text x="31.1895%" y="238.50">do_wait (wait.h:66)</text></g><g><title>GOMP_parallel (parallel.c:171) (5,175 samples, 21.70%)</title><rect x="29.2165%" y="180" width="21.6954%" height="15" fill="rgb(231,145,46)"/><text x="29.4665%" y="190.50">GOMP_parallel (parallel.c:171)</text></g><g><title>gomp_team_start (team.c:861) (5,079 samples, 21.29%)</title><rect x="29.6189%" y="196" width="21.2929%" height="15" fill="rgb(251,118,11)"/><text x="29.8689%" y="206.50">gomp_team_start (team.c:861)</text></g><g><title>gomp_barrier_wait_end (bar.c:49) (4,764 samples, 19.97%)</title><rect x="30.9395%" y="212" width="19.9723%" height="15" fill="rgb(217,147,25)"/><text x="31.1895%" y="222.50">gomp_barrier_wait_end (bar.c:49)</text></g><g><title>do_wait (wait.h:67) (805 samples, 3.37%)</title><rect x="47.5370%" y="228" width="3.3748%" height="15" fill="rgb(247,81,37)"/><text x="47.7870%" y="238.50">do_..</text></g><g><title>futex_wait (futex.h:44) (805 samples, 3.37%)</title><rect x="47.5370%" y="244" width="3.3748%" height="15" fill="rgb(209,12,38)"/><text x="47.7870%" y="254.50">fut..</text></g><g><title>do_spin (wait.h:56) (6,276 samples, 26.31%)</title><rect x="51.4778%" y="228" width="26.3112%" height="15" fill="rgb(227,1,9)"/><text x="51.7278%" y="238.50">do_spin (wait.h:56)</text></g><g><title>do_wait (wait.h:66) (7,883 samples, 33.05%)</title><rect x="51.4778%" y="212" width="33.0483%" height="15" fill="rgb(248,47,43)"/><text x="51.7278%" y="222.50">do_wait (wait.h:66)</text></g><g><title>do_spin (wait.h:57) (1,607 samples, 6.74%)</title><rect x="77.7890%" y="228" width="6.7371%" height="15" fill="rgb(221,10,30)"/><text x="78.0390%" y="238.50">do_spin (..</text></g><g><title>gomp_team_end (team.c:935) (10,632 samples, 44.57%)</title><rect x="51.4359%" y="180" width="44.5730%" height="15" fill="rgb(210,229,1)"/><text x="51.6859%" y="190.50">gomp_team_end (team.c:935)</text></g><g><title>gomp_team_barrier_wait_end (bar.c:113) (10,623 samples, 44.54%)</title><rect x="51.4736%" y="196" width="44.5353%" height="15" fill="rgb(222,148,37)"/><text x="51.7236%" y="206.50">gomp_team_barrier_wait_end (bar.c:113)</text></g><g><title>do_wait (wait.h:67) (2,739 samples, 11.48%)</title><rect x="84.5261%" y="212" width="11.4828%" height="15" fill="rgb(234,67,33)"/><text x="84.7761%" y="222.50">do_wait (wait.h:6..</text></g><g><title>futex_wait (futex.h:44) (2,739 samples, 11.48%)</title><rect x="84.5261%" y="228" width="11.4828%" height="15" fill="rgb(247,98,35)"/><text x="84.7761%" y="238.50">futex_wait (futex..</text></g><g><title>cv::CvtColorIPPLoopCopy&lt;cv::IPPReorderFunctor&gt; (libopencv_imgproc.so.4.2.0) (16,284 samples, 68.27%)</title><rect x="27.7617%" y="148" width="68.2681%" height="15" fill="rgb(247,138,52)"/><text x="28.0117%" y="158.50">cv::CvtColorIPPLoopCopy&lt;cv::IPPReorderFunctor&gt; (libopencv_imgproc.so.4.2.0)</text></g><g><title>cv::parallel_for_ (libopencv_core.so.4.2.0) (16,278 samples, 68.24%)</title><rect x="27.7869%" y="164" width="68.2430%" height="15" fill="rgb(213,79,30)"/><text x="28.0369%" y="174.50">cv::parallel_for_ (libopencv_core.so.4.2.0)</text></g><g><title>cv::cvtColor (libopencv_imgproc.so.4.2.0) (16,443 samples, 68.93%)</title><rect x="27.1077%" y="100" width="68.9347%" height="15" fill="rgb(246,177,23)"/><text x="27.3577%" y="110.50">cv::cvtColor (libopencv_imgproc.so.4.2.0)</text></g><g><title>cv::cvtColorBGR2BGR (libopencv_imgproc.so.4.2.0) (16,442 samples, 68.93%)</title><rect x="27.1119%" y="116" width="68.9305%" height="15" fill="rgb(230,62,27)"/><text x="27.3619%" y="126.50">cv::cvtColorBGR2BGR (libopencv_imgproc.so.4.2.0)</text></g><g><title>cv::hal::cvtBGRtoBGR (libopencv_imgproc.so.4.2.0) (16,288 samples, 68.28%)</title><rect x="27.7575%" y="132" width="68.2849%" height="15" fill="rgb(216,154,8)"/><text x="28.0075%" y="142.50">cv::hal::cvtBGRtoBGR (libopencv_imgproc.so.4.2.0)</text></g><g><title>&lt;module&gt; (PV_ratrace_cv2.py:12) (16,841 samples, 70.60%)</title><rect x="25.4811%" y="68" width="70.6033%" height="15" fill="rgb(244,35,45)"/><text x="25.7311%" y="78.50">&lt;module&gt; (PV_ratrace_cv2.py:12)</text></g><g><title>pyopencv_cv_cvtColor (cv2.cpython-38-x86_64-linux-gnu.so) (16,475 samples, 69.07%)</title><rect x="27.0155%" y="84" width="69.0689%" height="15" fill="rgb(251,115,12)"/><text x="27.2655%" y="94.50">pyopencv_cv_cvtColor (cv2.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>0x1000 (?) (342 samples, 1.43%)</title><rect x="96.3694%" y="84" width="1.4338%" height="15" fill="rgb(240,54,50)"/><text x="96.6194%" y="94.50"></text></g><g><title>ff_frame_thread_init (pthread_frame.c:828) (342 samples, 1.43%)</title><rect x="96.3694%" y="100" width="1.4338%" height="15" fill="rgb(233,84,52)"/><text x="96.6194%" y="110.50"></text></g><g><title>clone (libc-2.27.so) (342 samples, 1.43%)</title><rect x="96.3694%" y="116" width="1.4338%" height="15" fill="rgb(207,117,47)"/><text x="96.6194%" y="126.50"></text></g><g><title>cv::StaticBackend::createCapture (libopencv_videoio.so.4.2.0) (488 samples, 2.05%)</title><rect x="97.8200%" y="132" width="2.0459%" height="15" fill="rgb(249,43,39)"/><text x="98.0700%" y="142.50">c..</text></g><g><title>cv::cvCreateFileCapture_FFMPEG_proxy (libopencv_videoio.so.4.2.0) (488 samples, 2.05%)</title><rect x="97.8200%" y="148" width="2.0459%" height="15" fill="rgb(209,38,44)"/><text x="98.0700%" y="158.50">c..</text></g><g><title>cvCreateFileCapture_FFMPEG (libopencv_videoio.so.4.2.0) (488 samples, 2.05%)</title><rect x="97.8200%" y="164" width="2.0459%" height="15" fill="rgb(236,212,23)"/><text x="98.0700%" y="174.50">c..</text></g><g><title>CvCapture_FFMPEG::open (libopencv_videoio.so.4.2.0) (488 samples, 2.05%)</title><rect x="97.8200%" y="180" width="2.0459%" height="15" fill="rgb(242,79,21)"/><text x="98.0700%" y="190.50">C..</text></g><g><title>&lt;module&gt; (PV_ratrace_cv2.py:8) (837 samples, 3.51%)</title><rect x="96.3610%" y="68" width="3.5090%" height="15" fill="rgb(211,96,35)"/><text x="96.6110%" y="78.50">&lt;mo..</text></g><g><title>pyopencv_cv_VideoCapture_VideoCapture (cv2.cpython-38-x86_64-linux-gnu.so) (491 samples, 2.06%)</title><rect x="97.8116%" y="84" width="2.0584%" height="15" fill="rgb(253,215,40)"/><text x="98.0616%" y="94.50">p..</text></g><g><title>cv::VideoCapture::VideoCapture (libopencv_videoio.so.4.2.0) (490 samples, 2.05%)</title><rect x="97.8158%" y="100" width="2.0542%" height="15" fill="rgb(211,81,21)"/><text x="98.0658%" y="110.50">c..</text></g><g><title>cv::VideoCapture::open (libopencv_videoio.so.4.2.0) (490 samples, 2.05%)</title><rect x="97.8158%" y="116" width="2.0542%" height="15" fill="rgb(208,190,38)"/><text x="98.0658%" y="126.50">c..</text></g><g><title>all (23,853 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="62.50"></text></g></svg></svg>