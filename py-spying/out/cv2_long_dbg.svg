<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>0x7fd8805eac07 (libavcodec-681a2255.so.58.93.100) (944 samples, 1.13%)</title><rect x="0.1917%" y="68" width="1.1313%" height="15" fill="rgb(227,0,7)"/><text x="0.4417%" y="78.50"></text></g><g><title>0x7fd88282e780 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (1,208 samples, 1.45%)</title><rect x="2.0133%" y="148" width="1.4476%" height="15" fill="rgb(217,0,24)"/><text x="2.2633%" y="158.50"></text></g><g><title>avformat_find_stream_info (libavformat-fed7ce93.so.58.47.100) (1,208 samples, 1.45%)</title><rect x="2.0133%" y="164" width="1.4476%" height="15" fill="rgb(221,193,54)"/><text x="2.2633%" y="174.50"></text></g><g><title>0x7fd8801b8772 (libavcodec-681a2255.so.58.93.100) (1,072 samples, 1.28%)</title><rect x="3.9990%" y="212" width="1.2847%" height="15" fill="rgb(248,212,6)"/><text x="4.2490%" y="222.50"></text></g><g><title>0x7fd8800bf476 (libavcodec-681a2255.so.58.93.100) (1,190 samples, 1.43%)</title><rect x="3.8600%" y="196" width="1.4261%" height="15" fill="rgb(208,68,35)"/><text x="4.1100%" y="206.50"></text></g><g><title>0x7fd8805eabcc (libavcodec-681a2255.so.58.93.100) (1,618 samples, 1.94%)</title><rect x="3.5304%" y="180" width="1.9390%" height="15" fill="rgb(232,128,0)"/><text x="3.7804%" y="190.50">0..</text></g><g><title>0x7fd88282e964 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,348 samples, 2.81%)</title><rect x="3.4681%" y="148" width="2.8138%" height="15" fill="rgb(207,160,47)"/><text x="3.7181%" y="158.50">0x..</text></g><g><title>avcodec_open2 (libavcodec-681a2255.so.58.93.100) (2,348 samples, 2.81%)</title><rect x="3.4681%" y="164" width="2.8138%" height="15" fill="rgb(228,23,34)"/><text x="3.7181%" y="174.50">av..</text></g><g><title>0x7fd881becf2f (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,051 samples, 4.85%)</title><rect x="1.4369%" y="68" width="4.8546%" height="15" fill="rgb(218,30,26)"/><text x="1.6869%" y="78.50">0x7fd8..</text></g><g><title>0x7fd8827fd891 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,051 samples, 4.85%)</title><rect x="1.4369%" y="84" width="4.8546%" height="15" fill="rgb(220,122,19)"/><text x="1.6869%" y="94.50">0x7fd8..</text></g><g><title>0x7fd8827fc0ed (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,051 samples, 4.85%)</title><rect x="1.4369%" y="100" width="4.8546%" height="15" fill="rgb(250,228,42)"/><text x="1.6869%" y="110.50">0x7fd8..</text></g><g><title>0x7fd882815643 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,050 samples, 4.85%)</title><rect x="1.4381%" y="116" width="4.8534%" height="15" fill="rgb(240,193,28)"/><text x="1.6881%" y="126.50">0x7fd8..</text></g><g><title>0x7fd882832457 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,050 samples, 4.85%)</title><rect x="1.4381%" y="132" width="4.8534%" height="15" fill="rgb(216,20,37)"/><text x="1.6881%" y="142.50">0x7fd8..</text></g><g><title>&lt;module&gt; (profile_cv2_long.py:13) (5,105 samples, 6.12%)</title><rect x="0.1798%" y="52" width="6.1177%" height="15" fill="rgb(206,188,39)"/><text x="0.4298%" y="62.50">&lt;module&gt;..</text></g><g><title>0x7fd87ff4f9df (libavformat-fed7ce93.so.58.47.100) (1,448 samples, 1.74%)</title><rect x="24.2420%" y="164" width="1.7353%" height="15" fill="rgb(217,207,13)"/><text x="24.4920%" y="174.50"></text></g><g><title>0x7fd87ff5032b (libavformat-fed7ce93.so.58.47.100) (1,484 samples, 1.78%)</title><rect x="24.2240%" y="148" width="1.7784%" height="15" fill="rgb(231,73,38)"/><text x="24.4740%" y="158.50">0..</text></g><g><title>0x7fd87ff50564 (libavformat-fed7ce93.so.58.47.100) (1,222 samples, 1.46%)</title><rect x="26.3008%" y="148" width="1.4644%" height="15" fill="rgb(225,20,46)"/><text x="26.5508%" y="158.50"></text></g><g><title>av_opt_get_dict_val (libavutil-bedca4f8.so.56.55.100) (1,218 samples, 1.46%)</title><rect x="26.3056%" y="164" width="1.4596%" height="15" fill="rgb(210,31,41)"/><text x="26.5556%" y="174.50"></text></g><g><title>av_opt_find2 (libavutil-bedca4f8.so.56.55.100) (1,203 samples, 1.44%)</title><rect x="26.3236%" y="180" width="1.4417%" height="15" fill="rgb(221,200,47)"/><text x="26.5736%" y="190.50"></text></g><g><title>0x7fd88282f2f8 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (3,145 samples, 3.77%)</title><rect x="24.1701%" y="116" width="3.7689%" height="15" fill="rgb(226,26,5)"/><text x="24.4201%" y="126.50">0x7f..</text></g><g><title>av_read_frame (libavformat-fed7ce93.so.58.47.100) (3,143 samples, 3.77%)</title><rect x="24.1725%" y="132" width="3.7665%" height="15" fill="rgb(249,33,26)"/><text x="24.4225%" y="142.50">av_r..</text></g><g><title>0x7fd880537281 (libavcodec-681a2255.so.58.93.100) (1,352 samples, 1.62%)</title><rect x="29.1134%" y="196" width="1.6202%" height="15" fill="rgb(235,183,28)"/><text x="29.3634%" y="206.50"></text></g><g><title>0x7fd8805e9a83 (libavcodec-681a2255.so.58.93.100) (2,199 samples, 2.64%)</title><rect x="28.1368%" y="180" width="2.6352%" height="15" fill="rgb(221,5,38)"/><text x="28.3868%" y="190.50">0x..</text></g><g><title>0x7fd8802506d3 (libavcodec-681a2255.so.58.93.100) (2,699 samples, 3.23%)</title><rect x="28.1044%" y="164" width="3.2344%" height="15" fill="rgb(247,18,42)"/><text x="28.3544%" y="174.50">0x7..</text></g><g><title>0x7fd8802514c3 (libavcodec-681a2255.so.58.93.100) (3,109 samples, 3.73%)</title><rect x="28.0121%" y="132" width="3.7258%" height="15" fill="rgb(241,131,45)"/><text x="28.2621%" y="142.50">0x7f..</text></g><g><title>avcodec_receive_frame (libavcodec-681a2255.so.58.93.100) (3,108 samples, 3.72%)</title><rect x="28.0133%" y="148" width="3.7246%" height="15" fill="rgb(249,31,29)"/><text x="28.2633%" y="158.50">avco..</text></g><g><title>0x7fd88035b604 (libavcodec-681a2255.so.58.93.100) (947 samples, 1.13%)</title><rect x="33.0645%" y="212" width="1.1349%" height="15" fill="rgb(225,111,53)"/><text x="33.3145%" y="222.50"></text></g><g><title>0x7fd88036919b (libavcodec-681a2255.so.58.93.100) (2,183 samples, 2.62%)</title><rect x="32.8200%" y="196" width="2.6161%" height="15" fill="rgb(238,160,17)"/><text x="33.0700%" y="206.50">0x..</text></g><g><title>0x7fd8806e9967 (libavcodec-681a2255.so.58.93.100) (858 samples, 1.03%)</title><rect x="35.5811%" y="228" width="1.0282%" height="15" fill="rgb(214,148,48)"/><text x="35.8311%" y="238.50"></text></g><g><title>av_frame_ref (libavutil-bedca4f8.so.56.55.100) (858 samples, 1.03%)</title><rect x="35.5811%" y="244" width="1.0282%" height="15" fill="rgb(232,36,49)"/><text x="35.8311%" y="254.50"></text></g><g><title>0x7fd88035b6e0 (libavcodec-681a2255.so.58.93.100) (1,081 samples, 1.30%)</title><rect x="35.5559%" y="212" width="1.2954%" height="15" fill="rgb(209,103,24)"/><text x="35.8059%" y="222.50"></text></g><g><title>0x7fd8803691b6 (libavcodec-681a2255.so.58.93.100) (2,276 samples, 2.73%)</title><rect x="35.5415%" y="196" width="2.7275%" height="15" fill="rgb(229,88,8)"/><text x="35.7915%" y="206.50">0x..</text></g><g><title>0x7fd8805673d8 (libavcodec-681a2255.so.58.93.100) (1,018 samples, 1.22%)</title><rect x="40.7185%" y="212" width="1.2200%" height="15" fill="rgb(213,181,19)"/><text x="40.9685%" y="222.50"></text></g><g><title>0x7fd880561581 (libavcodec-681a2255.so.58.93.100) (909 samples, 1.09%)</title><rect x="40.8492%" y="228" width="1.0893%" height="15" fill="rgb(254,191,54)"/><text x="41.0992%" y="238.50"></text></g><g><title>av_frame_unref (libavutil-bedca4f8.so.56.55.100) (838 samples, 1.00%)</title><rect x="40.9343%" y="244" width="1.0042%" height="15" fill="rgb(241,83,37)"/><text x="41.1843%" y="254.50"></text></g><g><title>0x7fd88056740c (libavcodec-681a2255.so.58.93.100) (1,143 samples, 1.37%)</title><rect x="42.5425%" y="212" width="1.3697%" height="15" fill="rgb(233,36,39)"/><text x="42.7925%" y="222.50"></text></g><g><title>0x7fd880537281 (libavcodec-681a2255.so.58.93.100) (5,229 samples, 6.27%)</title><rect x="39.7215%" y="196" width="6.2663%" height="15" fill="rgb(226,3,54)"/><text x="39.9715%" y="206.50">0x7fd880..</text></g><g><title>0x7fd8805e9a83 (libavcodec-681a2255.so.58.93.100) (11,666 samples, 13.98%)</title><rect x="32.1621%" y="180" width="13.9803%" height="15" fill="rgb(245,192,40)"/><text x="32.4121%" y="190.50">0x7fd8805e9a83 (libav..</text></g><g><title>0x7fd8805e9ad7 (libavcodec-681a2255.so.58.93.100) (892 samples, 1.07%)</title><rect x="46.4840%" y="180" width="1.0690%" height="15" fill="rgb(238,167,29)"/><text x="46.7340%" y="190.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.27.so) (889 samples, 1.07%)</title><rect x="46.4875%" y="196" width="1.0654%" height="15" fill="rgb(232,182,51)"/><text x="46.7375%" y="206.50"></text></g><g><title>0x7fd8805e9fab (libavcodec-681a2255.so.58.93.100) (5,774 samples, 6.92%)</title><rect x="47.7039%" y="180" width="6.9194%" height="15" fill="rgb(231,60,39)"/><text x="47.9539%" y="190.50">0x7fd8805..</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (5,774 samples, 6.92%)</title><rect x="47.7039%" y="196" width="6.9194%" height="15" fill="rgb(208,69,12)"/><text x="47.9539%" y="206.50">__pthread..</text></g><g><title>0x7fd8802506d3 (libavcodec-681a2255.so.58.93.100) (18,910 samples, 22.66%)</title><rect x="31.9979%" y="164" width="22.6614%" height="15" fill="rgb(235,93,37)"/><text x="32.2479%" y="174.50">0x7fd8802506d3 (libavcodec-681a2255...</text></g><g><title>0x7fd88025154b (libavcodec-681a2255.so.58.93.100) (19,269 samples, 23.09%)</title><rect x="31.7427%" y="132" width="23.0916%" height="15" fill="rgb(213,116,39)"/><text x="31.9927%" y="142.50">0x7fd88025154b (libavcodec-681a2255.s..</text></g><g><title>avcodec_send_packet (libavcodec-681a2255.so.58.93.100) (19,269 samples, 23.09%)</title><rect x="31.7427%" y="148" width="23.0916%" height="15" fill="rgb(222,207,29)"/><text x="31.9927%" y="158.50">avcodec_send_packet (libavcodec-681a2..</text></g><g><title>0x7fd88282f350 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (22,975 samples, 27.53%)</title><rect x="27.9906%" y="116" width="27.5328%" height="15" fill="rgb(206,96,30)"/><text x="28.2406%" y="126.50">0x7fd88282f350 (cv2/cv2.cpython-37m-x86_64-l..</text></g><g><title>0x7fd8827fa00d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (26,290 samples, 31.51%)</title><rect x="24.0635%" y="84" width="31.5054%" height="15" fill="rgb(218,138,4)"/><text x="24.3135%" y="94.50">0x7fd8827fa00d (cv2/cv2.cpython-37m-x86_64-linux-gn..</text></g><g><title>0x7fd8827fa302 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (26,282 samples, 31.50%)</title><rect x="24.0731%" y="100" width="31.4958%" height="15" fill="rgb(250,191,14)"/><text x="24.3231%" y="110.50">0x7fd8827fa302 (cv2/cv2.cpython-37m-x86_64-linux-gn..</text></g><g><title>0x7fd885d1d7d8 (libc-2.27.so) (2,725 samples, 3.27%)</title><rect x="56.7277%" y="276" width="3.2656%" height="15" fill="rgb(239,60,40)"/><text x="56.9777%" y="286.50">0x7..</text></g><g><title>npy_alloc_cache (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (3,196 samples, 3.83%)</title><rect x="56.2124%" y="228" width="3.8300%" height="15" fill="rgb(206,27,48)"/><text x="56.4624%" y="238.50">npy_..</text></g><g><title>PyDataMem_NEW (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (3,193 samples, 3.83%)</title><rect x="56.2160%" y="244" width="3.8264%" height="15" fill="rgb(225,35,8)"/><text x="56.4660%" y="254.50">PyDa..</text></g><g><title>__libc_malloc (libc-2.27.so) (3,183 samples, 3.81%)</title><rect x="56.2280%" y="260" width="3.8144%" height="15" fill="rgb(250,213,24)"/><text x="56.4780%" y="270.50">__li..</text></g><g><title>0x7fd8819bde0e (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (3,282 samples, 3.93%)</title><rect x="56.1117%" y="180" width="3.9331%" height="15" fill="rgb(247,123,22)"/><text x="56.3617%" y="190.50">0x7f..</text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (3,282 samples, 3.93%)</title><rect x="56.1117%" y="196" width="3.9331%" height="15" fill="rgb(231,138,38)"/><text x="56.3617%" y="206.50">PyAr..</text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (3,271 samples, 3.92%)</title><rect x="56.1249%" y="212" width="3.9199%" height="15" fill="rgb(231,145,46)"/><text x="56.3749%" y="222.50">PyAr..</text></g><g><title>0x7fd881cfc63d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (3,385 samples, 4.06%)</title><rect x="56.0614%" y="164" width="4.0565%" height="15" fill="rgb(251,118,11)"/><text x="56.3114%" y="174.50">0x7f..</text></g><g><title>0x7fd881d52bfb (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (3,423 samples, 4.10%)</title><rect x="56.0183%" y="148" width="4.1021%" height="15" fill="rgb(217,147,25)"/><text x="56.2683%" y="158.50">0x7f..</text></g><g><title>0x7fd881c4b611 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (3,428 samples, 4.11%)</title><rect x="56.0135%" y="132" width="4.1080%" height="15" fill="rgb(247,81,37)"/><text x="56.2635%" y="142.50">0x7f..</text></g><g><title>0x7fd88282db9f (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (3,733 samples, 4.47%)</title><rect x="55.9727%" y="116" width="4.4736%" height="15" fill="rgb(209,12,38)"/><text x="56.2227%" y="126.50">0x7fd..</text></g><g><title>0x7fd8827fb7c8 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,048 samples, 4.85%)</title><rect x="55.6000%" y="100" width="4.8510%" height="15" fill="rgb(227,1,9)"/><text x="55.8500%" y="110.50">0x7fd8..</text></g><g><title>0x7fd8827fa020 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,071 samples, 4.88%)</title><rect x="55.5749%" y="84" width="4.8786%" height="15" fill="rgb(248,47,43)"/><text x="55.8249%" y="94.50">0x7fd8..</text></g><g><title>0x7fd881b3d661 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (30,384 samples, 36.41%)</title><rect x="24.0551%" y="68" width="36.4116%" height="15" fill="rgb(221,10,30)"/><text x="24.3051%" y="78.50">0x7fd881b3d661 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so)</text></g><g><title>0x7fd883247b1a (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (1,018 samples, 1.22%)</title><rect x="63.7382%" y="68" width="1.2200%" height="15" fill="rgb(210,229,1)"/><text x="63.9882%" y="78.50"></text></g><g><title>&lt;module&gt; (profile_cv2_long.py:15) (48,864 samples, 58.56%)</title><rect x="6.4509%" y="52" width="58.5576%" height="15" fill="rgb(222,148,37)"/><text x="6.7009%" y="62.50">&lt;module&gt; (profile_cv2_long.py:15)</text></g><g><title>0x7fd885d1dff0 (libc-2.27.so) (1,228 samples, 1.47%)</title><rect x="65.8642%" y="244" width="1.4716%" height="15" fill="rgb(234,67,33)"/><text x="66.1142%" y="254.50"></text></g><g><title>npy_alloc_cache (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1,382 samples, 1.66%)</title><rect x="65.6868%" y="196" width="1.6562%" height="15" fill="rgb(247,98,35)"/><text x="65.9368%" y="206.50"></text></g><g><title>PyDataMem_NEW (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1,381 samples, 1.65%)</title><rect x="65.6880%" y="212" width="1.6550%" height="15" fill="rgb(247,138,52)"/><text x="65.9380%" y="222.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (1,379 samples, 1.65%)</title><rect x="65.6904%" y="228" width="1.6526%" height="15" fill="rgb(213,79,30)"/><text x="65.9404%" y="238.50"></text></g><g><title>0x7fd8819bde0e (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (1,443 samples, 1.73%)</title><rect x="65.6389%" y="148" width="1.7293%" height="15" fill="rgb(246,177,23)"/><text x="65.8889%" y="158.50"></text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1,443 samples, 1.73%)</title><rect x="65.6389%" y="164" width="1.7293%" height="15" fill="rgb(230,62,27)"/><text x="65.8889%" y="174.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1,439 samples, 1.72%)</title><rect x="65.6436%" y="180" width="1.7245%" height="15" fill="rgb(216,154,8)"/><text x="65.8936%" y="190.50"></text></g><g><title>0x7fd881d51c10 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (1,497 samples, 1.79%)</title><rect x="65.5873%" y="116" width="1.7940%" height="15" fill="rgb(244,35,45)"/><text x="65.8373%" y="126.50">0..</text></g><g><title>0x7fd881cfc63d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (1,475 samples, 1.77%)</title><rect x="65.6137%" y="132" width="1.7676%" height="15" fill="rgb(251,115,12)"/><text x="65.8637%" y="142.50"></text></g><g><title>0x7fd881fe7446 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (1,507 samples, 1.81%)</title><rect x="65.5765%" y="100" width="1.8060%" height="15" fill="rgb(240,54,50)"/><text x="65.8265%" y="110.50">0..</text></g><g><title>0x7fd882ebf080 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (7,414 samples, 8.88%)</title><rect x="68.1087%" y="196" width="8.8848%" height="15" fill="rgb(233,84,52)"/><text x="68.3587%" y="206.50">0x7fd882ebf08..</text></g><g><title>0x7fd882ebf09d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (7,551 samples, 9.05%)</title><rect x="77.2955%" y="196" width="9.0490%" height="15" fill="rgb(207,117,47)"/><text x="77.5455%" y="206.50">0x7fd882ebf09..</text></g><g><title>0x7fd882ebf0a4 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (7,334 samples, 8.79%)</title><rect x="86.3445%" y="196" width="8.7889%" height="15" fill="rgb(249,43,39)"/><text x="86.5945%" y="206.50">0x7fd882ebf0..</text></g><g><title>0x7fd882ebd187 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (23,229 samples, 27.84%)</title><rect x="67.4628%" y="180" width="27.8372%" height="15" fill="rgb(209,38,44)"/><text x="67.7128%" y="190.50">0x7fd882ebd187 (cv2/cv2.cpython-37m-x86_64-li..</text></g><g><title>0x7fd881fd2339 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (23,244 samples, 27.86%)</title><rect x="67.4496%" y="164" width="27.8551%" height="15" fill="rgb(236,212,23)"/><text x="67.6996%" y="174.50">0x7fd881fd2339 (cv2/cv2.cpython-37m-x86_64-li..</text></g><g><title>0x7fd881db1f28 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (23,250 samples, 27.86%)</title><rect x="67.4472%" y="148" width="27.8623%" height="15" fill="rgb(242,79,21)"/><text x="67.6972%" y="158.50">0x7fd881db1f28 (cv2/cv2.cpython-37m-x86_64-li..</text></g><g><title>0x7fd881fe65f7 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (23,279 samples, 27.90%)</title><rect x="67.4292%" y="132" width="27.8971%" height="15" fill="rgb(211,96,35)"/><text x="67.6792%" y="142.50">0x7fd881fe65f7 (cv2/cv2.cpython-37m-x86_64-li..</text></g><g><title>0x7fd881fe6f7a (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (23,301 samples, 27.92%)</title><rect x="67.4137%" y="116" width="27.9234%" height="15" fill="rgb(253,215,40)"/><text x="67.6637%" y="126.50">0x7fd881fe6f7a (cv2/cv2.cpython-37m-x86_64-li..</text></g><g><title>0x7fd881fe75f1 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (23,325 samples, 27.95%)</title><rect x="67.3873%" y="100" width="27.9522%" height="15" fill="rgb(211,81,21)"/><text x="67.6373%" y="110.50">0x7fd881fe75f1 (cv2/cv2.cpython-37m-x86_64-li..</text></g><g><title>0x7fd881af153c (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (24,907 samples, 29.85%)</title><rect x="65.5118%" y="68" width="29.8480%" height="15" fill="rgb(208,190,38)"/><text x="65.7618%" y="78.50">0x7fd881af153c (cv2/cv2.cpython-37m-x86_64-linux..</text></g><g><title>0x7fd881fa318f (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (24,867 samples, 29.80%)</title><rect x="65.5598%" y="84" width="29.8001%" height="15" fill="rgb(235,213,38)"/><text x="65.8098%" y="94.50">0x7fd881fa318f (cv2/cv2.cpython-37m-x86_64-linux..</text></g><g><title>PyDataMem_FREE (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2,575 samples, 3.09%)</title><rect x="95.5061%" y="84" width="3.0858%" height="15" fill="rgb(237,122,38)"/><text x="95.7561%" y="94.50">PyD..</text></g><g><title>cfree (libc-2.27.so) (2,559 samples, 3.07%)</title><rect x="95.5252%" y="100" width="3.0667%" height="15" fill="rgb(244,218,35)"/><text x="95.7752%" y="110.50">cfr..</text></g><g><title>0x7fd885d1a378 (libc-2.27.so) (2,466 samples, 2.96%)</title><rect x="95.6367%" y="116" width="2.9552%" height="15" fill="rgb(240,68,47)"/><text x="95.8867%" y="126.50">0x7..</text></g><g><title>__default_morecore (libc-2.27.so) (2,466 samples, 2.96%)</title><rect x="95.6367%" y="132" width="2.9552%" height="15" fill="rgb(210,16,53)"/><text x="95.8867%" y="142.50">__d..</text></g><g><title>sbrk (libc-2.27.so) (2,466 samples, 2.96%)</title><rect x="95.6367%" y="148" width="2.9552%" height="15" fill="rgb(235,124,12)"/><text x="95.8867%" y="158.50">sbr..</text></g><g><title>brk (libc-2.27.so) (2,466 samples, 2.96%)</title><rect x="95.6367%" y="164" width="2.9552%" height="15" fill="rgb(224,169,11)"/><text x="95.8867%" y="174.50">brk..</text></g><g><title>&lt;module&gt; (profile_cv2_long.py:17) (28,089 samples, 33.66%)</title><rect x="65.0397%" y="52" width="33.6613%" height="15" fill="rgb(250,166,2)"/><text x="65.2897%" y="62.50">&lt;module&gt; (profile_cv2_long.py:17)</text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2,695 samples, 3.23%)</title><rect x="95.4713%" y="68" width="3.2296%" height="15" fill="rgb(242,216,29)"/><text x="95.7213%" y="78.50">arr..</text></g><g><title>0x7fd88282e3a9 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (893 samples, 1.07%)</title><rect x="98.8735%" y="116" width="1.0702%" height="15" fill="rgb(230,116,27)"/><text x="99.1235%" y="126.50"></text></g><g><title>avcodec_close (libavcodec-681a2255.so.58.93.100) (893 samples, 1.07%)</title><rect x="98.8735%" y="132" width="1.0702%" height="15" fill="rgb(228,99,48)"/><text x="99.1235%" y="142.50"></text></g><g><title>0x7fd881a25cc7 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (950 samples, 1.14%)</title><rect x="98.8579%" y="68" width="1.1385%" height="15" fill="rgb(253,11,6)"/><text x="99.1079%" y="78.50"></text></g><g><title>0x7fd8827faaa5 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (946 samples, 1.13%)</title><rect x="98.8627%" y="84" width="1.1337%" height="15" fill="rgb(247,143,39)"/><text x="99.1127%" y="94.50"></text></g><g><title>0x7fd88282e60d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (946 samples, 1.13%)</title><rect x="98.8627%" y="100" width="1.1337%" height="15" fill="rgb(236,97,10)"/><text x="99.1127%" y="110.50"></text></g><g><title>&lt;module&gt; (profile_cv2_long.py:21) (955 samples, 1.14%)</title><rect x="98.8543%" y="52" width="1.1445%" height="15" fill="rgb(233,208,19)"/><text x="99.1043%" y="62.50"></text></g><g><title>all (83,446 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>