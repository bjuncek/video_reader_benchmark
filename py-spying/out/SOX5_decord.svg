<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="554" onload="init(evt)" viewBox="0 0 1200 554" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="554" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="543.00"> </text><svg id="frames" x="10" width="1180"><g><title>0x1000 (?) (63 samples, 1.43%)</title><rect x="1.1588%" y="116" width="1.4315%" height="15" fill="rgb(227,0,7)"/><text x="1.4088%" y="126.50"></text></g><g><title>ff_frame_thread_init (pthread_frame.c:828) (63 samples, 1.43%)</title><rect x="1.1588%" y="132" width="1.4315%" height="15" fill="rgb(217,0,24)"/><text x="1.4088%" y="142.50"></text></g><g><title>clone (libc-2.27.so) (63 samples, 1.43%)</title><rect x="1.1588%" y="148" width="1.4315%" height="15" fill="rgb(221,193,54)"/><text x="1.4088%" y="158.50"></text></g><g><title>ff_read_packet (utils.c:856) (59 samples, 1.34%)</title><rect x="2.8403%" y="404" width="1.3406%" height="15" fill="rgb(248,212,6)"/><text x="3.0903%" y="414.50"></text></g><g><title>read_frame_internal (utils.c:1582) (61 samples, 1.39%)</title><rect x="2.8403%" y="388" width="1.3860%" height="15" fill="rgb(208,68,35)"/><text x="3.0903%" y="398.50"></text></g><g><title>av_opt_find2 (opt.c:1637) (56 samples, 1.27%)</title><rect x="4.8398%" y="420" width="1.2724%" height="15" fill="rgb(232,128,0)"/><text x="5.0898%" y="430.50"></text></g><g><title>read_frame_internal (utils.c:1745) (163 samples, 3.70%)</title><rect x="4.7035%" y="388" width="3.7037%" height="15" fill="rgb(207,160,47)"/><text x="4.9535%" y="398.50">read..</text></g><g><title>av_opt_get_dict_val (opt.c:1013) (162 samples, 3.68%)</title><rect x="4.7262%" y="404" width="3.6810%" height="15" fill="rgb(228,23,34)"/><text x="4.9762%" y="414.50">av_o..</text></g><g><title>av_opt_find2 (opt.c:1643) (91 samples, 2.07%)</title><rect x="6.3395%" y="420" width="2.0677%" height="15" fill="rgb(218,30,26)"/><text x="6.5895%" y="430.50">a..</text></g><g><title>decord::VideoReader::IndexKeyframes (video_reader.cc:473) (247 samples, 5.61%)</title><rect x="2.8175%" y="356" width="5.6124%" height="15" fill="rgb(220,122,19)"/><text x="3.0675%" y="366.50">decord:..</text></g><g><title>av_read_frame (utils.c:1779) (247 samples, 5.61%)</title><rect x="2.8175%" y="372" width="5.6124%" height="15" fill="rgb(250,228,42)"/><text x="3.0675%" y="382.50">av_read..</text></g><g><title>decord::VideoReader::SetVideoStream (video_reader.cc:155) (271 samples, 6.16%)</title><rect x="2.6812%" y="308" width="6.1577%" height="15" fill="rgb(240,193,28)"/><text x="2.9312%" y="318.50">decord::..</text></g><g><title>std::unique_ptr&lt;AVCodecParameters, decord::ffmpeg::Deleterp&lt;AVCodecParameters, void, &amp;avcodec_parameters_free&gt; &gt;::~unique_ptr (unique_ptr.h:263) (271 samples, 6.16%)</title><rect x="2.6812%" y="324" width="6.1577%" height="15" fill="rgb(216,20,37)"/><text x="2.9312%" y="334.50">std::uni..</text></g><g><title>decord::ffmpeg::Deleterp&lt;AVCodecParameters, void, &amp;avcodec_parameters_free&gt;::operator() (ffmpeg_common.h:73) (271 samples, 6.16%)</title><rect x="2.6812%" y="340" width="6.1577%" height="15" fill="rgb(206,188,39)"/><text x="2.9312%" y="350.50">decord::..</text></g><g><title>ff_frame_thread_init (pthread_frame.c:821) (49 samples, 1.11%)</title><rect x="9.7023%" y="340" width="1.1134%" height="15" fill="rgb(217,207,13)"/><text x="9.9523%" y="350.50"></text></g><g><title>decord::VideoReader::SetVideoStream (video_reader.cc:184) (101 samples, 2.29%)</title><rect x="8.9298%" y="308" width="2.2949%" height="15" fill="rgb(231,73,38)"/><text x="9.1798%" y="318.50">d..</text></g><g><title>avcodec_open2 (utils.c:743) (100 samples, 2.27%)</title><rect x="8.9525%" y="324" width="2.2722%" height="15" fill="rgb(225,20,46)"/><text x="9.2025%" y="334.50">a..</text></g><g><title>decord::VideoReader::VideoReader (video_reader.cc:116) (418 samples, 9.50%)</title><rect x="2.6812%" y="292" width="9.4978%" height="15" fill="rgb(210,31,41)"/><text x="2.9312%" y="302.50">decord::VideoR..</text></g><g><title>avformat_open_input (utils.c:631) (60 samples, 1.36%)</title><rect x="13.1561%" y="308" width="1.3633%" height="15" fill="rgb(221,200,47)"/><text x="13.4061%" y="318.50"></text></g><g><title>mov_read_header (mov.c:7409) (60 samples, 1.36%)</title><rect x="13.1561%" y="324" width="1.3633%" height="15" fill="rgb(226,26,5)"/><text x="13.4061%" y="334.50"></text></g><g><title>mov_read_default (mov.c:6870) (59 samples, 1.34%)</title><rect x="13.1788%" y="340" width="1.3406%" height="15" fill="rgb(249,33,26)"/><text x="13.4288%" y="350.50"></text></g><g><title>mov_read_moov (mov.c:1148) (59 samples, 1.34%)</title><rect x="13.1788%" y="356" width="1.3406%" height="15" fill="rgb(235,183,28)"/><text x="13.4288%" y="366.50"></text></g><g><title>mov_read_default (mov.c:6870) (59 samples, 1.34%)</title><rect x="13.1788%" y="372" width="1.3406%" height="15" fill="rgb(221,5,38)"/><text x="13.4288%" y="382.50"></text></g><g><title>decord::VideoReader::VideoReader (video_reader.cc:79) (103 samples, 2.34%)</title><rect x="12.2018%" y="292" width="2.3404%" height="15" fill="rgb(247,18,42)"/><text x="12.4518%" y="302.50">d..</text></g><g><title>avformat_find_stream_info (utils.c:3674) (64 samples, 1.45%)</title><rect x="14.6785%" y="308" width="1.4542%" height="15" fill="rgb(241,131,45)"/><text x="14.9285%" y="318.50"></text></g><g><title>avcodec_open2 (utils.c:936) (52 samples, 1.18%)</title><rect x="14.9511%" y="324" width="1.1815%" height="15" fill="rgb(249,31,29)"/><text x="15.2011%" y="334.50"></text></g><g><title>decode_cabac_residual_nondc_internal (h264_cabac.c:1798) (58 samples, 1.32%)</title><rect x="17.4279%" y="516" width="1.3179%" height="15" fill="rgb(225,111,53)"/><text x="17.6779%" y="526.50"></text></g><g><title>decode_cabac_luma_residual (h264_cabac.c:1892) (59 samples, 1.34%)</title><rect x="17.4279%" y="484" width="1.3406%" height="15" fill="rgb(238,160,17)"/><text x="17.6779%" y="494.50"></text></g><g><title>decode_cabac_residual_nondc (h264_cabac.c:1859) (59 samples, 1.34%)</title><rect x="17.4279%" y="500" width="1.3406%" height="15" fill="rgb(214,148,48)"/><text x="17.6779%" y="510.50"></text></g><g><title>ff_h264_decode_mb_cabac (h264_cabac.c:2430) (96 samples, 2.18%)</title><rect x="17.4051%" y="468" width="2.1813%" height="15" fill="rgb(232,36,49)"/><text x="17.6551%" y="478.50">f..</text></g><g><title>decode_slice (h264_slice.c:2634) (146 samples, 3.32%)</title><rect x="16.6780%" y="452" width="3.3174%" height="15" fill="rgb(209,103,24)"/><text x="16.9280%" y="462.50">dec..</text></g><g><title>hl_decode_mb_simple_8 (h264_mb_template.c:163) (59 samples, 1.34%)</title><rect x="20.0636%" y="468" width="1.3406%" height="15" fill="rgb(229,88,8)"/><text x="20.3136%" y="478.50"></text></g><g><title>decode_slice (h264_slice.c:2641) (77 samples, 1.75%)</title><rect x="19.9955%" y="452" width="1.7496%" height="15" fill="rgb(213,181,19)"/><text x="20.2455%" y="462.50"></text></g><g><title>ff_h264_filter_mb (h264_loopfilter.c:846) (54 samples, 1.23%)</title><rect x="21.8359%" y="500" width="1.2270%" height="15" fill="rgb(254,191,54)"/><text x="22.0859%" y="510.50"></text></g><g><title>decode_slice (h264_slice.c:2675) (117 samples, 2.66%)</title><rect x="21.7451%" y="452" width="2.6585%" height="15" fill="rgb(241,83,37)"/><text x="21.9951%" y="462.50">de..</text></g><g><title>loop_filter (h264_slice.c:2505) (115 samples, 2.61%)</title><rect x="21.7905%" y="468" width="2.6130%" height="15" fill="rgb(233,36,39)"/><text x="22.0405%" y="478.50">lo..</text></g><g><title>ff_h264_filter_mb_fast (h264_loopfilter.c:426) (115 samples, 2.61%)</title><rect x="21.7905%" y="484" width="2.6130%" height="15" fill="rgb(226,3,54)"/><text x="22.0405%" y="494.50">ff..</text></g><g><title>ff_h264_filter_mb (h264_loopfilter.c:847) (59 samples, 1.34%)</title><rect x="23.0629%" y="500" width="1.3406%" height="15" fill="rgb(245,192,40)"/><text x="23.3129%" y="510.50"></text></g><g><title>decode_nal_units (h264dec.c:691) (341 samples, 7.75%)</title><rect x="16.6780%" y="420" width="7.7482%" height="15" fill="rgb(238,167,29)"/><text x="16.9280%" y="430.50">decode_nal_..</text></g><g><title>ff_h264_execute_decode_slices (h264_slice.c:2810) (341 samples, 7.75%)</title><rect x="16.6780%" y="436" width="7.7482%" height="15" fill="rgb(232,182,51)"/><text x="16.9280%" y="446.50">ff_h264_exe..</text></g><g><title>avformat_find_stream_info (utils.c:3906) (364 samples, 8.27%)</title><rect x="16.1781%" y="308" width="8.2708%" height="15" fill="rgb(231,60,39)"/><text x="16.4281%" y="318.50">avformat_fin..</text></g><g><title>try_decode_frame (utils.c:3080) (364 samples, 8.27%)</title><rect x="16.1781%" y="324" width="8.2708%" height="15" fill="rgb(208,69,12)"/><text x="16.4281%" y="334.50">try_decode_f..</text></g><g><title>avcodec_send_packet (decode.c:706) (364 samples, 8.27%)</title><rect x="16.1781%" y="340" width="8.2708%" height="15" fill="rgb(235,93,37)"/><text x="16.4281%" y="350.50">avcodec_send..</text></g><g><title>decode_receive_frame_internal (decode.c:647) (364 samples, 8.27%)</title><rect x="16.1781%" y="356" width="8.2708%" height="15" fill="rgb(213,116,39)"/><text x="16.4281%" y="366.50">decode_recei..</text></g><g><title>decode_simple_receive_frame (decode.c:629) (364 samples, 8.27%)</title><rect x="16.1781%" y="372" width="8.2708%" height="15" fill="rgb(222,207,29)"/><text x="16.4281%" y="382.50">decode_simpl..</text></g><g><title>decode_simple_internal (decode.c:433) (364 samples, 8.27%)</title><rect x="16.1781%" y="388" width="8.2708%" height="15" fill="rgb(206,96,30)"/><text x="16.4281%" y="398.50">decode_simpl..</text></g><g><title>h264_decode_frame (h264dec.c:996) (360 samples, 8.18%)</title><rect x="16.2690%" y="404" width="8.1800%" height="15" fill="rgb(218,138,4)"/><text x="16.5190%" y="414.50">h264_decode..</text></g><g><title>decord::VideoReader::VideoReader (video_reader.cc:93) (440 samples, 10.00%)</title><rect x="14.5421%" y="292" width="9.9977%" height="15" fill="rgb(250,191,14)"/><text x="14.7921%" y="302.50">decord::VideoR..</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:173) (1,031 samples, 23.43%)</title><rect x="1.1361%" y="100" width="23.4265%" height="15" fill="rgb(239,60,40)"/><text x="1.3861%" y="110.50">__call__ (decord/_ffi/_ctypes/functio..</text></g><g><title>PyCFuncPtr_call (_ctypes.c:4212) (963 samples, 21.88%)</title><rect x="2.6812%" y="116" width="21.8814%" height="15" fill="rgb(206,27,48)"/><text x="2.9312%" y="126.50">PyCFuncPtr_call (_ctypes.c:4212)</text></g><g><title>_ctypes_callproc (callproc.c:1199) (963 samples, 21.88%)</title><rect x="2.6812%" y="132" width="21.8814%" height="15" fill="rgb(225,35,8)"/><text x="2.9312%" y="142.50">_ctypes_callproc (callproc.c:1199)</text></g><g><title>_call_function_pointer (callproc.c:892) (963 samples, 21.88%)</title><rect x="2.6812%" y="148" width="21.8814%" height="15" fill="rgb(250,213,24)"/><text x="2.9312%" y="158.50">_call_function_pointer (callproc.c:..</text></g><g><title>ffi_call (libffi.so.6.0.4) (963 samples, 21.88%)</title><rect x="2.6812%" y="164" width="21.8814%" height="15" fill="rgb(247,123,22)"/><text x="2.9312%" y="174.50">ffi_call (libffi.so.6.0.4)</text></g><g><title>ffi_call_unix64 (libffi.so.6.0.4) (963 samples, 21.88%)</title><rect x="2.6812%" y="180" width="21.8814%" height="15" fill="rgb(231,138,38)"/><text x="2.9312%" y="190.50">ffi_call_unix64 (libffi.so.6.0.4)</text></g><g><title>DECORDFuncCall (c_runtime_api.cc:236) (963 samples, 21.88%)</title><rect x="2.6812%" y="196" width="21.8814%" height="15" fill="rgb(231,145,46)"/><text x="2.9312%" y="206.50">DECORDFuncCall (c_runtime_api.cc:23..</text></g><g><title>_M_invoke (std_function.h:316) (963 samples, 21.88%)</title><rect x="2.6812%" y="212" width="21.8814%" height="15" fill="rgb(251,118,11)"/><text x="2.9312%" y="222.50">_M_invoke (std_function.h:316)</text></g><g><title>operator() (video_interface.cc:41) (963 samples, 21.88%)</title><rect x="2.6812%" y="228" width="21.8814%" height="15" fill="rgb(217,147,25)"/><text x="2.9312%" y="238.50">operator() (video_interface.cc:41)</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (basic_string.h:647) (963 samples, 21.88%)</title><rect x="2.6812%" y="244" width="21.8814%" height="15" fill="rgb(247,81,37)"/><text x="2.9312%" y="254.50">std::__cxx11::basic_string&lt;char, st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (basic_string.h:220) (963 samples, 21.88%)</title><rect x="2.6812%" y="260" width="21.8814%" height="15" fill="rgb(209,12,38)"/><text x="2.9312%" y="270.50">std::__cxx11::basic_string&lt;char, st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (basic_string.h:211) (963 samples, 21.88%)</title><rect x="2.6812%" y="276" width="21.8814%" height="15" fill="rgb(227,1,9)"/><text x="2.9312%" y="286.50">std::__cxx11::basic_string&lt;char, st..</text></g><g><title>__init__ (decord/video_reader.py:54) (1,045 samples, 23.74%)</title><rect x="0.8862%" y="84" width="23.7446%" height="15" fill="rgb(248,47,43)"/><text x="1.1362%" y="94.50">__init__ (decord/video_reader.py:54)</text></g><g><title>&lt;module&gt; (PV_SOX5_decord.py:10) (1,091 samples, 24.79%)</title><rect x="0.0000%" y="68" width="24.7898%" height="15" fill="rgb(221,10,30)"/><text x="0.2500%" y="78.50">&lt;module&gt; (PV_SOX5_decord.py:10)</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:170) (80 samples, 1.82%)</title><rect x="25.3352%" y="116" width="1.8178%" height="15" fill="rgb(210,229,1)"/><text x="25.5852%" y="126.50">_..</text></g><g><title>__getitem__ (decord/video_reader.py:101) (124 samples, 2.82%)</title><rect x="25.0398%" y="84" width="2.8175%" height="15" fill="rgb(222,148,37)"/><text x="25.2898%" y="94.50">__..</text></g><g><title>seek_accurate (decord/video_reader.py:229) (118 samples, 2.68%)</title><rect x="25.1761%" y="100" width="2.6812%" height="15" fill="rgb(234,67,33)"/><text x="25.4261%" y="110.50">se..</text></g><g><title>mov_read_packet (mov.c:7729) (69 samples, 1.57%)</title><rect x="30.2886%" y="372" width="1.5678%" height="15" fill="rgb(247,98,35)"/><text x="30.5386%" y="382.50"></text></g><g><title>ff_read_packet (utils.c:856) (93 samples, 2.11%)</title><rect x="29.8341%" y="356" width="2.1132%" height="15" fill="rgb(247,138,52)"/><text x="30.0841%" y="366.50">f..</text></g><g><title>read_frame_internal (utils.c:1582) (96 samples, 2.18%)</title><rect x="29.8341%" y="340" width="2.1813%" height="15" fill="rgb(213,79,30)"/><text x="30.0841%" y="350.50">r..</text></g><g><title>av_opt_get_dict_val (opt.c:1013) (144 samples, 3.27%)</title><rect x="32.5608%" y="356" width="3.2720%" height="15" fill="rgb(246,177,23)"/><text x="32.8108%" y="366.50">av_..</text></g><g><title>av_opt_find2 (opt.c:1643) (95 samples, 2.16%)</title><rect x="33.6742%" y="372" width="2.1586%" height="15" fill="rgb(230,62,27)"/><text x="33.9242%" y="382.50">a..</text></g><g><title>read_frame_internal (utils.c:1745) (145 samples, 3.29%)</title><rect x="32.5608%" y="340" width="3.2947%" height="15" fill="rgb(216,154,8)"/><text x="32.8108%" y="350.50">rea..</text></g><g><title>av_read_frame (utils.c:1779) (270 samples, 6.13%)</title><rect x="29.8114%" y="324" width="6.1350%" height="15" fill="rgb(244,35,45)"/><text x="30.0614%" y="334.50">av_read_..</text></g><g><title>decord::VideoReader::PushNext (video_reader.cc:370) (272 samples, 6.18%)</title><rect x="29.8114%" y="308" width="6.1804%" height="15" fill="rgb(251,115,12)"/><text x="30.0614%" y="318.50">decord::..</text></g><g><title>decord::VideoReader::NextFrameImpl (video_reader.cc:415) (297 samples, 6.75%)</title><rect x="29.3797%" y="292" width="6.7485%" height="15" fill="rgb(240,54,50)"/><text x="29.6297%" y="302.50">decord::V..</text></g><g><title>dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQueueType)0&gt;::Pop (concurrency.h:210) (2,136 samples, 48.53%)</title><rect x="36.7871%" y="324" width="48.5344%" height="15" fill="rgb(233,84,52)"/><text x="37.0371%" y="334.50">dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQueueTy..</text></g><g><title>std::condition_variable::wait&lt;dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQueueType)0&gt;::Pop(decord::runtime::NDArray*)::{lambda()#1}&gt; (condition_variable:98) (2,136 samples, 48.53%)</title><rect x="36.7871%" y="340" width="48.5344%" height="15" fill="rgb(207,117,47)"/><text x="37.0371%" y="350.50">std::condition_variable::wait&lt;dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDA..</text></g><g><title>dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQueueType)0&gt;::Pop(decord::runtime::NDArray*)::{lambda()#1}::operator() const (concurrency.h:211) (2,136 samples, 48.53%)</title><rect x="36.7871%" y="356" width="48.5344%" height="15" fill="rgb(249,43,39)"/><text x="37.0371%" y="366.50">dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQueueTy..</text></g><g><title>std::condition_variable::wait (condition_variable.cc:55) (2,136 samples, 48.53%)</title><rect x="36.7871%" y="372" width="48.5344%" height="15" fill="rgb(209,38,44)"/><text x="37.0371%" y="382.50">std::condition_variable::wait (condition_variable.cc:55)</text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (libpthread-2.27.so) (2,136 samples, 48.53%)</title><rect x="36.7871%" y="388" width="48.5344%" height="15" fill="rgb(236,212,23)"/><text x="37.0371%" y="398.50">pthread_cond_wait@@GLIBC_2.3.2 (libpthread-2.27.so)</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::Pop (threaded_decoder.cc:128) (2,164 samples, 49.17%)</title><rect x="36.1963%" y="308" width="49.1706%" height="15" fill="rgb(242,79,21)"/><text x="36.4463%" y="318.50">decord::ffmpeg::FFMPEGThreadedDecoder::Pop (threaded_decoder.cc:128)</text></g><g><title>decord::VideoReader::NextFrameImpl (video_reader.cc:419) (2,169 samples, 49.28%)</title><rect x="36.1736%" y="292" width="49.2843%" height="15" fill="rgb(211,96,35)"/><text x="36.4236%" y="302.50">decord::VideoReader::NextFrameImpl (video_reader.cc:419)</text></g><g><title>0x7f3b0bad5af2 (libc-2.27.so) (50 samples, 1.14%)</title><rect x="88.5935%" y="388" width="1.1361%" height="15" fill="rgb(253,215,40)"/><text x="88.8435%" y="398.50"></text></g><g><title>0x7f3b0bad5b06 (libc-2.27.so) (115 samples, 2.61%)</title><rect x="90.0023%" y="388" width="2.6130%" height="15" fill="rgb(211,81,21)"/><text x="90.2523%" y="398.50">0x..</text></g><g><title>decord::runtime::NDArray::NDArray (ndarray.h:311) (2,821 samples, 64.10%)</title><rect x="29.3797%" y="260" width="64.0991%" height="15" fill="rgb(208,190,38)"/><text x="29.6297%" y="270.50">decord::runtime::NDArray::NDArray (ndarray.h:311)</text></g><g><title>decord::VideoReader::NextFrame (video_reader.cc:456) (2,821 samples, 64.10%)</title><rect x="29.3797%" y="276" width="64.0991%" height="15" fill="rgb(235,213,38)"/><text x="29.6297%" y="286.50">decord::VideoReader::NextFrame (video_reader.cc:456)</text></g><g><title>decord::VideoReader::NextFrameImpl (video_reader.cc:448) (353 samples, 8.02%)</title><rect x="85.4579%" y="292" width="8.0209%" height="15" fill="rgb(237,122,38)"/><text x="85.7079%" y="302.50">decord::Vid..</text></g><g><title>decord::runtime::NDArray::~NDArray (ndarray.h:66) (353 samples, 8.02%)</title><rect x="85.4579%" y="308" width="8.0209%" height="15" fill="rgb(244,218,35)"/><text x="85.7079%" y="318.50">decord::run..</text></g><g><title>decord::runtime::NDArray::reset (ndarray.h:318) (353 samples, 8.02%)</title><rect x="85.4579%" y="324" width="8.0209%" height="15" fill="rgb(240,68,47)"/><text x="85.7079%" y="334.50">decord::run..</text></g><g><title>decord::VideoReader::CacheFrame (video_reader.cc:709) (353 samples, 8.02%)</title><rect x="85.4579%" y="340" width="8.0209%" height="15" fill="rgb(210,16,53)"/><text x="85.7079%" y="350.50">decord::Vid..</text></g><g><title>decord::runtime::NDArray::CopyFrom (ndarray.h:376) (353 samples, 8.02%)</title><rect x="85.4579%" y="356" width="8.0209%" height="15" fill="rgb(235,124,12)"/><text x="85.7079%" y="366.50">decord::run..</text></g><g><title>decord::runtime::NDArray::CopyFromTo (ndarray.cc:187) (351 samples, 7.98%)</title><rect x="85.5033%" y="372" width="7.9755%" height="15" fill="rgb(224,169,11)"/><text x="85.7533%" y="382.50">decord::run..</text></g><g><title>_ctypes_callproc (callproc.c:1199) (2,828 samples, 64.26%)</title><rect x="29.2661%" y="148" width="64.2581%" height="15" fill="rgb(250,166,2)"/><text x="29.5161%" y="158.50">_ctypes_callproc (callproc.c:1199)</text></g><g><title>_call_function_pointer (callproc.c:892) (2,827 samples, 64.24%)</title><rect x="29.2888%" y="164" width="64.2354%" height="15" fill="rgb(242,216,29)"/><text x="29.5388%" y="174.50">_call_function_pointer (callproc.c:892)</text></g><g><title>ffi_call (libffi.so.6.0.4) (2,827 samples, 64.24%)</title><rect x="29.2888%" y="180" width="64.2354%" height="15" fill="rgb(230,116,27)"/><text x="29.5388%" y="190.50">ffi_call (libffi.so.6.0.4)</text></g><g><title>ffi_call_unix64 (libffi.so.6.0.4) (2,826 samples, 64.21%)</title><rect x="29.3115%" y="196" width="64.2127%" height="15" fill="rgb(228,99,48)"/><text x="29.5615%" y="206.50">ffi_call_unix64 (libffi.so.6.0.4)</text></g><g><title>DECORDFuncCall (c_runtime_api.cc:236) (2,823 samples, 64.14%)</title><rect x="29.3797%" y="212" width="64.1445%" height="15" fill="rgb(253,11,6)"/><text x="29.6297%" y="222.50">DECORDFuncCall (c_runtime_api.cc:236)</text></g><g><title>_M_invoke (std_function.h:316) (2,823 samples, 64.14%)</title><rect x="29.3797%" y="228" width="64.1445%" height="15" fill="rgb(247,143,39)"/><text x="29.6297%" y="238.50">_M_invoke (std_function.h:316)</text></g><g><title>operator() (video_interface.cc:54) (2,823 samples, 64.14%)</title><rect x="29.3797%" y="244" width="64.1445%" height="15" fill="rgb(236,97,10)"/><text x="29.6297%" y="254.50">operator() (video_interface.cc:54)</text></g><g><title>PyCFuncPtr_call (_ctypes.c:4212) (2,838 samples, 64.49%)</title><rect x="29.1752%" y="132" width="64.4853%" height="15" fill="rgb(233,208,19)"/><text x="29.4252%" y="142.50">PyCFuncPtr_call (_ctypes.c:4212)</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:173) (2,851 samples, 64.78%)</title><rect x="28.9252%" y="116" width="64.7807%" height="15" fill="rgb(216,164,2)"/><text x="29.1752%" y="126.50">__call__ (decord/_ffi/_ctypes/function.py:173)</text></g><g><title>&lt;lambda&gt; (decord/_ffi/_ctypes/function.py:215) (50 samples, 1.14%)</title><rect x="94.0241%" y="132" width="1.1361%" height="15" fill="rgb(220,129,5)"/><text x="94.2741%" y="142.50"></text></g><g><title>next (decord/video_reader.py:114) (2,963 samples, 67.33%)</title><rect x="27.8800%" y="100" width="67.3256%" height="15" fill="rgb(242,17,10)"/><text x="28.1300%" y="110.50">next (decord/video_reader.py:114)</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:178) (59 samples, 1.34%)</title><rect x="93.8650%" y="116" width="1.3406%" height="15" fill="rgb(242,107,0)"/><text x="94.1150%" y="126.50"></text></g><g><title>next (decord/video_reader.py:115) (64 samples, 1.45%)</title><rect x="95.2056%" y="100" width="1.4542%" height="15" fill="rgb(251,28,31)"/><text x="95.4556%" y="110.50"></text></g><g><title>shape (decord/_ffi/ndarray.py:140) (60 samples, 1.36%)</title><rect x="95.2965%" y="116" width="1.3633%" height="15" fill="rgb(233,223,10)"/><text x="95.5465%" y="126.50"></text></g><g><title>__getitem__ (decord/video_reader.py:102) (3,040 samples, 69.08%)</title><rect x="27.8573%" y="84" width="69.0752%" height="15" fill="rgb(215,21,27)"/><text x="28.1073%" y="94.50">__getitem__ (decord/video_reader.py:102)</text></g><g><title>&lt;module&gt; (PV_SOX5_decord.py:13) (3,185 samples, 72.37%)</title><rect x="24.8353%" y="68" width="72.3699%" height="15" fill="rgb(232,23,21)"/><text x="25.0853%" y="78.50">&lt;module&gt; (PV_SOX5_decord.py:13)</text></g><g><title>_ctypes_callproc (callproc.c:1199) (51 samples, 1.16%)</title><rect x="98.4549%" y="116" width="1.1588%" height="15" fill="rgb(244,5,23)"/><text x="98.7049%" y="126.50"></text></g><g><title>_call_function_pointer (callproc.c:892) (45 samples, 1.02%)</title><rect x="98.5912%" y="132" width="1.0225%" height="15" fill="rgb(226,81,46)"/><text x="98.8412%" y="142.50"></text></g><g><title>ffi_call (libffi.so.6.0.4) (45 samples, 1.02%)</title><rect x="98.5912%" y="148" width="1.0225%" height="15" fill="rgb(247,70,30)"/><text x="98.8412%" y="158.50"></text></g><g><title>ffi_call_unix64 (libffi.so.6.0.4) (45 samples, 1.02%)</title><rect x="98.5912%" y="164" width="1.0225%" height="15" fill="rgb(212,68,19)"/><text x="98.8412%" y="174.50"></text></g><g><title>PyCFuncPtr_call (_ctypes.c:4212) (64 samples, 1.45%)</title><rect x="98.3640%" y="100" width="1.4542%" height="15" fill="rgb(240,187,13)"/><text x="98.6140%" y="110.50"></text></g><g><title>&lt;module&gt; (PV_SOX5_decord.py:9) (104 samples, 2.36%)</title><rect x="97.6142%" y="68" width="2.3631%" height="15" fill="rgb(223,113,26)"/><text x="97.8642%" y="78.50">&lt;m..</text></g><g><title>__del__ (decord/_ffi/_ctypes/ndarray.py:70) (87 samples, 1.98%)</title><rect x="98.0005%" y="84" width="1.9768%" height="15" fill="rgb(206,192,2)"/><text x="98.2505%" y="94.50">_..</text></g><g><title>all (4,401 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="62.50"></text></g></svg></svg>