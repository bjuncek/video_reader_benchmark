<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="362" onload="init(evt)" viewBox="0 0 1200 362" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="362" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="351.00"> </text><svg id="frames" x="10" width="1180"><g><title>icv_l9_ownsCopy_8u_E9 (libopencv_quality.so.4.2.0) (712 samples, 3.55%)</title><rect x="0.2839%" y="84" width="3.5465%" height="15" fill="rgb(227,0,7)"/><text x="0.5339%" y="94.50">icv_..</text></g><g><title>ff_read_packet (utils.c:856) (222 samples, 1.11%)</title><rect x="4.2588%" y="212" width="1.1058%" height="15" fill="rgb(217,0,24)"/><text x="4.5088%" y="222.50"></text></g><g><title>read_frame_internal (utils.c:1582) (226 samples, 1.13%)</title><rect x="4.2588%" y="196" width="1.1257%" height="15" fill="rgb(221,193,54)"/><text x="4.5088%" y="206.50"></text></g><g><title>read_frame_internal (utils.c:1745) (290 samples, 1.44%)</title><rect x="5.5290%" y="196" width="1.4445%" height="15" fill="rgb(248,212,6)"/><text x="5.7790%" y="206.50"></text></g><g><title>av_opt_get_dict_val (opt.c:1013) (288 samples, 1.43%)</title><rect x="5.5390%" y="212" width="1.4345%" height="15" fill="rgb(208,68,35)"/><text x="5.7890%" y="222.50"></text></g><g><title>av_read_frame (utils.c:1779) (554 samples, 2.76%)</title><rect x="4.2588%" y="180" width="2.7595%" height="15" fill="rgb(232,128,0)"/><text x="4.5088%" y="190.50">av..</text></g><g><title>submit_packet (pthread_frame.c:408) (376 samples, 1.87%)</title><rect x="7.2524%" y="276" width="1.8729%" height="15" fill="rgb(207,160,47)"/><text x="7.5024%" y="286.50">s..</text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (libpthread-2.27.so) (376 samples, 1.87%)</title><rect x="7.2524%" y="292" width="1.8729%" height="15" fill="rgb(228,23,34)"/><text x="7.5024%" y="302.50">p..</text></g><g><title>ff_h264_ref_picture (h264_picture.c:75) (225 samples, 1.12%)</title><rect x="10.6346%" y="308" width="1.1207%" height="15" fill="rgb(218,30,26)"/><text x="10.8846%" y="318.50"></text></g><g><title>ff_h264_unref_picture (h264_picture.c:54) (284 samples, 1.41%)</title><rect x="13.0654%" y="308" width="1.4146%" height="15" fill="rgb(220,122,19)"/><text x="13.3154%" y="318.50"></text></g><g><title>ff_h264_update_thread_context (h264_slice.c:388) (1,119 samples, 5.57%)</title><rect x="10.0767%" y="292" width="5.5738%" height="15" fill="rgb(250,228,42)"/><text x="10.3267%" y="302.50">ff_h264..</text></g><g><title>submit_packet (pthread_frame.c:413) (1,586 samples, 7.90%)</title><rect x="9.1403%" y="276" width="7.9000%" height="15" fill="rgb(240,193,28)"/><text x="9.3903%" y="286.50">submit_pack..</text></g><g><title>ff_thread_decode_frame (pthread_frame.c:490) (2,221 samples, 11.06%)</title><rect x="7.2226%" y="260" width="11.0630%" height="15" fill="rgb(216,20,37)"/><text x="7.4726%" y="270.50">ff_thread_decode..</text></g><g><title>decode_simple_internal (decode.c:451) (2,245 samples, 11.18%)</title><rect x="7.1528%" y="244" width="11.1825%" height="15" fill="rgb(206,188,39)"/><text x="7.4028%" y="254.50">decode_simple_in..</text></g><g><title>decode_receive_frame_internal (decode.c:647) (2,261 samples, 11.26%)</title><rect x="7.1130%" y="212" width="11.2622%" height="15" fill="rgb(217,207,13)"/><text x="7.3630%" y="222.50">decode_receive_fr..</text></g><g><title>decode_simple_receive_frame (decode.c:629) (2,261 samples, 11.26%)</title><rect x="7.1130%" y="228" width="11.2622%" height="15" fill="rgb(231,73,38)"/><text x="7.3630%" y="238.50">decode_simple_rec..</text></g><g><title>compat_decode (decode.c:841) (2,303 samples, 11.47%)</title><rect x="7.0482%" y="180" width="11.4714%" height="15" fill="rgb(225,20,46)"/><text x="7.2982%" y="190.50">compat_decode (de..</text></g><g><title>avcodec_send_packet (decode.c:706) (2,291 samples, 11.41%)</title><rect x="7.1080%" y="196" width="11.4116%" height="15" fill="rgb(210,31,41)"/><text x="7.3580%" y="206.50">avcodec_send_pack..</text></g><g><title>ff_thread_decode_frame (pthread_frame.c:490) (233 samples, 1.16%)</title><rect x="18.6890%" y="260" width="1.1606%" height="15" fill="rgb(221,200,47)"/><text x="18.9390%" y="270.50"></text></g><g><title>avcodec_receive_frame (decode.c:754) (245 samples, 1.22%)</title><rect x="18.6541%" y="196" width="1.2204%" height="15" fill="rgb(226,26,5)"/><text x="18.9041%" y="206.50"></text></g><g><title>decode_receive_frame_internal (decode.c:647) (244 samples, 1.22%)</title><rect x="18.6591%" y="212" width="1.2154%" height="15" fill="rgb(249,33,26)"/><text x="18.9091%" y="222.50"></text></g><g><title>decode_simple_receive_frame (decode.c:629) (244 samples, 1.22%)</title><rect x="18.6591%" y="228" width="1.2154%" height="15" fill="rgb(235,183,28)"/><text x="18.9091%" y="238.50"></text></g><g><title>decode_simple_internal (decode.c:451) (240 samples, 1.20%)</title><rect x="18.6790%" y="244" width="1.1955%" height="15" fill="rgb(221,5,38)"/><text x="18.9290%" y="254.50"></text></g><g><title>compat_decode (decode.c:854) (283 samples, 1.41%)</title><rect x="18.5196%" y="180" width="1.4096%" height="15" fill="rgb(247,18,42)"/><text x="18.7696%" y="190.50"></text></g><g><title>cv::VideoCapture::grab (libopencv_videoio.so.4.2.0) (3,233 samples, 16.10%)</title><rect x="4.0048%" y="116" width="16.1038%" height="15" fill="rgb(241,131,45)"/><text x="4.2548%" y="126.50">cv::VideoCapture::grab (l..</text></g><g><title>cv::(anonymous namespace)::CvCapture_FFMPEG_proxy::grabFrame (libopencv_videoio.so.4.2.0) (3,231 samples, 16.09%)</title><rect x="4.0147%" y="132" width="16.0938%" height="15" fill="rgb(249,31,29)"/><text x="4.2647%" y="142.50">cv::(anonymous namespace)..</text></g><g><title>cvGrabFrame_FFMPEG (libopencv_videoio.so.4.2.0) (3,231 samples, 16.09%)</title><rect x="4.0147%" y="148" width="16.0938%" height="15" fill="rgb(225,111,53)"/><text x="4.2647%" y="158.50">cvGrabFrame_FFMPEG (libop..</text></g><g><title>CvCapture_FFMPEG::grabFrame (libopencv_videoio.so.4.2.0) (3,231 samples, 16.09%)</title><rect x="4.0147%" y="164" width="16.0938%" height="15" fill="rgb(238,160,17)"/><text x="4.2647%" y="174.50">CvCapture_FFMPEG::grabFra..</text></g><g><title>cv::Mat::copyTo (libopencv_core.so.4.2.0) (258 samples, 1.29%)</title><rect x="20.1285%" y="148" width="1.2851%" height="15" fill="rgb(214,148,48)"/><text x="20.3785%" y="158.50"></text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:378) (495 samples, 2.47%)</title><rect x="22.1409%" y="196" width="2.4656%" height="15" fill="rgb(232,36,49)"/><text x="22.3909%" y="206.50">yu..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:379) (940 samples, 4.68%)</title><rect x="24.6065%" y="196" width="4.6822%" height="15" fill="rgb(209,103,24)"/><text x="24.8565%" y="206.50">yuv2r..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:380) (646 samples, 3.22%)</title><rect x="29.2887%" y="196" width="3.2178%" height="15" fill="rgb(229,88,8)"/><text x="29.5387%" y="206.50">yuv..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:382) (650 samples, 3.24%)</title><rect x="32.5065%" y="196" width="3.2377%" height="15" fill="rgb(213,181,19)"/><text x="32.7565%" y="206.50">yuv..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:383) (998 samples, 4.97%)</title><rect x="35.7442%" y="196" width="4.9711%" height="15" fill="rgb(254,191,54)"/><text x="35.9942%" y="206.50">yuv2rg..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:384) (562 samples, 2.80%)</title><rect x="40.7153%" y="196" width="2.7994%" height="15" fill="rgb(241,83,37)"/><text x="40.9653%" y="206.50">yu..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:386) (604 samples, 3.01%)</title><rect x="43.5146%" y="196" width="3.0086%" height="15" fill="rgb(233,36,39)"/><text x="43.7646%" y="206.50">yuv..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:387) (1,013 samples, 5.05%)</title><rect x="46.5232%" y="196" width="5.0458%" height="15" fill="rgb(226,3,54)"/><text x="46.7732%" y="206.50">yuv2rg..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:388) (549 samples, 2.73%)</title><rect x="51.5690%" y="196" width="2.7346%" height="15" fill="rgb(245,192,40)"/><text x="51.8190%" y="206.50">yu..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:390) (649 samples, 3.23%)</title><rect x="54.3036%" y="196" width="3.2327%" height="15" fill="rgb(238,167,29)"/><text x="54.5536%" y="206.50">yuv..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:391) (1,039 samples, 5.18%)</title><rect x="57.5364%" y="196" width="5.1753%" height="15" fill="rgb(232,182,51)"/><text x="57.7864%" y="206.50">yuv2rg..</text></g><g><title>yuv2rgb_c_24_bgr (yuv2rgb.c:392) (557 samples, 2.77%)</title><rect x="62.7117%" y="196" width="2.7745%" height="15" fill="rgb(231,60,39)"/><text x="62.9617%" y="206.50">yu..</text></g><g><title>cv::(anonymous namespace)::CvCapture_FFMPEG_proxy::retrieveFrame (libopencv_videoio.so.4.2.0) (9,273 samples, 46.19%)</title><rect x="20.1235%" y="132" width="46.1895%" height="15" fill="rgb(208,69,12)"/><text x="20.3735%" y="142.50">cv::(anonymous namespace)::CvCapture_FFMPEG_proxy::retrieveFrame (libopencv_..</text></g><g><title>cvRetrieveFrame_FFMPEG (libopencv_videoio.so.4.2.0) (9,010 samples, 44.88%)</title><rect x="21.4336%" y="148" width="44.8795%" height="15" fill="rgb(235,93,37)"/><text x="21.6836%" y="158.50">cvRetrieveFrame_FFMPEG (libopencv_videoio.so.4.2.0)</text></g><g><title>CvCapture_FFMPEG::retrieveFrame (libopencv_videoio.so.4.2.0) (9,009 samples, 44.87%)</title><rect x="21.4385%" y="164" width="44.8745%" height="15" fill="rgb(213,116,39)"/><text x="21.6885%" y="174.50">CvCapture_FFMPEG::retrieveFrame (libopencv_videoio.so.4.2.0)</text></g><g><title>sws_scale (swscale.c:989) (8,976 samples, 44.71%)</title><rect x="21.6029%" y="180" width="44.7101%" height="15" fill="rgb(222,207,29)"/><text x="21.8529%" y="190.50">sws_scale (swscale.c:989)</text></g><g><title>cv::VideoCapture::retrieve (libopencv_videoio.so.4.2.0) (9,278 samples, 46.21%)</title><rect x="20.1086%" y="116" width="46.2144%" height="15" fill="rgb(206,96,30)"/><text x="20.3586%" y="126.50">cv::VideoCapture::retrieve (libopencv_videoio.so.4.2.0)</text></g><g><title>cv::VideoCapture::read (libopencv_videoio.so.4.2.0) (12,517 samples, 62.35%)</title><rect x="3.9998%" y="100" width="62.3481%" height="15" fill="rgb(218,138,4)"/><text x="4.2498%" y="110.50">cv::VideoCapture::read (libopencv_videoio.so.4.2.0)</text></g><g><title>&lt;module&gt; (PV_SOX5_cv2.py:11) (13,300 samples, 66.25%)</title><rect x="0.1395%" y="68" width="66.2483%" height="15" fill="rgb(250,191,14)"/><text x="0.3895%" y="78.50">&lt;module&gt; (PV_SOX5_cv2.py:11)</text></g><g><title>pyopencv_cv_VideoCapture_read (cv2.cpython-38-x86_64-linux-gnu.so) (12,559 samples, 62.56%)</title><rect x="3.8304%" y="84" width="62.5573%" height="15" fill="rgb(239,60,40)"/><text x="4.0804%" y="94.50">pyopencv_cv_VideoCapture_read (cv2.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>PyDataMem_FREE (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (434 samples, 2.16%)</title><rect x="66.6418%" y="100" width="2.1618%" height="15" fill="rgb(206,27,48)"/><text x="66.8918%" y="110.50">P..</text></g><g><title>free (libc-2.27.so) (432 samples, 2.15%)</title><rect x="66.6517%" y="116" width="2.1518%" height="15" fill="rgb(225,35,8)"/><text x="66.9017%" y="126.50">f..</text></g><g><title>0x7fc243652448 (libc-2.27.so) (427 samples, 2.13%)</title><rect x="66.6766%" y="132" width="2.1269%" height="15" fill="rgb(250,213,24)"/><text x="66.9266%" y="142.50">0..</text></g><g><title>__default_morecore (libc-2.27.so) (427 samples, 2.13%)</title><rect x="66.6766%" y="148" width="2.1269%" height="15" fill="rgb(247,123,22)"/><text x="66.9266%" y="158.50">_..</text></g><g><title>sbrk (libc-2.27.so) (427 samples, 2.13%)</title><rect x="66.6766%" y="164" width="2.1269%" height="15" fill="rgb(231,138,38)"/><text x="66.9266%" y="174.50">s..</text></g><g><title>brk (libc-2.27.so) (427 samples, 2.13%)</title><rect x="66.6766%" y="180" width="2.1269%" height="15" fill="rgb(231,145,46)"/><text x="66.9266%" y="190.50">b..</text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (459 samples, 2.29%)</title><rect x="66.6169%" y="84" width="2.2863%" height="15" fill="rgb(251,118,11)"/><text x="66.8669%" y="94.50">a..</text></g><g><title>npy_alloc_cache (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (286 samples, 1.42%)</title><rect x="69.1871%" y="212" width="1.4246%" height="15" fill="rgb(217,147,25)"/><text x="69.4371%" y="222.50"></text></g><g><title>PyDataMem_NEW (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (286 samples, 1.42%)</title><rect x="69.1871%" y="228" width="1.4246%" height="15" fill="rgb(247,81,37)"/><text x="69.4371%" y="238.50"></text></g><g><title>malloc (libc-2.27.so) (285 samples, 1.42%)</title><rect x="69.1921%" y="244" width="1.4196%" height="15" fill="rgb(209,12,38)"/><text x="69.4421%" y="254.50"></text></g><g><title>0x7fc243656180 (libc-2.27.so) (278 samples, 1.38%)</title><rect x="69.2269%" y="260" width="1.3847%" height="15" fill="rgb(227,1,9)"/><text x="69.4769%" y="270.50"></text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (307 samples, 1.53%)</title><rect x="69.1323%" y="180" width="1.5292%" height="15" fill="rgb(248,47,43)"/><text x="69.3823%" y="190.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (305 samples, 1.52%)</title><rect x="69.1423%" y="196" width="1.5192%" height="15" fill="rgb(221,10,30)"/><text x="69.3923%" y="206.50"></text></g><g><title>NumpyAllocator::allocate (cv2.cpython-38-x86_64-linux-gnu.so) (319 samples, 1.59%)</title><rect x="69.0974%" y="164" width="1.5890%" height="15" fill="rgb(210,229,1)"/><text x="69.3474%" y="174.50"></text></g><g><title>cv::Mat::create (libopencv_core.so.4.2.0) (325 samples, 1.62%)</title><rect x="69.0875%" y="148" width="1.6188%" height="15" fill="rgb(222,148,37)"/><text x="69.3375%" y="158.50"></text></g><g><title>cv::_OutputArray::create (libopencv_core.so.4.2.0) (327 samples, 1.63%)</title><rect x="69.0875%" y="132" width="1.6288%" height="15" fill="rgb(234,67,33)"/><text x="69.3375%" y="142.50"></text></g><g><title>icv_l9_ippiSwapChannels_8u_C3R (libopencv_imgproc.so.4.2.0) (4,600 samples, 22.91%)</title><rect x="70.8209%" y="196" width="22.9129%" height="15" fill="rgb(247,98,35)"/><text x="71.0709%" y="206.50">icv_l9_ippiSwapChannels_8u_C3R (libo..</text></g><g><title>icv_l9_owniSwapChannels_8u_C3R (libopencv_imgproc.so.4.2.0) (4,600 samples, 22.91%)</title><rect x="70.8209%" y="212" width="22.9129%" height="15" fill="rgb(247,138,52)"/><text x="71.0709%" y="222.50">icv_l9_owniSwapChannels_8u_C3R (libo..</text></g><g><title>cv::CvtColorIPPLoop_Invoker&lt;cv::IPPReorderFunctor&gt;::operator() (libopencv_imgproc.so.4.2.0) (4,604 samples, 22.93%)</title><rect x="70.8109%" y="180" width="22.9329%" height="15" fill="rgb(213,79,30)"/><text x="71.0609%" y="190.50">cv::CvtColorIPPLoop_Invoker&lt;cv::IPPR..</text></g><g><title>cv::CvtColorIPPLoopCopy&lt;cv::IPPReorderFunctor&gt; (libopencv_imgproc.so.4.2.0) (4,624 samples, 23.03%)</title><rect x="70.7412%" y="148" width="23.0325%" height="15" fill="rgb(246,177,23)"/><text x="70.9912%" y="158.50">cv::CvtColorIPPLoopCopy&lt;cv::IPPReorde..</text></g><g><title>cv::parallel_for_ (libopencv_core.so.4.2.0) (4,620 samples, 23.01%)</title><rect x="70.7611%" y="164" width="23.0126%" height="15" fill="rgb(230,62,27)"/><text x="71.0111%" y="174.50">cv::parallel_for_ (libopencv_core.so...</text></g><g><title>cv::cvtColorBGR2BGR (libopencv_imgproc.so.4.2.0) (4,966 samples, 24.74%)</title><rect x="69.0476%" y="116" width="24.7360%" height="15" fill="rgb(216,154,8)"/><text x="69.2976%" y="126.50">cv::cvtColorBGR2BGR (libopencv_imgproc...</text></g><g><title>cv::hal::cvtBGRtoBGR (libopencv_imgproc.so.4.2.0) (4,631 samples, 23.07%)</title><rect x="70.7163%" y="132" width="23.0673%" height="15" fill="rgb(244,35,45)"/><text x="70.9663%" y="142.50">cv::hal::cvtBGRtoBGR (libopencv_imgpr..</text></g><g><title>cv::cvtColor (libopencv_imgproc.so.4.2.0) (4,969 samples, 24.75%)</title><rect x="69.0377%" y="100" width="24.7509%" height="15" fill="rgb(251,115,12)"/><text x="69.2877%" y="110.50">cv::cvtColor (libopencv_imgproc.so.4.2...</text></g><g><title>&lt;module&gt; (PV_SOX5_cv2.py:13) (5,522 samples, 27.51%)</title><rect x="66.4126%" y="68" width="27.5055%" height="15" fill="rgb(240,54,50)"/><text x="66.6626%" y="78.50">&lt;module&gt; (PV_SOX5_cv2.py:13)</text></g><g><title>pyopencv_cv_cvtColor (cv2.cpython-38-x86_64-linux-gnu.so) (5,022 samples, 25.01%)</title><rect x="68.9032%" y="84" width="25.0149%" height="15" fill="rgb(233,84,52)"/><text x="69.1532%" y="94.50">pyopencv_cv_cvtColor (cv2.cpython-38-x86..</text></g><g><title>avcodec_open2 (utils.c:743) (264 samples, 1.32%)</title><rect x="96.1297%" y="196" width="1.3150%" height="15" fill="rgb(207,117,47)"/><text x="96.3797%" y="206.50"></text></g><g><title>decode_nal_units (h264dec.c:691) (266 samples, 1.32%)</title><rect x="97.8880%" y="308" width="1.3250%" height="15" fill="rgb(249,43,39)"/><text x="98.1380%" y="318.50"></text></g><g><title>ff_h264_execute_decode_slices (h264_slice.c:2810) (266 samples, 1.32%)</title><rect x="97.8880%" y="324" width="1.3250%" height="15" fill="rgb(209,38,44)"/><text x="98.1380%" y="334.50"></text></g><g><title>avformat_find_stream_info (utils.c:3906) (287 samples, 1.43%)</title><rect x="97.7884%" y="196" width="1.4296%" height="15" fill="rgb(236,212,23)"/><text x="98.0384%" y="206.50"></text></g><g><title>try_decode_frame (utils.c:3080) (287 samples, 1.43%)</title><rect x="97.7884%" y="212" width="1.4296%" height="15" fill="rgb(242,79,21)"/><text x="98.0384%" y="222.50"></text></g><g><title>avcodec_send_packet (decode.c:706) (287 samples, 1.43%)</title><rect x="97.7884%" y="228" width="1.4296%" height="15" fill="rgb(211,96,35)"/><text x="98.0384%" y="238.50"></text></g><g><title>decode_receive_frame_internal (decode.c:647) (287 samples, 1.43%)</title><rect x="97.7884%" y="244" width="1.4296%" height="15" fill="rgb(253,215,40)"/><text x="98.0384%" y="254.50"></text></g><g><title>decode_simple_receive_frame (decode.c:629) (287 samples, 1.43%)</title><rect x="97.7884%" y="260" width="1.4296%" height="15" fill="rgb(211,81,21)"/><text x="98.0384%" y="270.50"></text></g><g><title>decode_simple_internal (decode.c:433) (287 samples, 1.43%)</title><rect x="97.7884%" y="276" width="1.4296%" height="15" fill="rgb(208,190,38)"/><text x="98.0384%" y="286.50"></text></g><g><title>h264_decode_frame (h264dec.c:996) (281 samples, 1.40%)</title><rect x="97.8183%" y="292" width="1.3997%" height="15" fill="rgb(235,213,38)"/><text x="98.0683%" y="302.50"></text></g><g><title>cv::StaticBackend::createCapture (libopencv_videoio.so.4.2.0) (774 samples, 3.86%)</title><rect x="96.1148%" y="132" width="3.8553%" height="15" fill="rgb(237,122,38)"/><text x="96.3648%" y="142.50">cv::..</text></g><g><title>cv::cvCreateFileCapture_FFMPEG_proxy (libopencv_videoio.so.4.2.0) (774 samples, 3.86%)</title><rect x="96.1148%" y="148" width="3.8553%" height="15" fill="rgb(244,218,35)"/><text x="96.3648%" y="158.50">cv::..</text></g><g><title>cvCreateFileCapture_FFMPEG (libopencv_videoio.so.4.2.0) (774 samples, 3.86%)</title><rect x="96.1148%" y="164" width="3.8553%" height="15" fill="rgb(240,68,47)"/><text x="96.3648%" y="174.50">cvCr..</text></g><g><title>CvCapture_FFMPEG::open (libopencv_videoio.so.4.2.0) (773 samples, 3.85%)</title><rect x="96.1197%" y="180" width="3.8504%" height="15" fill="rgb(210,16,53)"/><text x="96.3697%" y="190.50">CvCa..</text></g><g><title>cv::VideoCapture::VideoCapture (libopencv_videoio.so.4.2.0) (778 samples, 3.88%)</title><rect x="96.1098%" y="100" width="3.8753%" height="15" fill="rgb(235,124,12)"/><text x="96.3598%" y="110.50">cv::..</text></g><g><title>cv::VideoCapture::open (libopencv_videoio.so.4.2.0) (778 samples, 3.88%)</title><rect x="96.1098%" y="116" width="3.8753%" height="15" fill="rgb(224,169,11)"/><text x="96.3598%" y="126.50">cv::..</text></g><g><title>&lt;module&gt; (PV_SOX5_cv2.py:9) (959 samples, 4.78%)</title><rect x="95.2182%" y="68" width="4.7768%" height="15" fill="rgb(250,166,2)"/><text x="95.4682%" y="78.50">&lt;modul..</text></g><g><title>pyopencv_cv_VideoCapture_VideoCapture (cv2.cpython-38-x86_64-linux-gnu.so) (781 samples, 3.89%)</title><rect x="96.1048%" y="84" width="3.8902%" height="15" fill="rgb(242,216,29)"/><text x="96.3548%" y="94.50">pyop..</text></g><g><title>all (20,076 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="62.50"></text></g></svg></svg>