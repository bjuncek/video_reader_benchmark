<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>0x7fd75d95784b (libavformat-fed7ce93.so.58.47.100) (189 samples, 1.26%)</title><rect x="19.6014%" y="180" width="1.2597%" height="15" fill="rgb(227,0,7)"/><text x="19.8514%" y="190.50"></text></g><g><title>0x7fd75da0d9df (libavformat-fed7ce93.so.58.47.100) (235 samples, 1.57%)</title><rect x="19.3682%" y="164" width="1.5662%" height="15" fill="rgb(217,0,24)"/><text x="19.6182%" y="174.50"></text></g><g><title>0x7fd75da0e32b (libavformat-fed7ce93.so.58.47.100) (247 samples, 1.65%)</title><rect x="19.3482%" y="148" width="1.6462%" height="15" fill="rgb(221,193,54)"/><text x="19.5982%" y="158.50"></text></g><g><title>0x7fd75da0e564 (libavformat-fed7ce93.so.58.47.100) (283 samples, 1.89%)</title><rect x="21.0544%" y="148" width="1.8862%" height="15" fill="rgb(248,212,6)"/><text x="21.3044%" y="158.50">0..</text></g><g><title>av_opt_get_dict_val (libavutil-bedca4f8.so.56.55.100) (282 samples, 1.88%)</title><rect x="21.0611%" y="164" width="1.8795%" height="15" fill="rgb(208,68,35)"/><text x="21.3111%" y="174.50">a..</text></g><g><title>av_opt_find2 (libavutil-bedca4f8.so.56.55.100) (282 samples, 1.88%)</title><rect x="21.0611%" y="180" width="1.8795%" height="15" fill="rgb(232,128,0)"/><text x="21.3111%" y="190.50">a..</text></g><g><title>0x7fd7602ed2f8 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (601 samples, 4.01%)</title><rect x="19.3215%" y="116" width="4.0056%" height="15" fill="rgb(207,160,47)"/><text x="19.5715%" y="126.50">0x7f..</text></g><g><title>av_read_frame (libavformat-fed7ce93.so.58.47.100) (601 samples, 4.01%)</title><rect x="19.3215%" y="132" width="4.0056%" height="15" fill="rgb(228,23,34)"/><text x="19.5715%" y="142.50">av_r..</text></g><g><title>0x7fd75e0a7a83 (libavcodec-681a2255.so.58.93.100) (265 samples, 1.77%)</title><rect x="23.5737%" y="180" width="1.7662%" height="15" fill="rgb(218,30,26)"/><text x="23.8237%" y="190.50"></text></g><g><title>0x7fd75dd0e6d3 (libavcodec-681a2255.so.58.93.100) (321 samples, 2.14%)</title><rect x="23.5670%" y="164" width="2.1394%" height="15" fill="rgb(220,122,19)"/><text x="23.8170%" y="174.50">0..</text></g><g><title>0x7fd75dd0f4c3 (libavcodec-681a2255.so.58.93.100) (373 samples, 2.49%)</title><rect x="23.4604%" y="132" width="2.4860%" height="15" fill="rgb(250,228,42)"/><text x="23.7104%" y="142.50">0x..</text></g><g><title>avcodec_receive_frame (libavcodec-681a2255.so.58.93.100) (372 samples, 2.48%)</title><rect x="23.4671%" y="148" width="2.4793%" height="15" fill="rgb(240,193,28)"/><text x="23.7171%" y="158.50">av..</text></g><g><title>av_buffer_unref (libavutil-bedca4f8.so.56.55.100) (178 samples, 1.19%)</title><rect x="28.9723%" y="244" width="1.1864%" height="15" fill="rgb(216,20,37)"/><text x="29.2223%" y="254.50"></text></g><g><title>0x7fd75de19604 (libavcodec-681a2255.so.58.93.100) (313 samples, 2.09%)</title><rect x="28.1125%" y="212" width="2.0861%" height="15" fill="rgb(206,188,39)"/><text x="28.3625%" y="222.50">0..</text></g><g><title>av_frame_unref (libavutil-bedca4f8.so.56.55.100) (234 samples, 1.56%)</title><rect x="28.6390%" y="228" width="1.5596%" height="15" fill="rgb(217,207,13)"/><text x="28.8890%" y="238.50"></text></g><g><title>0x7fd75de2719b (libavcodec-681a2255.so.58.93.100) (745 samples, 4.97%)</title><rect x="27.5593%" y="196" width="4.9653%" height="15" fill="rgb(231,73,38)"/><text x="27.8093%" y="206.50">0x7fd7..</text></g><g><title>0x7fd75e1a7967 (libavcodec-681a2255.so.58.93.100) (304 samples, 2.03%)</title><rect x="32.8446%" y="228" width="2.0261%" height="15" fill="rgb(225,20,46)"/><text x="33.0946%" y="238.50">0..</text></g><g><title>av_frame_ref (libavutil-bedca4f8.so.56.55.100) (304 samples, 2.03%)</title><rect x="32.8446%" y="244" width="2.0261%" height="15" fill="rgb(210,31,41)"/><text x="33.0946%" y="254.50">a..</text></g><g><title>av_buffer_ref (libavutil-bedca4f8.so.56.55.100) (182 samples, 1.21%)</title><rect x="33.6577%" y="260" width="1.2130%" height="15" fill="rgb(221,200,47)"/><text x="33.9077%" y="270.50"></text></g><g><title>0x7fd75de196e0 (libavcodec-681a2255.so.58.93.100) (379 samples, 2.53%)</title><rect x="32.8046%" y="212" width="2.5260%" height="15" fill="rgb(226,26,5)"/><text x="33.0546%" y="222.50">0x..</text></g><g><title>0x7fd75de271b6 (libavcodec-681a2255.so.58.93.100) (799 samples, 5.33%)</title><rect x="32.7513%" y="196" width="5.3252%" height="15" fill="rgb(249,33,26)"/><text x="33.0013%" y="206.50">0x7fd75..</text></g><g><title>0x7fd75de2723d (libavcodec-681a2255.so.58.93.100) (156 samples, 1.04%)</title><rect x="39.0096%" y="196" width="1.0397%" height="15" fill="rgb(235,183,28)"/><text x="39.2596%" y="206.50"></text></g><g><title>0x7fd75e0a7a83 (libavcodec-681a2255.so.58.93.100) (2,236 samples, 14.90%)</title><rect x="26.3263%" y="180" width="14.9027%" height="15" fill="rgb(221,5,38)"/><text x="26.5763%" y="190.50">0x7fd75e0a7a83 (libavco..</text></g><g><title>0x7fd75e0a7ad7 (libavcodec-681a2255.so.58.93.100) (190 samples, 1.27%)</title><rect x="41.6556%" y="180" width="1.2663%" height="15" fill="rgb(247,18,42)"/><text x="41.9056%" y="190.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.27.so) (190 samples, 1.27%)</title><rect x="41.6556%" y="196" width="1.2663%" height="15" fill="rgb(241,131,45)"/><text x="41.9056%" y="206.50"></text></g><g><title>0x7fd75e0a7fab (libavcodec-681a2255.so.58.93.100) (471 samples, 3.14%)</title><rect x="43.1085%" y="180" width="3.1392%" height="15" fill="rgb(249,31,29)"/><text x="43.3585%" y="190.50">0x7..</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (471 samples, 3.14%)</title><rect x="43.1085%" y="196" width="3.1392%" height="15" fill="rgb(225,111,53)"/><text x="43.3585%" y="206.50">__p..</text></g><g><title>0x7fd75dd0e6d3 (libavcodec-681a2255.so.58.93.100) (3,015 samples, 20.09%)</title><rect x="26.1664%" y="164" width="20.0946%" height="15" fill="rgb(238,160,17)"/><text x="26.4164%" y="174.50">0x7fd75dd0e6d3 (libavcodec-681a2..</text></g><g><title>0x7fd75dd0f54b (libavcodec-681a2255.so.58.93.100) (3,062 samples, 20.41%)</title><rect x="25.9597%" y="132" width="20.4079%" height="15" fill="rgb(214,148,48)"/><text x="26.2097%" y="142.50">0x7fd75dd0f54b (libavcodec-681a2..</text></g><g><title>avcodec_send_packet (libavcodec-681a2255.so.58.93.100) (3,062 samples, 20.41%)</title><rect x="25.9597%" y="148" width="20.4079%" height="15" fill="rgb(232,36,49)"/><text x="26.2097%" y="158.50">avcodec_send_packet (libavcodec-..</text></g><g><title>0x7fd7602ed350 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (3,495 samples, 23.29%)</title><rect x="23.4471%" y="116" width="23.2938%" height="15" fill="rgb(209,103,24)"/><text x="23.6971%" y="126.50">0x7fd7602ed350 (cv2/cv2.cpython-37m-x..</text></g><g><title>0x7fd7602b800d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,131 samples, 27.53%)</title><rect x="19.2215%" y="84" width="27.5327%" height="15" fill="rgb(229,88,8)"/><text x="19.4715%" y="94.50">0x7fd7602b800d (cv2/cv2.cpython-37m-x86_64-l..</text></g><g><title>0x7fd7602b8302 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,130 samples, 27.53%)</title><rect x="19.2282%" y="100" width="27.5260%" height="15" fill="rgb(213,181,19)"/><text x="19.4782%" y="110.50">0x7fd7602b8302 (cv2/cv2.cpython-37m-x86_64-l..</text></g><g><title>0x7fd7637d7940 (libc-2.27.so) (158 samples, 1.05%)</title><rect x="48.1738%" y="292" width="1.0531%" height="15" fill="rgb(254,191,54)"/><text x="48.4238%" y="302.50"></text></g><g><title>0x7fd7637db7d8 (libc-2.27.so) (576 samples, 3.84%)</title><rect x="48.0805%" y="276" width="3.8390%" height="15" fill="rgb(241,83,37)"/><text x="48.3305%" y="286.50">0x7f..</text></g><g><title>0x7fd75f47be0e (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (706 samples, 4.71%)</title><rect x="47.2341%" y="180" width="4.7054%" height="15" fill="rgb(233,36,39)"/><text x="47.4841%" y="190.50">0x7fd..</text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (706 samples, 4.71%)</title><rect x="47.2341%" y="196" width="4.7054%" height="15" fill="rgb(226,3,54)"/><text x="47.4841%" y="206.50">PyArr..</text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (703 samples, 4.69%)</title><rect x="47.2541%" y="212" width="4.6854%" height="15" fill="rgb(245,192,40)"/><text x="47.5041%" y="222.50">PyArr..</text></g><g><title>npy_alloc_cache (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (687 samples, 4.58%)</title><rect x="47.3607%" y="228" width="4.5788%" height="15" fill="rgb(238,167,29)"/><text x="47.6107%" y="238.50">npy_a..</text></g><g><title>PyDataMem_NEW (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (686 samples, 4.57%)</title><rect x="47.3674%" y="244" width="4.5721%" height="15" fill="rgb(232,182,51)"/><text x="47.6174%" y="254.50">PyDat..</text></g><g><title>__libc_malloc (libc-2.27.so) (683 samples, 4.55%)</title><rect x="47.3874%" y="260" width="4.5521%" height="15" fill="rgb(231,60,39)"/><text x="47.6374%" y="270.50">__lib..</text></g><g><title>0x7fd75f709611 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (723 samples, 4.82%)</title><rect x="47.1541%" y="132" width="4.8187%" height="15" fill="rgb(208,69,12)"/><text x="47.4041%" y="142.50">0x7fd7..</text></g><g><title>0x7fd75f810bfb (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (723 samples, 4.82%)</title><rect x="47.1541%" y="148" width="4.8187%" height="15" fill="rgb(235,93,37)"/><text x="47.4041%" y="158.50">0x7fd7..</text></g><g><title>0x7fd75f7ba63d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (713 samples, 4.75%)</title><rect x="47.2207%" y="164" width="4.7521%" height="15" fill="rgb(213,116,39)"/><text x="47.4707%" y="174.50">0x7fd7..</text></g><g><title>0x7fd7602ebb9f (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (793 samples, 5.29%)</title><rect x="47.1408%" y="116" width="5.2853%" height="15" fill="rgb(222,207,29)"/><text x="47.3908%" y="126.50">0x7fd7..</text></g><g><title>0x7fd7602b97c8 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (848 samples, 5.65%)</title><rect x="46.7809%" y="100" width="5.6518%" height="15" fill="rgb(206,96,30)"/><text x="47.0309%" y="110.50">0x7fd76..</text></g><g><title>0x7fd7602b8020 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (850 samples, 5.67%)</title><rect x="46.7742%" y="84" width="5.6652%" height="15" fill="rgb(218,138,4)"/><text x="47.0242%" y="94.50">0x7fd76..</text></g><g><title>0x7fd75f5fb661 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,986 samples, 33.23%)</title><rect x="19.2149%" y="68" width="33.2311%" height="15" fill="rgb(250,191,14)"/><text x="19.4649%" y="78.50">0x7fd75f5fb661 (cv2/cv2.cpython-37m-x86_64-linux-gnu.s..</text></g><g><title>&lt;module&gt; (PV_SOX5_CV2.py:11) (8,521 samples, 56.79%)</title><rect x="0.1466%" y="52" width="56.7915%" height="15" fill="rgb(239,60,40)"/><text x="0.3966%" y="62.50">&lt;module&gt; (PV_SOX5_CV2.py:11)</text></g><g><title>npy_alloc_cache (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (278 samples, 1.85%)</title><rect x="57.6046%" y="196" width="1.8528%" height="15" fill="rgb(206,27,48)"/><text x="57.8546%" y="206.50">n..</text></g><g><title>PyDataMem_NEW (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (278 samples, 1.85%)</title><rect x="57.6046%" y="212" width="1.8528%" height="15" fill="rgb(225,35,8)"/><text x="57.8546%" y="222.50">P..</text></g><g><title>__libc_malloc (libc-2.27.so) (278 samples, 1.85%)</title><rect x="57.6046%" y="228" width="1.8528%" height="15" fill="rgb(250,213,24)"/><text x="57.8546%" y="238.50">_..</text></g><g><title>0x7fd7637dbff0 (libc-2.27.so) (264 samples, 1.76%)</title><rect x="57.6979%" y="244" width="1.7595%" height="15" fill="rgb(247,123,22)"/><text x="57.9479%" y="254.50"></text></g><g><title>0x7fd75f47be0e (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (294 samples, 1.96%)</title><rect x="57.5247%" y="148" width="1.9595%" height="15" fill="rgb(231,138,38)"/><text x="57.7747%" y="158.50">0..</text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (294 samples, 1.96%)</title><rect x="57.5247%" y="164" width="1.9595%" height="15" fill="rgb(231,145,46)"/><text x="57.7747%" y="174.50">P..</text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (290 samples, 1.93%)</title><rect x="57.5513%" y="180" width="1.9328%" height="15" fill="rgb(251,118,11)"/><text x="57.8013%" y="190.50">P..</text></g><g><title>0x7fd75faa5446 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (308 samples, 2.05%)</title><rect x="57.4447%" y="100" width="2.0528%" height="15" fill="rgb(217,147,25)"/><text x="57.6947%" y="110.50">0..</text></g><g><title>0x7fd75f80fc10 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (304 samples, 2.03%)</title><rect x="57.4713%" y="116" width="2.0261%" height="15" fill="rgb(247,81,37)"/><text x="57.7213%" y="126.50">0..</text></g><g><title>0x7fd75f7ba63d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (299 samples, 1.99%)</title><rect x="57.5047%" y="132" width="1.9928%" height="15" fill="rgb(209,12,38)"/><text x="57.7547%" y="142.50">0..</text></g><g><title>0x7fd76097d080 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (1,539 samples, 10.26%)</title><rect x="59.9040%" y="196" width="10.2573%" height="15" fill="rgb(227,1,9)"/><text x="60.1540%" y="206.50">0x7fd76097d080 ..</text></g><g><title>0x7fd76097d09d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (1,457 samples, 9.71%)</title><rect x="70.2679%" y="196" width="9.7107%" height="15" fill="rgb(248,47,43)"/><text x="70.5179%" y="206.50">0x7fd76097d09d..</text></g><g><title>0x7fd76097d0a4 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (1,549 samples, 10.32%)</title><rect x="79.9787%" y="196" width="10.3239%" height="15" fill="rgb(221,10,30)"/><text x="80.2287%" y="206.50">0x7fd76097d0a4 ..</text></g><g><title>0x7fd75f86ff28 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,637 samples, 30.91%)</title><rect x="59.5641%" y="148" width="30.9051%" height="15" fill="rgb(210,229,1)"/><text x="59.8141%" y="158.50">0x7fd75f86ff28 (cv2/cv2.cpython-37m-x86_64-linux-g..</text></g><g><title>0x7fd75fa90339 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,637 samples, 30.91%)</title><rect x="59.5641%" y="164" width="30.9051%" height="15" fill="rgb(222,148,37)"/><text x="59.8141%" y="174.50">0x7fd75fa90339 (cv2/cv2.cpython-37m-x86_64-linux-g..</text></g><g><title>0x7fd76097b187 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,634 samples, 30.89%)</title><rect x="59.5841%" y="180" width="30.8851%" height="15" fill="rgb(234,67,33)"/><text x="59.8341%" y="190.50">0x7fd76097b187 (cv2/cv2.cpython-37m-x86_64-linux-g..</text></g><g><title>0x7fd75faa45f7 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,641 samples, 30.93%)</title><rect x="59.5508%" y="132" width="30.9318%" height="15" fill="rgb(247,98,35)"/><text x="59.8008%" y="142.50">0x7fd75faa45f7 (cv2/cv2.cpython-37m-x86_64-linux-g..</text></g><g><title>0x7fd75faa55f1 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,652 samples, 31.01%)</title><rect x="59.4975%" y="100" width="31.0051%" height="15" fill="rgb(247,138,52)"/><text x="59.7475%" y="110.50">0x7fd75faa55f1 (cv2/cv2.cpython-37m-x86_64-linux-g..</text></g><g><title>0x7fd75faa4f7a (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,647 samples, 30.97%)</title><rect x="59.5308%" y="116" width="30.9717%" height="15" fill="rgb(213,79,30)"/><text x="59.7808%" y="126.50">0x7fd75faa4f7a (cv2/cv2.cpython-37m-x86_64-linux-g..</text></g><g><title>0x7fd75f5af53c (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,974 samples, 33.15%)</title><rect x="57.3914%" y="68" width="33.1512%" height="15" fill="rgb(246,177,23)"/><text x="57.6414%" y="78.50">0x7fd75f5af53c (cv2/cv2.cpython-37m-x86_64-linux-gnu.s..</text></g><g><title>0x7fd75fa6118f (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (4,967 samples, 33.10%)</title><rect x="57.4380%" y="84" width="33.1045%" height="15" fill="rgb(230,62,27)"/><text x="57.6880%" y="94.50">0x7fd75fa6118f (cv2/cv2.cpython-37m-x86_64-linux-gnu.s..</text></g><g><title>PyDataMem_FREE (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (475 samples, 3.17%)</title><rect x="90.6625%" y="84" width="3.1658%" height="15" fill="rgb(216,154,8)"/><text x="90.9125%" y="94.50">PyD..</text></g><g><title>cfree (libc-2.27.so) (471 samples, 3.14%)</title><rect x="90.6891%" y="100" width="3.1392%" height="15" fill="rgb(244,35,45)"/><text x="90.9391%" y="110.50">cfr..</text></g><g><title>0x7fd7637d8378 (libc-2.27.so) (463 samples, 3.09%)</title><rect x="90.7425%" y="116" width="3.0858%" height="15" fill="rgb(251,115,12)"/><text x="90.9925%" y="126.50">0x7..</text></g><g><title>__default_morecore (libc-2.27.so) (463 samples, 3.09%)</title><rect x="90.7425%" y="132" width="3.0858%" height="15" fill="rgb(240,54,50)"/><text x="90.9925%" y="142.50">__d..</text></g><g><title>sbrk (libc-2.27.so) (463 samples, 3.09%)</title><rect x="90.7425%" y="148" width="3.0858%" height="15" fill="rgb(233,84,52)"/><text x="90.9925%" y="158.50">sbr..</text></g><g><title>brk (libc-2.27.so) (463 samples, 3.09%)</title><rect x="90.7425%" y="164" width="3.0858%" height="15" fill="rgb(207,117,47)"/><text x="90.9925%" y="174.50">brk..</text></g><g><title>&lt;module&gt; (PV_SOX5_CV2.py:13) (5,549 samples, 36.98%)</title><rect x="56.9715%" y="52" width="36.9835%" height="15" fill="rgb(249,43,39)"/><text x="57.2215%" y="62.50">&lt;module&gt; (PV_SOX5_CV2.py:13)</text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (495 samples, 3.30%)</title><rect x="90.6558%" y="68" width="3.2991%" height="15" fill="rgb(209,38,44)"/><text x="90.9058%" y="78.50">arr..</text></g><g><title>0x7fd75da0870b (libavformat-fed7ce93.so.58.47.100) (159 samples, 1.06%)</title><rect x="96.7409%" y="180" width="1.0597%" height="15" fill="rgb(236,212,23)"/><text x="96.9909%" y="190.50"></text></g><g><title>avcodec_send_packet (libavcodec-681a2255.so.58.93.100) (159 samples, 1.06%)</title><rect x="96.7409%" y="196" width="1.0597%" height="15" fill="rgb(242,79,21)"/><text x="96.9909%" y="206.50"></text></g><g><title>0x7fd75dd0e3f0 (libavcodec-681a2255.so.58.93.100) (159 samples, 1.06%)</title><rect x="96.7409%" y="212" width="1.0597%" height="15" fill="rgb(211,96,35)"/><text x="96.9909%" y="222.50"></text></g><g><title>0x7fd7602ec780 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (237 samples, 1.58%)</title><rect x="96.7009%" y="148" width="1.5796%" height="15" fill="rgb(253,215,40)"/><text x="96.9509%" y="158.50"></text></g><g><title>avformat_find_stream_info (libavformat-fed7ce93.so.58.47.100) (237 samples, 1.58%)</title><rect x="96.7009%" y="164" width="1.5796%" height="15" fill="rgb(211,81,21)"/><text x="96.9509%" y="174.50"></text></g><g><title>0x7fd75f6aaf2f (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (572 samples, 3.81%)</title><rect x="96.1744%" y="68" width="3.8123%" height="15" fill="rgb(208,190,38)"/><text x="96.4244%" y="78.50">0x7f..</text></g><g><title>0x7fd7602bb891 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (572 samples, 3.81%)</title><rect x="96.1744%" y="84" width="3.8123%" height="15" fill="rgb(235,213,38)"/><text x="96.4244%" y="94.50">0x7f..</text></g><g><title>0x7fd7602ba0ed (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (570 samples, 3.80%)</title><rect x="96.1877%" y="100" width="3.7990%" height="15" fill="rgb(237,122,38)"/><text x="96.4377%" y="110.50">0x7f..</text></g><g><title>0x7fd7602d3643 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (570 samples, 3.80%)</title><rect x="96.1877%" y="116" width="3.7990%" height="15" fill="rgb(244,218,35)"/><text x="96.4377%" y="126.50">0x7f..</text></g><g><title>0x7fd7602f0457 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (570 samples, 3.80%)</title><rect x="96.1877%" y="132" width="3.7990%" height="15" fill="rgb(240,68,47)"/><text x="96.4377%" y="142.50">0x7f..</text></g><g><title>0x7fd7602ec964 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (256 samples, 1.71%)</title><rect x="98.2805%" y="148" width="1.7062%" height="15" fill="rgb(210,16,53)"/><text x="98.5305%" y="158.50"></text></g><g><title>avcodec_open2 (libavcodec-681a2255.so.58.93.100) (256 samples, 1.71%)</title><rect x="98.2805%" y="164" width="1.7062%" height="15" fill="rgb(235,124,12)"/><text x="98.5305%" y="174.50"></text></g><g><title>all (15,004 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (PV_SOX5_CV2.py:9) (721 samples, 4.81%)</title><rect x="95.1946%" y="52" width="4.8054%" height="15" fill="rgb(250,166,2)"/><text x="95.4446%" y="62.50">&lt;modul..</text></g></svg></svg>