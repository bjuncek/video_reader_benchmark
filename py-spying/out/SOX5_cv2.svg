<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>icv_l9_ownsCopy_8u_E9 (libopencv_core.so.4.4.0) (1,007 samples, 5.20%)</title><rect x="18.9118%" y="68" width="5.2033%" height="15" fill="rgb(227,0,7)"/><text x="19.1618%" y="78.50">icv_l9..</text></g><g><title>av_buffer_unref (libavutil.so.56.51.100) (275 samples, 1.42%)</title><rect x="27.2723%" y="276" width="1.4210%" height="15" fill="rgb(217,0,24)"/><text x="27.5223%" y="286.50"></text></g><g><title>0x7fd740639fb5 (libavcodec.so.58.91.100) (461 samples, 2.38%)</title><rect x="26.3422%" y="244" width="2.3821%" height="15" fill="rgb(221,193,54)"/><text x="26.5922%" y="254.50">0x..</text></g><g><title>av_frame_unref (libavutil.so.56.51.100) (349 samples, 1.80%)</title><rect x="26.9209%" y="260" width="1.8033%" height="15" fill="rgb(248,212,6)"/><text x="27.1709%" y="270.50">a..</text></g><g><title>0x7fd740649e5c (libavcodec.so.58.91.100) (982 samples, 5.07%)</title><rect x="25.8720%" y="228" width="5.0741%" height="15" fill="rgb(208,68,35)"/><text x="26.1220%" y="238.50">0x7fd7..</text></g><g><title>av_buffer_ref (libavutil.so.56.51.100) (272 samples, 1.41%)</title><rect x="31.3750%" y="292" width="1.4055%" height="15" fill="rgb(232,128,0)"/><text x="31.6250%" y="302.50"></text></g><g><title>0x7fd7409c09d8 (libavcodec.so.58.91.100) (315 samples, 1.63%)</title><rect x="31.1631%" y="260" width="1.6277%" height="15" fill="rgb(207,160,47)"/><text x="31.4131%" y="270.50"></text></g><g><title>av_frame_ref (libavutil.so.56.51.100) (315 samples, 1.63%)</title><rect x="31.1631%" y="276" width="1.6277%" height="15" fill="rgb(228,23,34)"/><text x="31.4131%" y="286.50"></text></g><g><title>0x7fd74063a085 (libavcodec.so.58.91.100) (405 samples, 2.09%)</title><rect x="31.1321%" y="244" width="2.0927%" height="15" fill="rgb(218,30,26)"/><text x="31.3821%" y="254.50">0..</text></g><g><title>0x7fd740649e78 (libavcodec.so.58.91.100) (821 samples, 4.24%)</title><rect x="31.1115%" y="228" width="4.2422%" height="15" fill="rgb(220,122,19)"/><text x="31.3615%" y="238.50">0x7fd..</text></g><g><title>0x7fd7408c4bd9 (libavcodec.so.58.91.100) (2,525 samples, 13.05%)</title><rect x="24.9677%" y="212" width="13.0471%" height="15" fill="rgb(250,228,42)"/><text x="25.2177%" y="222.50">0x7fd7408c4bd9 (liba..</text></g><g><title>0x7fd7408c4c2c (libavcodec.so.58.91.100) (200 samples, 1.03%)</title><rect x="38.4333%" y="212" width="1.0334%" height="15" fill="rgb(240,193,28)"/><text x="38.6833%" y="222.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.27.so) (200 samples, 1.03%)</title><rect x="38.4333%" y="228" width="1.0334%" height="15" fill="rgb(216,20,37)"/><text x="38.6833%" y="238.50"></text></g><g><title>0x7fd7408c50f4 (libavcodec.so.58.91.100) (615 samples, 3.18%)</title><rect x="39.9835%" y="212" width="3.1778%" height="15" fill="rgb(206,188,39)"/><text x="40.2335%" y="222.50">0x7..</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (615 samples, 3.18%)</title><rect x="39.9835%" y="228" width="3.1778%" height="15" fill="rgb(217,207,13)"/><text x="40.2335%" y="238.50">__p..</text></g><g><title>0x7fd740521916 (libavcodec.so.58.91.100) (3,556 samples, 18.37%)</title><rect x="24.8179%" y="196" width="18.3744%" height="15" fill="rgb(231,73,38)"/><text x="25.0679%" y="206.50">0x7fd740521916 (libavcodec.so..</text></g><g><title>0x7fd7405229de (libavcodec.so.58.91.100) (3,637 samples, 18.79%)</title><rect x="24.6060%" y="164" width="18.7930%" height="15" fill="rgb(225,20,46)"/><text x="24.8560%" y="174.50">0x7fd7405229de (libavcodec.so..</text></g><g><title>avcodec_send_packet (libavcodec.so.58.91.100) (3,637 samples, 18.79%)</title><rect x="24.6060%" y="180" width="18.7930%" height="15" fill="rgb(210,31,41)"/><text x="24.8560%" y="190.50">avcodec_send_packet (libavcod..</text></g><g><title>0x7fd7408c4bd9 (libavcodec.so.58.91.100) (289 samples, 1.49%)</title><rect x="43.5126%" y="212" width="1.4933%" height="15" fill="rgb(221,200,47)"/><text x="43.7626%" y="222.50"></text></g><g><title>0x7fd740521916 (libavcodec.so.58.91.100) (363 samples, 1.88%)</title><rect x="43.4713%" y="196" width="1.8757%" height="15" fill="rgb(226,26,5)"/><text x="43.7213%" y="206.50">0..</text></g><g><title>0x7fd740522a0c (libavcodec.so.58.91.100) (412 samples, 2.13%)</title><rect x="43.3990%" y="164" width="2.1289%" height="15" fill="rgb(249,33,26)"/><text x="43.6490%" y="174.50">0..</text></g><g><title>avcodec_receive_frame (libavcodec.so.58.91.100) (411 samples, 2.12%)</title><rect x="43.4041%" y="180" width="2.1237%" height="15" fill="rgb(235,183,28)"/><text x="43.6541%" y="190.50">a..</text></g><g><title>0x7fd74016ac39 (libavformat.so.58.45.100) (204 samples, 1.05%)</title><rect x="46.3546%" y="212" width="1.0541%" height="15" fill="rgb(221,5,38)"/><text x="46.6046%" y="222.50"></text></g><g><title>0x7fd74022ddea (libavformat.so.58.45.100) (256 samples, 1.32%)</title><rect x="46.1272%" y="196" width="1.3228%" height="15" fill="rgb(247,18,42)"/><text x="46.3772%" y="206.50"></text></g><g><title>0x7fd74022eb24 (libavformat.so.58.45.100) (262 samples, 1.35%)</title><rect x="46.1220%" y="180" width="1.3538%" height="15" fill="rgb(241,131,45)"/><text x="46.3720%" y="190.50"></text></g><g><title>0x7fd74022f196 (libavformat.so.58.45.100) (321 samples, 1.66%)</title><rect x="47.7600%" y="180" width="1.6587%" height="15" fill="rgb(249,31,29)"/><text x="48.0100%" y="190.50"></text></g><g><title>av_opt_get_dict_val (libavutil.so.56.51.100) (321 samples, 1.66%)</title><rect x="47.7600%" y="196" width="1.6587%" height="15" fill="rgb(225,111,53)"/><text x="48.0100%" y="206.50"></text></g><g><title>av_opt_find2 (libavutil.so.56.51.100) (317 samples, 1.64%)</title><rect x="47.7807%" y="212" width="1.6380%" height="15" fill="rgb(238,160,17)"/><text x="48.0307%" y="222.50"></text></g><g><title>cv::VideoCapture::grab (libopencv_videoio.so.4.4.0) (4,843 samples, 25.02%)</title><rect x="24.4510%" y="100" width="25.0245%" height="15" fill="rgb(214,148,48)"/><text x="24.7010%" y="110.50">cv::VideoCapture::grab (libopencv_videoi..</text></g><g><title>cv::(anonymous namespace)::CvCapture_FFMPEG_proxy::grabFrame (libopencv_videoio.so.4.4.0) (4,841 samples, 25.01%)</title><rect x="24.4613%" y="116" width="25.0142%" height="15" fill="rgb(232,36,49)"/><text x="24.7113%" y="126.50">cv::(anonymous namespace)::CvCapture_FFM..</text></g><g><title>cvGrabFrame_FFMPEG (libopencv_videoio.so.4.4.0) (4,841 samples, 25.01%)</title><rect x="24.4613%" y="132" width="25.0142%" height="15" fill="rgb(209,103,24)"/><text x="24.7113%" y="142.50">cvGrabFrame_FFMPEG (libopencv_videoio.so..</text></g><g><title>CvCapture_FFMPEG::grabFrame (libopencv_videoio.so.4.4.0) (4,839 samples, 25.00%)</title><rect x="24.4717%" y="148" width="25.0039%" height="15" fill="rgb(229,88,8)"/><text x="24.7217%" y="158.50">CvCapture_FFMPEG::grabFrame (libopencv_v..</text></g><g><title>av_read_frame (libavformat.so.58.45.100) (657 samples, 3.39%)</title><rect x="46.0807%" y="164" width="3.3948%" height="15" fill="rgb(213,181,19)"/><text x="46.3307%" y="174.50">av_..</text></g><g><title>0x7fd7486b67d8 (libc-2.27.so) (686 samples, 3.54%)</title><rect x="50.3695%" y="276" width="3.5447%" height="15" fill="rgb(254,191,54)"/><text x="50.6195%" y="286.50">0x7f..</text></g><g><title>npy_alloc_cache (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (807 samples, 4.17%)</title><rect x="49.7907%" y="228" width="4.1699%" height="15" fill="rgb(241,83,37)"/><text x="50.0407%" y="238.50">npy_a..</text></g><g><title>PyDataMem_NEW (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (806 samples, 4.16%)</title><rect x="49.7959%" y="244" width="4.1647%" height="15" fill="rgb(233,36,39)"/><text x="50.0459%" y="254.50">PyDat..</text></g><g><title>__libc_malloc (libc-2.27.so) (805 samples, 4.16%)</title><rect x="49.8011%" y="260" width="4.1596%" height="15" fill="rgb(226,3,54)"/><text x="50.0511%" y="270.50">__lib..</text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (835 samples, 4.31%)</title><rect x="49.6564%" y="196" width="4.3146%" height="15" fill="rgb(245,192,40)"/><text x="49.9064%" y="206.50">PyArr..</text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (829 samples, 4.28%)</title><rect x="49.6874%" y="212" width="4.2836%" height="15" fill="rgb(238,167,29)"/><text x="49.9374%" y="222.50">PyArr..</text></g><g><title>NumpyAllocator::allocate (cv2.cpython-38-x86_64-linux-gnu.so) (863 samples, 4.46%)</title><rect x="49.6099%" y="180" width="4.4593%" height="15" fill="rgb(232,182,51)"/><text x="49.8599%" y="190.50">Numpy..</text></g><g><title>cv::Mat::create (libopencv_core.so.4.4.0) (878 samples, 4.54%)</title><rect x="49.5789%" y="164" width="4.5368%" height="15" fill="rgb(231,60,39)"/><text x="49.8289%" y="174.50">cv::M..</text></g><g><title>cv::_OutputArray::create (libopencv_core.so.4.4.0) (887 samples, 4.58%)</title><rect x="49.5634%" y="148" width="4.5833%" height="15" fill="rgb(208,69,12)"/><text x="49.8134%" y="158.50">cv::_..</text></g><g><title>cv::Mat::copyTo (libopencv_core.so.4.4.0) (980 samples, 5.06%)</title><rect x="49.5065%" y="132" width="5.0638%" height="15" fill="rgb(235,93,37)"/><text x="49.7565%" y="142.50">cv::Ma..</text></g><g><title>cv::(anonymous namespace)::CvCapture_FFMPEG_proxy::retrieveFrame (libopencv_videoio.so.4.4.0) (1,062 samples, 5.49%)</title><rect x="49.5014%" y="116" width="5.4875%" height="15" fill="rgb(213,116,39)"/><text x="49.7514%" y="126.50">cv::(an..</text></g><g><title>cv::VideoCapture::retrieve (libopencv_videoio.so.4.4.0) (1,070 samples, 5.53%)</title><rect x="49.4755%" y="100" width="5.5289%" height="15" fill="rgb(222,207,29)"/><text x="49.7255%" y="110.50">cv::Vid..</text></g><g><title>cv::VideoCapture::read (libopencv_videoio.so.4.4.0) (5,931 samples, 30.65%)</title><rect x="24.3993%" y="84" width="30.6464%" height="15" fill="rgb(206,96,30)"/><text x="24.6493%" y="94.50">cv::VideoCapture::read (libopencv_videoio.so.4.4...</text></g><g><title>&lt;module&gt; (PV_SOX5_CV2.py:11) (10,621 samples, 54.88%)</title><rect x="0.1705%" y="52" width="54.8804%" height="15" fill="rgb(218,138,4)"/><text x="0.4205%" y="62.50">&lt;module&gt; (PV_SOX5_CV2.py:11)</text></g><g><title>pyopencv_cv_VideoCapture_read (cv2.cpython-38-x86_64-linux-gnu.so) (5,987 samples, 30.94%)</title><rect x="24.1151%" y="68" width="30.9358%" height="15" fill="rgb(250,191,14)"/><text x="24.3651%" y="78.50">pyopencv_cv_VideoCapture_read (cv2.cpython-38-x86_..</text></g><g><title>PyDataMem_FREE (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (525 samples, 2.71%)</title><rect x="55.3764%" y="84" width="2.7128%" height="15" fill="rgb(239,60,40)"/><text x="55.6264%" y="94.50">Py..</text></g><g><title>cfree (libc-2.27.so) (524 samples, 2.71%)</title><rect x="55.3816%" y="100" width="2.7076%" height="15" fill="rgb(206,27,48)"/><text x="55.6316%" y="110.50">cf..</text></g><g><title>0x7fd7486b3378 (libc-2.27.so) (524 samples, 2.71%)</title><rect x="55.3816%" y="116" width="2.7076%" height="15" fill="rgb(225,35,8)"/><text x="55.6316%" y="126.50">0x..</text></g><g><title>__default_morecore (libc-2.27.so) (524 samples, 2.71%)</title><rect x="55.3816%" y="132" width="2.7076%" height="15" fill="rgb(250,213,24)"/><text x="55.6316%" y="142.50">__..</text></g><g><title>sbrk (libc-2.27.so) (524 samples, 2.71%)</title><rect x="55.3816%" y="148" width="2.7076%" height="15" fill="rgb(247,123,22)"/><text x="55.6316%" y="158.50">sb..</text></g><g><title>brk (libc-2.27.so) (524 samples, 2.71%)</title><rect x="55.3816%" y="164" width="2.7076%" height="15" fill="rgb(231,138,38)"/><text x="55.6316%" y="174.50">br..</text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (545 samples, 2.82%)</title><rect x="55.3403%" y="68" width="2.8161%" height="15" fill="rgb(231,145,46)"/><text x="55.5903%" y="78.50">ar..</text></g><g><title>0x7fd7486b6ff0 (libc-2.27.so) (320 samples, 1.65%)</title><rect x="58.6886%" y="244" width="1.6535%" height="15" fill="rgb(251,118,11)"/><text x="58.9386%" y="254.50"></text></g><g><title>npy_alloc_cache (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (348 samples, 1.80%)</title><rect x="58.5491%" y="196" width="1.7982%" height="15" fill="rgb(217,147,25)"/><text x="58.7991%" y="206.50">n..</text></g><g><title>PyDataMem_NEW (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (348 samples, 1.80%)</title><rect x="58.5491%" y="212" width="1.7982%" height="15" fill="rgb(247,81,37)"/><text x="58.7991%" y="222.50">P..</text></g><g><title>__libc_malloc (libc-2.27.so) (348 samples, 1.80%)</title><rect x="58.5491%" y="228" width="1.7982%" height="15" fill="rgb(209,12,38)"/><text x="58.7991%" y="238.50">_..</text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (363 samples, 1.88%)</title><rect x="58.5077%" y="164" width="1.8757%" height="15" fill="rgb(227,1,9)"/><text x="58.7577%" y="174.50">P..</text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (362 samples, 1.87%)</title><rect x="58.5129%" y="180" width="1.8705%" height="15" fill="rgb(248,47,43)"/><text x="58.7629%" y="190.50">P..</text></g><g><title>NumpyAllocator::allocate (cv2.cpython-38-x86_64-linux-gnu.so) (370 samples, 1.91%)</title><rect x="58.4922%" y="148" width="1.9118%" height="15" fill="rgb(221,10,30)"/><text x="58.7422%" y="158.50">N..</text></g><g><title>cv::Mat::create (libopencv_core.so.4.4.0) (375 samples, 1.94%)</title><rect x="58.4716%" y="132" width="1.9377%" height="15" fill="rgb(210,229,1)"/><text x="58.7216%" y="142.50">c..</text></g><g><title>cv::_OutputArray::create (libopencv_core.so.4.4.0) (377 samples, 1.95%)</title><rect x="58.4664%" y="116" width="1.9480%" height="15" fill="rgb(222,148,37)"/><text x="58.7164%" y="126.50">c..</text></g><g><title>icv_l9_ippiSwapChannels_8u_C3R (libopencv_imgproc.so.4.4.0) (6,564 samples, 33.92%)</title><rect x="60.5022%" y="180" width="33.9172%" height="15" fill="rgb(234,67,33)"/><text x="60.7522%" y="190.50">icv_l9_ippiSwapChannels_8u_C3R (libopencv_imgproc.so.4...</text></g><g><title>icv_l9_owniSwapChannels_8u_C3R (libopencv_imgproc.so.4.4.0) (6,563 samples, 33.91%)</title><rect x="60.5074%" y="196" width="33.9121%" height="15" fill="rgb(247,98,35)"/><text x="60.7574%" y="206.50">icv_l9_owniSwapChannels_8u_C3R (libopencv_imgproc.so.4...</text></g><g><title>cv::CvtColorIPPLoop_Invoker&lt;cv::IPPReorderFunctor&gt;::operator() (libopencv_imgproc.so.4.4.0) (6,571 samples, 33.95%)</title><rect x="60.4919%" y="164" width="33.9534%" height="15" fill="rgb(247,138,52)"/><text x="60.7419%" y="174.50">cv::CvtColorIPPLoop_Invoker&lt;cv::IPPReorderFunctor&gt;::ope..</text></g><g><title>cv::CvtColorIPPLoopCopy&lt;cv::IPPReorderFunctor&gt; (libopencv_imgproc.so.4.4.0) (6,583 samples, 34.02%)</title><rect x="60.4351%" y="132" width="34.0154%" height="15" fill="rgb(213,79,30)"/><text x="60.6851%" y="142.50">cv::CvtColorIPPLoopCopy&lt;cv::IPPReorderFunctor&gt; (libopen..</text></g><g><title>cv::parallel_for_ (libopencv_core.so.4.4.0) (6,577 samples, 33.98%)</title><rect x="60.4661%" y="148" width="33.9844%" height="15" fill="rgb(246,177,23)"/><text x="60.7161%" y="158.50">cv::parallel_for_ (libopencv_core.so.4.4.0)</text></g><g><title>cv::cvtColorBGR2BGR (libopencv_imgproc.so.4.4.0) (6,982 samples, 36.08%)</title><rect x="58.4147%" y="100" width="36.0771%" height="15" fill="rgb(230,62,27)"/><text x="58.6647%" y="110.50">cv::cvtColorBGR2BGR (libopencv_imgproc.so.4.4.0)</text></g><g><title>cv::hal::cvtBGRtoBGR (libopencv_imgproc.so.4.4.0) (6,595 samples, 34.08%)</title><rect x="60.4144%" y="116" width="34.0774%" height="15" fill="rgb(216,154,8)"/><text x="60.6644%" y="126.50">cv::hal::cvtBGRtoBGR (libopencv_imgproc.so.4.4.0)</text></g><g><title>cv::cvtColor (libopencv_imgproc.so.4.4.0) (6,997 samples, 36.15%)</title><rect x="58.3630%" y="84" width="36.1546%" height="15" fill="rgb(244,35,45)"/><text x="58.6130%" y="94.50">cv::cvtColor (libopencv_imgproc.so.4.4.0)</text></g><g><title>&lt;module&gt; (PV_SOX5_CV2.py:13) (7,672 samples, 39.64%)</title><rect x="55.0922%" y="52" width="39.6424%" height="15" fill="rgb(251,115,12)"/><text x="55.3422%" y="62.50">&lt;module&gt; (PV_SOX5_CV2.py:13)</text></g><g><title>pyopencv_cv_cvtColor (cv2.cpython-38-x86_64-linux-gnu.so) (7,079 samples, 36.58%)</title><rect x="58.1564%" y="68" width="36.5783%" height="15" fill="rgb(240,54,50)"/><text x="58.4064%" y="78.50">pyopencv_cv_cvtColor (cv2.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>avcodec_open2 (libavcodec.so.58.91.100) (300 samples, 1.55%)</title><rect x="96.3262%" y="180" width="1.5501%" height="15" fill="rgb(233,84,52)"/><text x="96.5762%" y="190.50"></text></g><g><title>0x7fd74022865c (libavformat.so.58.45.100) (224 samples, 1.16%)</title><rect x="97.9486%" y="196" width="1.1574%" height="15" fill="rgb(207,117,47)"/><text x="98.1986%" y="206.50"></text></g><g><title>avcodec_send_packet (libavcodec.so.58.91.100) (224 samples, 1.16%)</title><rect x="97.9486%" y="212" width="1.1574%" height="15" fill="rgb(249,43,39)"/><text x="98.1986%" y="222.50"></text></g><g><title>0x7fd740521ae7 (libavcodec.so.58.91.100) (224 samples, 1.16%)</title><rect x="97.9486%" y="228" width="1.1574%" height="15" fill="rgb(209,38,44)"/><text x="98.1986%" y="238.50"></text></g><g><title>0x7fd740651120 (libavcodec.so.58.91.100) (196 samples, 1.01%)</title><rect x="98.0933%" y="244" width="1.0128%" height="15" fill="rgb(236,212,23)"/><text x="98.3433%" y="254.50"></text></g><g><title>0x7fd74064af51 (libavcodec.so.58.91.100) (195 samples, 1.01%)</title><rect x="98.0985%" y="260" width="1.0076%" height="15" fill="rgb(242,79,21)"/><text x="98.3485%" y="270.50"></text></g><g><title>avformat_find_stream_info (libavformat.so.58.45.100) (322 samples, 1.66%)</title><rect x="97.8815%" y="180" width="1.6638%" height="15" fill="rgb(211,96,35)"/><text x="98.1315%" y="190.50"></text></g><g><title>&lt;module&gt; (PV_SOX5_CV2.py:9) (931 samples, 4.81%)</title><rect x="95.1739%" y="52" width="4.8106%" height="15" fill="rgb(253,215,40)"/><text x="95.4239%" y="62.50">&lt;modul..</text></g><g><title>pyopencv_cv_VideoCapture_VideoCapture (cv2.cpython-38-x86_64-linux-gnu.so) (718 samples, 3.71%)</title><rect x="96.2745%" y="68" width="3.7100%" height="15" fill="rgb(211,81,21)"/><text x="96.5245%" y="78.50">pyop..</text></g><g><title>cv::VideoCapture::VideoCapture (libopencv_videoio.so.4.4.0) (717 samples, 3.70%)</title><rect x="96.2796%" y="84" width="3.7049%" height="15" fill="rgb(208,190,38)"/><text x="96.5296%" y="94.50">cv::..</text></g><g><title>cv::VideoCapture::open (libopencv_videoio.so.4.4.0) (716 samples, 3.70%)</title><rect x="96.2848%" y="100" width="3.6997%" height="15" fill="rgb(235,213,38)"/><text x="96.5348%" y="110.50">cv::..</text></g><g><title>cv::StaticBackend::createCapture (libopencv_videoio.so.4.4.0) (715 samples, 3.69%)</title><rect x="96.2900%" y="116" width="3.6945%" height="15" fill="rgb(237,122,38)"/><text x="96.5400%" y="126.50">cv::..</text></g><g><title>cv::cvCreateFileCapture_FFMPEG_proxy (libopencv_videoio.so.4.4.0) (715 samples, 3.69%)</title><rect x="96.2900%" y="132" width="3.6945%" height="15" fill="rgb(244,218,35)"/><text x="96.5400%" y="142.50">cv::..</text></g><g><title>cvCreateFileCapture_FFMPEG (libopencv_videoio.so.4.4.0) (715 samples, 3.69%)</title><rect x="96.2900%" y="148" width="3.6945%" height="15" fill="rgb(240,68,47)"/><text x="96.5400%" y="158.50">cvCr..</text></g><g><title>CvCapture_FFMPEG::open (libopencv_videoio.so.4.4.0) (715 samples, 3.69%)</title><rect x="96.2900%" y="164" width="3.6945%" height="15" fill="rgb(210,16,53)"/><text x="96.5400%" y="174.50">CvCa..</text></g><g><title>all (19,353 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>