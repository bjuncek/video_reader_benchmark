<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>0x7fc80c6c6c07 (libavcodec-681a2255.so.58.93.100) (92 samples, 1.06%)</title><rect x="0.1272%" y="68" width="1.0642%" height="15" fill="rgb(227,0,7)"/><text x="0.3772%" y="78.50"></text></g><g><title>0x7fc80e90a780 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (133 samples, 1.54%)</title><rect x="1.9433%" y="148" width="1.5385%" height="15" fill="rgb(217,0,24)"/><text x="2.1933%" y="158.50"></text></g><g><title>avformat_find_stream_info (libavformat-fed7ce93.so.58.47.100) (133 samples, 1.54%)</title><rect x="1.9433%" y="164" width="1.5385%" height="15" fill="rgb(221,193,54)"/><text x="2.1933%" y="174.50"></text></g><g><title>0x7fc80c294772 (libavcodec-681a2255.so.58.93.100) (119 samples, 1.38%)</title><rect x="4.1643%" y="212" width="1.3765%" height="15" fill="rgb(248,212,6)"/><text x="4.4143%" y="222.50"></text></g><g><title>0x7fc80c19b476 (libavcodec-681a2255.so.58.93.100) (139 samples, 1.61%)</title><rect x="3.9445%" y="196" width="1.6079%" height="15" fill="rgb(208,68,35)"/><text x="4.1945%" y="206.50"></text></g><g><title>0x7fc80c6c6bcc (libavcodec-681a2255.so.58.93.100) (190 samples, 2.20%)</title><rect x="3.5628%" y="180" width="2.1978%" height="15" fill="rgb(232,128,0)"/><text x="3.8128%" y="190.50">0..</text></g><g><title>0x7fc80e90a964 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (262 samples, 3.03%)</title><rect x="3.4818%" y="148" width="3.0307%" height="15" fill="rgb(207,160,47)"/><text x="3.7318%" y="158.50">0x7..</text></g><g><title>avcodec_open2 (libavcodec-681a2255.so.58.93.100) (262 samples, 3.03%)</title><rect x="3.4818%" y="164" width="3.0307%" height="15" fill="rgb(228,23,34)"/><text x="3.7318%" y="174.50">avc..</text></g><g><title>0x7fc80e8d80ed (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (448 samples, 5.18%)</title><rect x="1.3418%" y="100" width="5.1822%" height="15" fill="rgb(218,30,26)"/><text x="1.5918%" y="110.50">0x7fc8..</text></g><g><title>0x7fc80e8f1643 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (448 samples, 5.18%)</title><rect x="1.3418%" y="116" width="5.1822%" height="15" fill="rgb(220,122,19)"/><text x="1.5918%" y="126.50">0x7fc8..</text></g><g><title>0x7fc80e90e457 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (448 samples, 5.18%)</title><rect x="1.3418%" y="132" width="5.1822%" height="15" fill="rgb(250,228,42)"/><text x="1.5918%" y="142.50">0x7fc8..</text></g><g><title>0x7fc80dcc8f2f (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (450 samples, 5.21%)</title><rect x="1.3302%" y="68" width="5.2053%" height="15" fill="rgb(240,193,28)"/><text x="1.5802%" y="78.50">0x7fc8..</text></g><g><title>0x7fc80e8d9891 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (450 samples, 5.21%)</title><rect x="1.3302%" y="84" width="5.2053%" height="15" fill="rgb(216,20,37)"/><text x="1.5802%" y="94.50">0x7fc8..</text></g><g><title>&lt;module&gt; (profile_cv2_long.py:13) (555 samples, 6.42%)</title><rect x="0.1272%" y="52" width="6.4199%" height="15" fill="rgb(206,188,39)"/><text x="0.3772%" y="62.50">&lt;module&gt;..</text></g><g><title>0x7fc80c02b9df (libavformat-fed7ce93.so.58.47.100) (177 samples, 2.05%)</title><rect x="25.2053%" y="164" width="2.0474%" height="15" fill="rgb(217,207,13)"/><text x="25.4553%" y="174.50">0..</text></g><g><title>0x7fc80c02c32b (libavformat-fed7ce93.so.58.47.100) (183 samples, 2.12%)</title><rect x="25.1706%" y="148" width="2.1168%" height="15" fill="rgb(231,73,38)"/><text x="25.4206%" y="158.50">0..</text></g><g><title>0x7fc80c02c564 (libavformat-fed7ce93.so.58.47.100) (119 samples, 1.38%)</title><rect x="27.6113%" y="148" width="1.3765%" height="15" fill="rgb(225,20,46)"/><text x="27.8613%" y="158.50"></text></g><g><title>av_opt_get_dict_val (libavutil-bedca4f8.so.56.55.100) (119 samples, 1.38%)</title><rect x="27.6113%" y="164" width="1.3765%" height="15" fill="rgb(210,31,41)"/><text x="27.8613%" y="174.50"></text></g><g><title>av_opt_find2 (libavutil-bedca4f8.so.56.55.100) (116 samples, 1.34%)</title><rect x="27.6460%" y="180" width="1.3418%" height="15" fill="rgb(221,200,47)"/><text x="27.8960%" y="190.50"></text></g><g><title>0x7fc80e90b2f8 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (349 samples, 4.04%)</title><rect x="25.1359%" y="116" width="4.0370%" height="15" fill="rgb(226,26,5)"/><text x="25.3859%" y="126.50">0x7f..</text></g><g><title>av_read_frame (libavformat-fed7ce93.so.58.47.100) (349 samples, 4.04%)</title><rect x="25.1359%" y="132" width="4.0370%" height="15" fill="rgb(249,33,26)"/><text x="25.3859%" y="142.50">av_r..</text></g><g><title>0x7fc80c613281 (libavcodec-681a2255.so.58.93.100) (132 samples, 1.53%)</title><rect x="30.2256%" y="196" width="1.5269%" height="15" fill="rgb(235,183,28)"/><text x="30.4756%" y="206.50"></text></g><g><title>0x7fc80c6c5a83 (libavcodec-681a2255.so.58.93.100) (213 samples, 2.46%)</title><rect x="29.3233%" y="180" width="2.4639%" height="15" fill="rgb(221,5,38)"/><text x="29.5733%" y="190.50">0x..</text></g><g><title>0x7fc80c32c6d3 (libavcodec-681a2255.so.58.93.100) (262 samples, 3.03%)</title><rect x="29.3117%" y="164" width="3.0307%" height="15" fill="rgb(247,18,42)"/><text x="29.5617%" y="174.50">0x7..</text></g><g><title>0x7fc80c32d4c3 (libavcodec-681a2255.so.58.93.100) (298 samples, 3.45%)</title><rect x="29.2423%" y="132" width="3.4471%" height="15" fill="rgb(241,131,45)"/><text x="29.4923%" y="142.50">0x7..</text></g><g><title>avcodec_receive_frame (libavcodec-681a2255.so.58.93.100) (298 samples, 3.45%)</title><rect x="29.2423%" y="148" width="3.4471%" height="15" fill="rgb(249,31,29)"/><text x="29.4923%" y="158.50">avc..</text></g><g><title>0x7fc80c437604 (libavcodec-681a2255.so.58.93.100) (114 samples, 1.32%)</title><rect x="33.8924%" y="212" width="1.3187%" height="15" fill="rgb(225,111,53)"/><text x="34.1424%" y="222.50"></text></g><g><title>av_frame_unref (libavutil-bedca4f8.so.56.55.100) (89 samples, 1.03%)</title><rect x="34.1816%" y="228" width="1.0295%" height="15" fill="rgb(238,160,17)"/><text x="34.4316%" y="238.50"></text></g><g><title>0x7fc80c44519b (libavcodec-681a2255.so.58.93.100) (245 samples, 2.83%)</title><rect x="33.6148%" y="196" width="2.8340%" height="15" fill="rgb(214,148,48)"/><text x="33.8648%" y="206.50">0x..</text></g><g><title>0x7fc80c7c5967 (libavcodec-681a2255.so.58.93.100) (96 samples, 1.11%)</title><rect x="36.5414%" y="228" width="1.1105%" height="15" fill="rgb(232,36,49)"/><text x="36.7914%" y="238.50"></text></g><g><title>av_frame_ref (libavutil-bedca4f8.so.56.55.100) (96 samples, 1.11%)</title><rect x="36.5414%" y="244" width="1.1105%" height="15" fill="rgb(209,103,24)"/><text x="36.7914%" y="254.50"></text></g><g><title>0x7fc80c4376e0 (libavcodec-681a2255.so.58.93.100) (125 samples, 1.45%)</title><rect x="36.5298%" y="212" width="1.4459%" height="15" fill="rgb(229,88,8)"/><text x="36.7798%" y="222.50"></text></g><g><title>0x7fc80c4451b6 (libavcodec-681a2255.so.58.93.100) (253 samples, 2.93%)</title><rect x="36.5298%" y="196" width="2.9265%" height="15" fill="rgb(213,181,19)"/><text x="36.7798%" y="206.50">0x..</text></g><g><title>0x7fc80c19e087 (libavcodec-681a2255.so.58.93.100) (87 samples, 1.01%)</title><rect x="40.6362%" y="212" width="1.0064%" height="15" fill="rgb(254,191,54)"/><text x="40.8862%" y="222.50"></text></g><g><title>0x7fc80c6433d8 (libavcodec-681a2255.so.58.93.100) (114 samples, 1.32%)</title><rect x="41.6657%" y="212" width="1.3187%" height="15" fill="rgb(241,83,37)"/><text x="41.9157%" y="222.50"></text></g><g><title>0x7fc80c63d581 (libavcodec-681a2255.so.58.93.100) (104 samples, 1.20%)</title><rect x="41.7814%" y="228" width="1.2030%" height="15" fill="rgb(233,36,39)"/><text x="42.0314%" y="238.50"></text></g><g><title>av_frame_unref (libavutil-bedca4f8.so.56.55.100) (95 samples, 1.10%)</title><rect x="41.8855%" y="244" width="1.0989%" height="15" fill="rgb(226,3,54)"/><text x="42.1355%" y="254.50"></text></g><g><title>0x7fc80c64340c (libavcodec-681a2255.so.58.93.100) (133 samples, 1.54%)</title><rect x="43.5165%" y="212" width="1.5385%" height="15" fill="rgb(245,192,40)"/><text x="43.7665%" y="222.50"></text></g><g><title>0x7fc80c63e080 (libavcodec-681a2255.so.58.93.100) (91 samples, 1.05%)</title><rect x="44.0023%" y="228" width="1.0526%" height="15" fill="rgb(238,167,29)"/><text x="44.2523%" y="238.50"></text></g><g><title>0x7fc80c613281 (libavcodec-681a2255.so.58.93.100) (563 samples, 6.51%)</title><rect x="40.6362%" y="196" width="6.5124%" height="15" fill="rgb(232,182,51)"/><text x="40.8862%" y="206.50">0x7fc80c6..</text></g><g><title>0x7fc80c6c5a83 (libavcodec-681a2255.so.58.93.100) (1,246 samples, 14.41%)</title><rect x="32.9670%" y="180" width="14.4130%" height="15" fill="rgb(231,60,39)"/><text x="33.2170%" y="190.50">0x7fc80c6c5a83 (libavc..</text></g><g><title>0x7fc80c6c5ad7 (libavcodec-681a2255.so.58.93.100) (90 samples, 1.04%)</title><rect x="47.7617%" y="180" width="1.0411%" height="15" fill="rgb(208,69,12)"/><text x="48.0117%" y="190.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.27.so) (90 samples, 1.04%)</title><rect x="47.7617%" y="196" width="1.0411%" height="15" fill="rgb(235,93,37)"/><text x="48.0117%" y="206.50"></text></g><g><title>0x7fc80c6c5fab (libavcodec-681a2255.so.58.93.100) (606 samples, 7.01%)</title><rect x="48.9879%" y="180" width="7.0098%" height="15" fill="rgb(213,116,39)"/><text x="49.2379%" y="190.50">0x7fc80c6..</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (606 samples, 7.01%)</title><rect x="48.9879%" y="196" width="7.0098%" height="15" fill="rgb(222,207,29)"/><text x="49.2379%" y="206.50">__pthread..</text></g><g><title>0x7fc80c32c6d3 (libavcodec-681a2255.so.58.93.100) (2,004 samples, 23.18%)</title><rect x="32.8861%" y="164" width="23.1810%" height="15" fill="rgb(206,96,30)"/><text x="33.1361%" y="174.50">0x7fc80c32c6d3 (libavcodec-681a2255.s..</text></g><g><title>0x7fc80c32d54b (libavcodec-681a2255.so.58.93.100) (2,034 samples, 23.53%)</title><rect x="32.6894%" y="132" width="23.5281%" height="15" fill="rgb(218,138,4)"/><text x="32.9394%" y="142.50">0x7fc80c32d54b (libavcodec-681a2255.s..</text></g><g><title>avcodec_send_packet (libavcodec-681a2255.so.58.93.100) (2,034 samples, 23.53%)</title><rect x="32.6894%" y="148" width="23.5281%" height="15" fill="rgb(250,191,14)"/><text x="32.9394%" y="158.50">avcodec_send_packet (libavcodec-681a2..</text></g><g><title>0x7fc80e8d600d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,757 samples, 31.89%)</title><rect x="25.0434%" y="84" width="31.8913%" height="15" fill="rgb(239,60,40)"/><text x="25.2934%" y="94.50">0x7fc80e8d600d (cv2/cv2.cpython-37m-x86_64-linux-gnu..</text></g><g><title>0x7fc80e8d6302 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,756 samples, 31.88%)</title><rect x="25.0549%" y="100" width="31.8797%" height="15" fill="rgb(206,27,48)"/><text x="25.3049%" y="110.50">0x7fc80e8d6302 (cv2/cv2.cpython-37m-x86_64-linux-gnu..</text></g><g><title>0x7fc80e90b350 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,396 samples, 27.72%)</title><rect x="29.2192%" y="116" width="27.7154%" height="15" fill="rgb(225,35,8)"/><text x="29.4692%" y="126.50">0x7fc80e90b350 (cv2/cv2.cpython-37m-x86_64-l..</text></g><g><title>0x7fc811df5940 (libc-2.27.so) (88 samples, 1.02%)</title><rect x="58.0567%" y="292" width="1.0179%" height="15" fill="rgb(250,213,24)"/><text x="58.3067%" y="302.50"></text></g><g><title>0x7fc811df97d8 (libc-2.27.so) (283 samples, 3.27%)</title><rect x="57.9410%" y="276" width="3.2736%" height="15" fill="rgb(247,123,22)"/><text x="58.1910%" y="286.50">0x7..</text></g><g><title>0x7fc80da99e0e (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (338 samples, 3.91%)</title><rect x="57.3395%" y="180" width="3.9098%" height="15" fill="rgb(231,138,38)"/><text x="57.5895%" y="190.50">0x7f..</text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (338 samples, 3.91%)</title><rect x="57.3395%" y="196" width="3.9098%" height="15" fill="rgb(231,145,46)"/><text x="57.5895%" y="206.50">PyAr..</text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (337 samples, 3.90%)</title><rect x="57.3511%" y="212" width="3.8982%" height="15" fill="rgb(251,118,11)"/><text x="57.6011%" y="222.50">PyAr..</text></g><g><title>npy_alloc_cache (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (331 samples, 3.83%)</title><rect x="57.4205%" y="228" width="3.8288%" height="15" fill="rgb(217,147,25)"/><text x="57.6705%" y="238.50">npy_..</text></g><g><title>PyDataMem_NEW (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (331 samples, 3.83%)</title><rect x="57.4205%" y="244" width="3.8288%" height="15" fill="rgb(247,81,37)"/><text x="57.6705%" y="254.50">PyDa..</text></g><g><title>__libc_malloc (libc-2.27.so) (330 samples, 3.82%)</title><rect x="57.4320%" y="260" width="3.8172%" height="15" fill="rgb(209,12,38)"/><text x="57.6820%" y="270.50">__li..</text></g><g><title>0x7fc80dd27611 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (350 samples, 4.05%)</title><rect x="57.2238%" y="132" width="4.0486%" height="15" fill="rgb(227,1,9)"/><text x="57.4738%" y="142.50">0x7f..</text></g><g><title>0x7fc80de2ebfb (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (349 samples, 4.04%)</title><rect x="57.2354%" y="148" width="4.0370%" height="15" fill="rgb(248,47,43)"/><text x="57.4854%" y="158.50">0x7f..</text></g><g><title>0x7fc80ddd863d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (343 samples, 3.97%)</title><rect x="57.3048%" y="164" width="3.9676%" height="15" fill="rgb(221,10,30)"/><text x="57.5548%" y="174.50">0x7f..</text></g><g><title>0x7fc80e8d6020 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (398 samples, 4.60%)</title><rect x="56.9462%" y="84" width="4.6038%" height="15" fill="rgb(210,229,1)"/><text x="57.1962%" y="94.50">0x7fc..</text></g><g><title>0x7fc80e8d77c8 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (395 samples, 4.57%)</title><rect x="56.9809%" y="100" width="4.5691%" height="15" fill="rgb(222,148,37)"/><text x="57.2309%" y="110.50">0x7fc..</text></g><g><title>0x7fc80e909b9f (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (376 samples, 4.35%)</title><rect x="57.2007%" y="116" width="4.3493%" height="15" fill="rgb(234,67,33)"/><text x="57.4507%" y="126.50">0x7fc..</text></g><g><title>0x7fc80dc19661 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (3,158 samples, 36.53%)</title><rect x="25.0434%" y="68" width="36.5298%" height="15" fill="rgb(247,98,35)"/><text x="25.2934%" y="78.50">0x7fc80dc19661 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so)</text></g><g><title>0x7fc80f323b1a (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (135 samples, 1.56%)</title><rect x="65.2516%" y="68" width="1.5616%" height="15" fill="rgb(247,138,52)"/><text x="65.5016%" y="78.50"></text></g><g><title>&lt;module&gt; (profile_cv2_long.py:15) (5,207 samples, 60.23%)</title><rect x="6.6744%" y="52" width="60.2313%" height="15" fill="rgb(213,79,30)"/><text x="6.9244%" y="62.50">&lt;module&gt; (profile_cv2_long.py:15)</text></g><g><title>0x7fc811df9ff0 (libc-2.27.so) (132 samples, 1.53%)</title><rect x="67.9005%" y="244" width="1.5269%" height="15" fill="rgb(246,177,23)"/><text x="68.1505%" y="254.50"></text></g><g><title>npy_alloc_cache (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (153 samples, 1.77%)</title><rect x="67.6692%" y="196" width="1.7698%" height="15" fill="rgb(230,62,27)"/><text x="67.9192%" y="206.50"></text></g><g><title>PyDataMem_NEW (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (153 samples, 1.77%)</title><rect x="67.6692%" y="212" width="1.7698%" height="15" fill="rgb(216,154,8)"/><text x="67.9192%" y="222.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (153 samples, 1.77%)</title><rect x="67.6692%" y="228" width="1.7698%" height="15" fill="rgb(244,35,45)"/><text x="67.9192%" y="238.50"></text></g><g><title>0x7fc80e0c3446 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (171 samples, 1.98%)</title><rect x="67.4725%" y="100" width="1.9780%" height="15" fill="rgb(251,115,12)"/><text x="67.7225%" y="110.50">0..</text></g><g><title>0x7fc80de2dc10 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (169 samples, 1.95%)</title><rect x="67.4957%" y="116" width="1.9549%" height="15" fill="rgb(240,54,50)"/><text x="67.7457%" y="126.50">0..</text></g><g><title>0x7fc80ddd863d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (168 samples, 1.94%)</title><rect x="67.5072%" y="132" width="1.9433%" height="15" fill="rgb(233,84,52)"/><text x="67.7572%" y="142.50">0..</text></g><g><title>0x7fc80da99e0e (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (166 samples, 1.92%)</title><rect x="67.5304%" y="148" width="1.9202%" height="15" fill="rgb(207,117,47)"/><text x="67.7804%" y="158.50">0..</text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (166 samples, 1.92%)</title><rect x="67.5304%" y="164" width="1.9202%" height="15" fill="rgb(249,43,39)"/><text x="67.7804%" y="174.50">P..</text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (162 samples, 1.87%)</title><rect x="67.5766%" y="180" width="1.8739%" height="15" fill="rgb(209,38,44)"/><text x="67.8266%" y="190.50">P..</text></g><g><title>0x7fc80ef9b080 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (664 samples, 7.68%)</title><rect x="70.4338%" y="196" width="7.6807%" height="15" fill="rgb(236,212,23)"/><text x="70.6838%" y="206.50">0x7fc80ef9b..</text></g><g><title>0x7fc80ef9b09d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (722 samples, 8.35%)</title><rect x="78.6466%" y="196" width="8.3516%" height="15" fill="rgb(242,79,21)"/><text x="78.8966%" y="206.50">0x7fc80ef9b0..</text></g><g><title>0x7fc80ef9b0a4 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (721 samples, 8.34%)</title><rect x="86.9983%" y="196" width="8.3401%" height="15" fill="rgb(211,96,35)"/><text x="87.2483%" y="206.50">0x7fc80ef9b0..</text></g><g><title>0x7fc80de8df28 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,245 samples, 25.97%)</title><rect x="69.5547%" y="148" width="25.9688%" height="15" fill="rgb(253,215,40)"/><text x="69.8047%" y="158.50">0x7fc80de8df28 (cv2/cv2.cpython-37m-x86_64..</text></g><g><title>0x7fc80e0ae339 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,245 samples, 25.97%)</title><rect x="69.5547%" y="164" width="25.9688%" height="15" fill="rgb(211,81,21)"/><text x="69.8047%" y="174.50">0x7fc80e0ae339 (cv2/cv2.cpython-37m-x86_64..</text></g><g><title>0x7fc80ef99187 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,242 samples, 25.93%)</title><rect x="69.5894%" y="180" width="25.9341%" height="15" fill="rgb(208,190,38)"/><text x="69.8394%" y="190.50">0x7fc80ef99187 (cv2/cv2.cpython-37m-x86_6..</text></g><g><title>0x7fc80e0c25f7 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,252 samples, 26.05%)</title><rect x="69.5315%" y="132" width="26.0497%" height="15" fill="rgb(235,213,38)"/><text x="69.7815%" y="142.50">0x7fc80e0c25f7 (cv2/cv2.cpython-37m-x86_64..</text></g><g><title>0x7fc80e0c2f7a (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,260 samples, 26.14%)</title><rect x="69.4968%" y="116" width="26.1423%" height="15" fill="rgb(237,122,38)"/><text x="69.7468%" y="126.50">0x7fc80e0c2f7a (cv2/cv2.cpython-37m-x86_64..</text></g><g><title>0x7fc80e0c35f1 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,265 samples, 26.20%)</title><rect x="69.4505%" y="100" width="26.2001%" height="15" fill="rgb(244,218,35)"/><text x="69.7005%" y="110.50">0x7fc80e0c35f1 (cv2/cv2.cpython-37m-x86_64..</text></g><g><title>0x7fc80dbcd53c (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,448 samples, 28.32%)</title><rect x="67.3684%" y="68" width="28.3169%" height="15" fill="rgb(240,68,47)"/><text x="67.6184%" y="78.50">0x7fc80dbcd53c (cv2/cv2.cpython-37m-x86_64-li..</text></g><g><title>0x7fc80e07f18f (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (2,442 samples, 28.25%)</title><rect x="67.4378%" y="84" width="28.2475%" height="15" fill="rgb(210,16,53)"/><text x="67.6878%" y="94.50">0x7fc80e07f18f (cv2/cv2.cpython-37m-x86_64-li..</text></g><g><title>PyDataMem_FREE (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (249 samples, 2.88%)</title><rect x="95.7895%" y="84" width="2.8803%" height="15" fill="rgb(235,124,12)"/><text x="96.0395%" y="94.50">Py..</text></g><g><title>cfree (libc-2.27.so) (248 samples, 2.87%)</title><rect x="95.8010%" y="100" width="2.8687%" height="15" fill="rgb(224,169,11)"/><text x="96.0510%" y="110.50">cf..</text></g><g><title>0x7fc811df6378 (libc-2.27.so) (244 samples, 2.82%)</title><rect x="95.8473%" y="116" width="2.8224%" height="15" fill="rgb(250,166,2)"/><text x="96.0973%" y="126.50">0x..</text></g><g><title>__default_morecore (libc-2.27.so) (244 samples, 2.82%)</title><rect x="95.8473%" y="132" width="2.8224%" height="15" fill="rgb(242,216,29)"/><text x="96.0973%" y="142.50">__..</text></g><g><title>sbrk (libc-2.27.so) (244 samples, 2.82%)</title><rect x="95.8473%" y="148" width="2.8224%" height="15" fill="rgb(230,116,27)"/><text x="96.0973%" y="158.50">sb..</text></g><g><title>brk (libc-2.27.so) (244 samples, 2.82%)</title><rect x="95.8473%" y="164" width="2.8224%" height="15" fill="rgb(228,99,48)"/><text x="96.0973%" y="174.50">br..</text></g><g><title>&lt;module&gt; (profile_cv2_long.py:17) (2,751 samples, 31.82%)</title><rect x="66.9404%" y="52" width="31.8219%" height="15" fill="rgb(253,11,6)"/><text x="67.1904%" y="62.50">&lt;module&gt; (profile_cv2_long.py:17)</text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (259 samples, 3.00%)</title><rect x="95.7663%" y="68" width="2.9960%" height="15" fill="rgb(247,143,39)"/><text x="96.0163%" y="78.50">arr..</text></g><g><title>all (8,645 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (profile_cv2_long.py:21) (92 samples, 1.06%)</title><rect x="98.9358%" y="52" width="1.0642%" height="15" fill="rgb(233,208,19)"/><text x="99.1858%" y="62.50"></text></g><g><title>0x7fc80db01cc7 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (92 samples, 1.06%)</title><rect x="98.9358%" y="68" width="1.0642%" height="15" fill="rgb(216,164,2)"/><text x="99.1858%" y="78.50"></text></g><g><title>0x7fc80e8d6aa5 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (92 samples, 1.06%)</title><rect x="98.9358%" y="84" width="1.0642%" height="15" fill="rgb(220,129,5)"/><text x="99.1858%" y="94.50"></text></g><g><title>0x7fc80e90a60d (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (92 samples, 1.06%)</title><rect x="98.9358%" y="100" width="1.0642%" height="15" fill="rgb(242,17,10)"/><text x="99.1858%" y="110.50"></text></g><g><title>0x7fc80e90a3a9 (cv2/cv2.cpython-37m-x86_64-linux-gnu.so) (89 samples, 1.03%)</title><rect x="98.9705%" y="116" width="1.0295%" height="15" fill="rgb(242,107,0)"/><text x="99.2205%" y="126.50"></text></g><g><title>avcodec_close (libavcodec-681a2255.so.58.93.100) (89 samples, 1.03%)</title><rect x="98.9705%" y="132" width="1.0295%" height="15" fill="rgb(251,28,31)"/><text x="99.2205%" y="142.50"></text></g></svg></svg>