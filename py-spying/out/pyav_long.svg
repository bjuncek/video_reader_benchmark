<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>__pyx_tp_new_2av_9container_4core_Container (av/container/core.cpython-37m-x86_64-linux-gnu.so) (343 samples, 1.47%)</title><rect x="0.5743%" y="100" width="1.4701%" height="15" fill="rgb(227,0,7)"/><text x="0.8243%" y="110.50"></text></g><g><title>avformat_open_input (libavformat.so.58.29.100) (329 samples, 1.41%)</title><rect x="0.6343%" y="116" width="1.4101%" height="15" fill="rgb(217,0,24)"/><text x="0.8843%" y="126.50"></text></g><g><title>avformat_find_stream_info (libavformat.so.58.29.100) (268 samples, 1.15%)</title><rect x="2.0444%" y="100" width="1.1486%" height="15" fill="rgb(221,193,54)"/><text x="2.2944%" y="110.50"></text></g><g><title>&lt;module&gt; (profile_av_long.py:12) (713 samples, 3.06%)</title><rect x="0.4800%" y="52" width="3.0559%" height="15" fill="rgb(248,212,6)"/><text x="0.7300%" y="62.50">&lt;mo..</text></g><g><title>open (av/container/core.cpython-37m-x86_64-linux-gnu.so) (693 samples, 2.97%)</title><rect x="0.5657%" y="68" width="2.9702%" height="15" fill="rgb(208,68,35)"/><text x="0.8157%" y="78.50">ope..</text></g><g><title>__pyx_tp_new_2av_9container_5input_InputContainer (av/container/input.cpython-37m-x86_64-linux-gnu.so) (692 samples, 2.97%)</title><rect x="0.5700%" y="84" width="2.9659%" height="15" fill="rgb(232,128,0)"/><text x="0.8200%" y="94.50">__p..</text></g><g><title>0x7fac8d827066 (libavformat.so.58.29.100) (238 samples, 1.02%)</title><rect x="5.9446%" y="180" width="1.0201%" height="15" fill="rgb(207,160,47)"/><text x="6.1946%" y="190.50"></text></g><g><title>av_log (libavutil.so.56.31.100) (238 samples, 1.02%)</title><rect x="5.9446%" y="196" width="1.0201%" height="15" fill="rgb(228,23,34)"/><text x="6.1946%" y="206.50"></text></g><g><title>logging_log_callback (av/logging.cpython-37m-x86_64-linux-gnu.so) (236 samples, 1.01%)</title><rect x="5.9532%" y="212" width="1.0115%" height="15" fill="rgb(218,30,26)"/><text x="6.2032%" y="222.50"></text></g><g><title>0x7fac8d8e6d63 (libavformat.so.58.29.100) (448 samples, 1.92%)</title><rect x="5.5932%" y="164" width="1.9201%" height="15" fill="rgb(220,122,19)"/><text x="5.8432%" y="174.50">0..</text></g><g><title>0x7fac8d8e793d (libavformat.so.58.29.100) (459 samples, 1.97%)</title><rect x="5.5932%" y="148" width="1.9673%" height="15" fill="rgb(250,228,42)"/><text x="5.8432%" y="158.50">0..</text></g><g><title>av_read_frame (libavformat.so.58.29.100) (784 samples, 3.36%)</title><rect x="5.3403%" y="132" width="3.3602%" height="15" fill="rgb(240,193,28)"/><text x="5.5903%" y="142.50">av_..</text></g><g><title>__Pyx_Coroutine_SendEx.isra.46 (av/enum.cpython-37m-x86_64-linux-gnu.so) (1,065 samples, 4.56%)</title><rect x="4.1531%" y="100" width="4.5645%" height="15" fill="rgb(216,20,37)"/><text x="4.4031%" y="110.50">__Pyx..</text></g><g><title>__pyx_gb_2av_9container_5input_14InputContainer_8generator (av/container/input.cpython-37m-x86_64-linux-gnu.so) (1,064 samples, 4.56%)</title><rect x="4.1574%" y="116" width="4.5603%" height="15" fill="rgb(206,188,39)"/><text x="4.4074%" y="126.50">__pyx..</text></g><g><title>CodecContext__recv_frame (av/codec/context.cpython-37m-x86_64-linux-gnu.so) (267 samples, 1.14%)</title><rect x="9.1248%" y="180" width="1.1444%" height="15" fill="rgb(217,207,13)"/><text x="9.3748%" y="190.50"></text></g><g><title>0x7fac8c5c5fcc (libavcodec.so.58.54.100) (376 samples, 1.61%)</title><rect x="10.9378%" y="228" width="1.6115%" height="15" fill="rgb(231,73,38)"/><text x="11.1878%" y="238.50"></text></g><g><title>0x7fac8c5b6575 (libavcodec.so.58.54.100) (243 samples, 1.04%)</title><rect x="12.6564%" y="244" width="1.0415%" height="15" fill="rgb(225,20,46)"/><text x="12.9064%" y="254.50"></text></g><g><title>0x7fac8c5c5fe8 (libavcodec.so.58.54.100) (439 samples, 1.88%)</title><rect x="12.6479%" y="228" width="1.8815%" height="15" fill="rgb(210,31,41)"/><text x="12.8979%" y="238.50">0..</text></g><g><title>0x7fac8c7b5172 (libavcodec.so.58.54.100) (234 samples, 1.00%)</title><rect x="15.9823%" y="244" width="1.0029%" height="15" fill="rgb(221,200,47)"/><text x="16.2323%" y="254.50"></text></g><g><title>0x7fac8c787a42 (libavcodec.so.58.54.100) (718 samples, 3.08%)</title><rect x="15.4509%" y="228" width="3.0773%" height="15" fill="rgb(226,26,5)"/><text x="15.7009%" y="238.50">0x7..</text></g><g><title>0x7fac8c8358b5 (libavcodec.so.58.54.100) (1,887 samples, 8.09%)</title><rect x="10.5177%" y="212" width="8.0876%" height="15" fill="rgb(249,33,26)"/><text x="10.7677%" y="222.50">0x7fac8c835..</text></g><g><title>0x7fac8c835dc4 (libavcodec.so.58.54.100) (532 samples, 2.28%)</title><rect x="19.5440%" y="212" width="2.2801%" height="15" fill="rgb(235,183,28)"/><text x="19.7940%" y="222.50">0..</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (532 samples, 2.28%)</title><rect x="19.5440%" y="228" width="2.2801%" height="15" fill="rgb(221,5,38)"/><text x="19.7940%" y="238.50">_..</text></g><g><title>0x7fac8c4a2526 (libavcodec.so.58.54.100) (2,663 samples, 11.41%)</title><rect x="10.4192%" y="196" width="11.4135%" height="15" fill="rgb(247,18,42)"/><text x="10.6692%" y="206.50">0x7fac8c4a2526 (l..</text></g><g><title>avcodec_send_packet (libavcodec.so.58.54.100) (2,738 samples, 11.73%)</title><rect x="10.2820%" y="180" width="11.7350%" height="15" fill="rgb(241,131,45)"/><text x="10.5320%" y="190.50">avcodec_send_pack..</text></g><g><title>CodecContext__send_packet_and_recv (av/codec/context.cpython-37m-x86_64-linux-gnu.so) (3,031 samples, 12.99%)</title><rect x="9.0434%" y="164" width="12.9907%" height="15" fill="rgb(249,31,29)"/><text x="9.2934%" y="174.50">CodecContext__send_p..</text></g><g><title>__Pyx__PyObject_CallOneArg (av/packet.cpython-37m-x86_64-linux-gnu.so) (3,271 samples, 14.02%)</title><rect x="8.8548%" y="116" width="14.0194%" height="15" fill="rgb(225,111,53)"/><text x="9.1048%" y="126.50">__Pyx__PyObject_CallO..</text></g><g><title>decode (av/stream.cpython-37m-x86_64-linux-gnu.so) (3,253 samples, 13.94%)</title><rect x="8.9319%" y="132" width="13.9422%" height="15" fill="rgb(238,160,17)"/><text x="9.1819%" y="142.50">decode (av/stream.cpy..</text></g><g><title>CodecContext_decode (av/codec/context.cpython-37m-x86_64-linux-gnu.so) (3,246 samples, 13.91%)</title><rect x="8.9619%" y="148" width="13.9122%" height="15" fill="rgb(214,148,48)"/><text x="9.2119%" y="158.50">CodecContext_decode (..</text></g><g><title>__Pyx_Coroutine_SendEx.isra.46 (av/enum.cpython-37m-x86_64-linux-gnu.so) (4,405 samples, 18.88%)</title><rect x="4.0545%" y="68" width="18.8797%" height="15" fill="rgb(232,36,49)"/><text x="4.3045%" y="78.50">__Pyx_Coroutine_SendEx.isra.4..</text></g><g><title>__pyx_gb_2av_9container_5input_14InputContainer_11generator1 (av/container/input.cpython-37m-x86_64-linux-gnu.so) (4,400 samples, 18.86%)</title><rect x="4.0759%" y="84" width="18.8582%" height="15" fill="rgb(209,103,24)"/><text x="4.3259%" y="94.50">__pyx_gb_2av_9container_5inpu..</text></g><g><title>decode (av/packet.cpython-37m-x86_64-linux-gnu.so) (3,290 samples, 14.10%)</title><rect x="8.8334%" y="100" width="14.1008%" height="15" fill="rgb(229,88,8)"/><text x="9.0834%" y="110.50">decode (av/packet.cpy..</text></g><g><title>&lt;module&gt; (profile_av_long.py:14) (4,789 samples, 20.53%)</title><rect x="3.5359%" y="52" width="20.5255%" height="15" fill="rgb(213,181,19)"/><text x="3.7859%" y="62.50">&lt;module&gt; (profile_av_long.py:14)</text></g><g><title>__pyx_tp_dealloc_2av_5video_5frame_VideoFrame (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (259 samples, 1.11%)</title><rect x="22.9513%" y="68" width="1.1101%" height="15" fill="rgb(254,191,54)"/><text x="23.2013%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:980) (444 samples, 1.90%)</title><rect x="25.5657%" y="100" width="1.9030%" height="15" fill="rgb(241,83,37)"/><text x="25.8157%" y="110.50">_..</text></g><g><title>__xstat64 (libc-2.27.so) (281 samples, 1.20%)</title><rect x="32.0461%" y="228" width="1.2044%" height="15" fill="rgb(233,36,39)"/><text x="32.2961%" y="238.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1364) (452 samples, 1.94%)</title><rect x="31.3175%" y="180" width="1.9373%" height="15" fill="rgb(226,3,54)"/><text x="31.5675%" y="190.50">f..</text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;:81) (400 samples, 1.71%)</title><rect x="31.5404%" y="196" width="1.7144%" height="15" fill="rgb(245,192,40)"/><text x="31.7904%" y="206.50"></text></g><g><title>os_stat (python3.7) (379 samples, 1.62%)</title><rect x="31.6304%" y="212" width="1.6244%" height="15" fill="rgb(238,167,29)"/><text x="31.8804%" y="222.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1391) (343 samples, 1.47%)</title><rect x="33.5505%" y="180" width="1.4701%" height="15" fill="rgb(232,182,51)"/><text x="33.8005%" y="190.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1252) (1,070 samples, 4.59%)</title><rect x="31.1546%" y="164" width="4.5860%" height="15" fill="rgb(231,60,39)"/><text x="31.4046%" y="174.50">_get_..</text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1280) (1,248 samples, 5.35%)</title><rect x="30.6746%" y="148" width="5.3489%" height="15" fill="rgb(208,69,12)"/><text x="30.9246%" y="158.50">find_sp..</text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:906) (1,429 samples, 6.12%)</title><rect x="29.9974%" y="132" width="6.1246%" height="15" fill="rgb(235,93,37)"/><text x="30.2474%" y="142.50">_find_sp..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:963) (1,766 samples, 7.57%)</title><rect x="28.5916%" y="116" width="7.5690%" height="15" fill="rgb(213,116,39)"/><text x="28.8416%" y="126.50">_find_and_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2,192 samples, 9.39%)</title><rect x="27.5716%" y="100" width="9.3948%" height="15" fill="rgb(222,207,29)"/><text x="27.8216%" y="110.50">_find_and_loa..</text></g><g><title>__Pyx_Import (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (2,915 samples, 12.49%)</title><rect x="24.8200%" y="84" width="12.4936%" height="15" fill="rgb(206,96,30)"/><text x="25.0700%" y="94.50">__Pyx_Import (av/vi..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:980) (280 samples, 1.20%)</title><rect x="38.7665%" y="116" width="1.2001%" height="15" fill="rgb(218,138,4)"/><text x="39.0165%" y="126.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1391) (239 samples, 1.02%)</title><rect x="44.0339%" y="196" width="1.0243%" height="15" fill="rgb(250,191,14)"/><text x="44.2839%" y="206.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1252) (675 samples, 2.89%)</title><rect x="42.7267%" y="180" width="2.8930%" height="15" fill="rgb(239,60,40)"/><text x="42.9767%" y="190.50">_g..</text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1280) (829 samples, 3.55%)</title><rect x="42.3196%" y="164" width="3.5531%" height="15" fill="rgb(206,27,48)"/><text x="42.5696%" y="174.50">find..</text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:906) (969 samples, 4.15%)</title><rect x="41.7795%" y="148" width="4.1531%" height="15" fill="rgb(225,35,8)"/><text x="42.0295%" y="158.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:963) (1,193 samples, 5.11%)</title><rect x="40.8538%" y="132" width="5.1131%" height="15" fill="rgb(250,213,24)"/><text x="41.1038%" y="142.50">_find_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1,497 samples, 6.42%)</title><rect x="40.0223%" y="116" width="6.4161%" height="15" fill="rgb(247,123,22)"/><text x="40.2723%" y="126.50">_find_an..</text></g><g><title>__Pyx_Import (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (1,921 samples, 8.23%)</title><rect x="38.3336%" y="100" width="8.2333%" height="15" fill="rgb(231,138,38)"/><text x="38.5836%" y="110.50">__Pyx_Impor..</text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1,268 samples, 5.43%)</title><rect x="46.8112%" y="164" width="5.4346%" height="15" fill="rgb(231,145,46)"/><text x="47.0612%" y="174.50">PyArray..</text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1,256 samples, 5.38%)</title><rect x="46.8627%" y="180" width="5.3832%" height="15" fill="rgb(251,118,11)"/><text x="47.1127%" y="190.50">raw_arr..</text></g><g><title>PyArray_NewCopy (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1,304 samples, 5.59%)</title><rect x="46.8070%" y="148" width="5.5889%" height="15" fill="rgb(217,147,25)"/><text x="47.0570%" y="158.50">PyArray..</text></g><g><title>__Pyx__PyObject_CallOneArg (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (1,365 samples, 5.85%)</title><rect x="46.5669%" y="100" width="5.8503%" height="15" fill="rgb(247,81,37)"/><text x="46.8169%" y="110.50">__Pyx__..</text></g><g><title>array_reshape (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1,362 samples, 5.84%)</title><rect x="46.5798%" y="116" width="5.8375%" height="15" fill="rgb(209,12,38)"/><text x="46.8298%" y="126.50">array_r..</text></g><g><title>PyArray_Newshape (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1,317 samples, 5.64%)</title><rect x="46.7727%" y="132" width="5.6446%" height="15" fill="rgb(227,1,9)"/><text x="47.0227%" y="142.50">PyArray..</text></g><g><title>frame_useful_array (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (3,501 samples, 15.01%)</title><rect x="38.0936%" y="84" width="15.0051%" height="15" fill="rgb(248,47,43)"/><text x="38.3436%" y="94.50">frame_useful_array (av/..</text></g><g><title>to_ndarray (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (6,959 samples, 29.83%)</title><rect x="24.4428%" y="68" width="29.8260%" height="15" fill="rgb(221,10,30)"/><text x="24.6928%" y="78.50">to_ndarray (av/video/frame.cpython-37m-x86_64-li..</text></g><g><title>reformat (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (273 samples, 1.17%)</title><rect x="53.0987%" y="84" width="1.1701%" height="15" fill="rgb(210,229,1)"/><text x="53.3487%" y="94.50"></text></g><g><title>reformat (av/video/reformatter.cpython-37m-x86_64-linux-gnu.so) (248 samples, 1.06%)</title><rect x="53.2059%" y="100" width="1.0629%" height="15" fill="rgb(222,148,37)"/><text x="53.4559%" y="110.50"></text></g><g><title>reformat (av/video/reformatter.cpython-37m-x86_64-linux-gnu.so) (248 samples, 1.06%)</title><rect x="53.2059%" y="116" width="1.0629%" height="15" fill="rgb(234,67,33)"/><text x="53.4559%" y="126.50"></text></g><g><title>VideoFrame__init_user_attributes (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (249 samples, 1.07%)</title><rect x="55.2417%" y="164" width="1.0672%" height="15" fill="rgb(247,98,35)"/><text x="55.4917%" y="174.50"></text></g><g><title>format_get_video_format (av/video/format.cpython-37m-x86_64-linux-gnu.so) (246 samples, 1.05%)</title><rect x="55.2546%" y="180" width="1.0543%" height="15" fill="rgb(247,138,52)"/><text x="55.5046%" y="190.50"></text></g><g><title>VideoFrame__init (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (312 samples, 1.34%)</title><rect x="55.2203%" y="148" width="1.3372%" height="15" fill="rgb(213,79,30)"/><text x="55.4703%" y="158.50"></text></g><g><title>0x7fac8e5de7d8 (libc-2.27.so) (239 samples, 1.02%)</title><rect x="58.1990%" y="244" width="1.0243%" height="15" fill="rgb(246,177,23)"/><text x="58.4490%" y="254.50"></text></g><g><title>0x7fac8e5df4eb (libc-2.27.so) (364 samples, 1.56%)</title><rect x="57.8390%" y="228" width="1.5601%" height="15" fill="rgb(230,62,27)"/><text x="58.0890%" y="238.50"></text></g><g><title>av_mallocz (libavutil.so.56.31.100) (482 samples, 2.07%)</title><rect x="57.3461%" y="180" width="2.0658%" height="15" fill="rgb(216,154,8)"/><text x="57.5961%" y="190.50">a..</text></g><g><title>av_malloc (libavutil.so.56.31.100) (371 samples, 1.59%)</title><rect x="57.8219%" y="196" width="1.5901%" height="15" fill="rgb(244,35,45)"/><text x="58.0719%" y="206.50"></text></g><g><title>posix_memalign (libc-2.27.so) (371 samples, 1.59%)</title><rect x="57.8219%" y="212" width="1.5901%" height="15" fill="rgb(251,115,12)"/><text x="58.0719%" y="222.50"></text></g><g><title>sws_alloc_context (libswscale.so.5.5.100) (512 samples, 2.19%)</title><rect x="57.3247%" y="164" width="2.1944%" height="15" fill="rgb(240,54,50)"/><text x="57.5747%" y="174.50">s..</text></g><g><title>0x7fac8c0c855c (libswscale.so.5.5.100) (771 samples, 3.30%)</title><rect x="68.5111%" y="180" width="3.3045%" height="15" fill="rgb(233,84,52)"/><text x="68.7611%" y="190.50">0x7..</text></g><g><title>sws_getCachedContext (libswscale.so.5.5.100) (4,399 samples, 18.85%)</title><rect x="56.9390%" y="148" width="18.8539%" height="15" fill="rgb(207,117,47)"/><text x="57.1890%" y="158.50">sws_getCachedContext (libswsc..</text></g><g><title>sws_init_context (libswscale.so.5.5.100) (3,797 samples, 16.27%)</title><rect x="59.5191%" y="164" width="16.2738%" height="15" fill="rgb(249,43,39)"/><text x="59.7691%" y="174.50">sws_init_context (libswsc..</text></g><g><title>sws_setColorspaceDetails (libswscale.so.5.5.100) (553 samples, 2.37%)</title><rect x="73.4228%" y="180" width="2.3701%" height="15" fill="rgb(209,38,44)"/><text x="73.6728%" y="190.50">sw..</text></g><g><title>0x7fac8c12f06f (libswscale.so.5.5.100) (282 samples, 1.21%)</title><rect x="80.9746%" y="164" width="1.2086%" height="15" fill="rgb(236,212,23)"/><text x="81.2246%" y="174.50"></text></g><g><title>VideoReformatter__reformat (av/video/reformatter.cpython-37m-x86_64-linux-gnu.so) (10,420 samples, 44.66%)</title><rect x="54.8860%" y="132" width="44.6597%" height="15" fill="rgb(242,79,21)"/><text x="55.1360%" y="142.50">VideoReformatter__reformat (av/video/reformatter.cpython-37m-x86_64-linux..</text></g><g><title>sws_scale (libswscale.so.5.5.100) (5,542 samples, 23.75%)</title><rect x="75.7929%" y="148" width="23.7528%" height="15" fill="rgb(211,96,35)"/><text x="76.0429%" y="158.50">sws_scale (libswscale.so.5.5.100)</text></g><g><title>&lt;module&gt; (profile_av_long.py:15) (17,677 samples, 75.76%)</title><rect x="24.0614%" y="52" width="75.7629%" height="15" fill="rgb(253,215,40)"/><text x="24.3114%" y="62.50">&lt;module&gt; (profile_av_long.py:15)</text></g><g><title>to_rgb (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (10,629 samples, 45.56%)</title><rect x="54.2688%" y="68" width="45.5555%" height="15" fill="rgb(211,81,21)"/><text x="54.5188%" y="78.50">to_rgb (av/video/frame.cpython-37m-x86_64-linux-gnu.so)</text></g><g><title>reformat (av/video/frame.cpython-37m-x86_64-linux-gnu.so) (10,595 samples, 45.41%)</title><rect x="54.4145%" y="84" width="45.4097%" height="15" fill="rgb(208,190,38)"/><text x="54.6645%" y="94.50">reformat (av/video/frame.cpython-37m-x86_64-linux-gnu.so)</text></g><g><title>reformat (av/video/reformatter.cpython-37m-x86_64-linux-gnu.so) (10,546 samples, 45.20%)</title><rect x="54.6245%" y="100" width="45.1997%" height="15" fill="rgb(235,213,38)"/><text x="54.8745%" y="110.50">reformat (av/video/reformatter.cpython-37m-x86_64-linux-gnu.so)</text></g><g><title>reformat (av/video/reformatter.cpython-37m-x86_64-linux-gnu.so) (10,536 samples, 45.16%)</title><rect x="54.6674%" y="116" width="45.1569%" height="15" fill="rgb(237,122,38)"/><text x="54.9174%" y="126.50">reformat (av/video/reformatter.cpython-37m-x86_64-linux-gnu.so)</text></g><g><title>all (23,332 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>