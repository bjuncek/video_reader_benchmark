<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180"><g><title>__pthread_cond_timedwait (libpthread-2.27.so) (286 samples, 1.93%)</title><rect x="2.0363%" y="164" width="1.9284%" height="15" fill="rgb(227,0,7)"/><text x="2.2863%" y="174.50">_..</text></g><g><title>avformat_close_input (libavformat.so.58.45.100) (169 samples, 1.14%)</title><rect x="5.6166%" y="244" width="1.1395%" height="15" fill="rgb(217,0,24)"/><text x="5.8666%" y="254.50"></text></g><g><title>avformat_free_context (libavformat.so.58.45.100) (168 samples, 1.13%)</title><rect x="5.6234%" y="260" width="1.1328%" height="15" fill="rgb(221,193,54)"/><text x="5.8734%" y="270.50"></text></g><g><title>0x7f359fe5b441 (libavformat.so.58.45.100) (164 samples, 1.11%)</title><rect x="5.6503%" y="276" width="1.1058%" height="15" fill="rgb(248,212,6)"/><text x="5.9003%" y="286.50"></text></g><g><title>avcodec_free_context (libavcodec.so.58.91.100) (164 samples, 1.11%)</title><rect x="5.6503%" y="292" width="1.1058%" height="15" fill="rgb(208,68,35)"/><text x="5.9003%" y="302.50"></text></g><g><title>avcodec_close (libavcodec.so.58.91.100) (164 samples, 1.11%)</title><rect x="5.6503%" y="308" width="1.1058%" height="15" fill="rgb(232,128,0)"/><text x="5.9003%" y="318.50"></text></g><g><title>__pyx_tp_dealloc_2av_9container_5input_InputContainer (av/container/input.cpython-38-x86_64-linux-gnu.so) (173 samples, 1.17%)</title><rect x="5.6166%" y="212" width="1.1665%" height="15" fill="rgb(207,160,47)"/><text x="5.8666%" y="222.50"></text></g><g><title>input_close_input (av/container/input.cpython-38-x86_64-linux-gnu.so) (173 samples, 1.17%)</title><rect x="5.6166%" y="228" width="1.1665%" height="15" fill="rgb(228,23,34)"/><text x="5.8666%" y="238.50"></text></g><g><title>__pyx_sq_item_2av_9container_7streams_StreamContainer (av/container/streams.cpython-38-x86_64-linux-gnu.so) (423 samples, 2.85%)</title><rect x="4.0591%" y="164" width="2.8521%" height="15" fill="rgb(218,30,26)"/><text x="4.3091%" y="174.50">__..</text></g><g><title>__getitem__ (av/container/streams.cpython-38-x86_64-linux-gnu.so) (423 samples, 2.85%)</title><rect x="4.0591%" y="180" width="2.8521%" height="15" fill="rgb(220,122,19)"/><text x="4.3091%" y="190.50">__..</text></g><g><title>get (av/container/streams.cpython-38-x86_64-linux-gnu.so) (394 samples, 2.66%)</title><rect x="4.2546%" y="196" width="2.6566%" height="15" fill="rgb(250,228,42)"/><text x="4.5046%" y="206.50">ge..</text></g><g><title>__pyx_tp_new_2av_6packet_Packet (av/packet.cpython-38-x86_64-linux-gnu.so) (163 samples, 1.10%)</title><rect x="7.3899%" y="164" width="1.0990%" height="15" fill="rgb(240,193,28)"/><text x="7.6399%" y="174.50"></text></g><g><title>__pthread_cond_timedwait (libpthread-2.27.so) (311 samples, 2.10%)</title><rect x="12.2716%" y="260" width="2.0970%" height="15" fill="rgb(216,20,37)"/><text x="12.5216%" y="270.50">_..</text></g><g><title>0x7f359fd9ea47 (libavformat.so.58.45.100) (1,095 samples, 7.38%)</title><rect x="9.3453%" y="212" width="7.3832%" height="15" fill="rgb(206,188,39)"/><text x="9.5953%" y="222.50">0x7f359fd9..</text></g><g><title>av_log (libavutil.so.56.51.100) (1,095 samples, 7.38%)</title><rect x="9.3453%" y="228" width="7.3832%" height="15" fill="rgb(217,207,13)"/><text x="9.5953%" y="238.50">av_log (li..</text></g><g><title>logging_log_callback (av/logging.cpython-38-x86_64-linux-gnu.so) (1,091 samples, 7.36%)</title><rect x="9.3723%" y="244" width="7.3562%" height="15" fill="rgb(231,73,38)"/><text x="9.6223%" y="254.50">logging_lo..</text></g><g><title>0x7f35a26ba940 (libc-2.27.so) (204 samples, 1.38%)</title><rect x="18.9873%" y="340" width="1.3755%" height="15" fill="rgb(225,20,46)"/><text x="19.2373%" y="350.50"></text></g><g><title>0x7f35a26ba9e2 (libc-2.27.so) (232 samples, 1.56%)</title><rect x="21.2528%" y="340" width="1.5643%" height="15" fill="rgb(210,31,41)"/><text x="21.5028%" y="350.50"></text></g><g><title>0x7f35a26be7d8 (libc-2.27.so) (726 samples, 4.90%)</title><rect x="18.9131%" y="324" width="4.8952%" height="15" fill="rgb(221,200,47)"/><text x="19.1631%" y="334.50">0x7f35..</text></g><g><title>0x7f35a26bf4eb (libc-2.27.so) (928 samples, 6.26%)</title><rect x="17.7331%" y="308" width="6.2572%" height="15" fill="rgb(226,26,5)"/><text x="17.9831%" y="318.50">0x7f35a2..</text></g><g><title>0x7f359fe5d0db (libavformat.so.58.45.100) (1,085 samples, 7.32%)</title><rect x="16.8701%" y="228" width="7.3158%" height="15" fill="rgb(249,33,26)"/><text x="17.1201%" y="238.50">0x7f359fe5..</text></g><g><title>av_grow_packet (libavcodec.so.58.91.100) (1,085 samples, 7.32%)</title><rect x="16.8701%" y="244" width="7.3158%" height="15" fill="rgb(235,183,28)"/><text x="17.1201%" y="254.50">av_grow_pa..</text></g><g><title>av_buffer_alloc (libavutil.so.56.51.100) (1,080 samples, 7.28%)</title><rect x="16.9038%" y="260" width="7.2820%" height="15" fill="rgb(221,5,38)"/><text x="17.1538%" y="270.50">av_buffer_..</text></g><g><title>av_malloc (libavutil.so.56.51.100) (984 samples, 6.63%)</title><rect x="17.5511%" y="276" width="6.6348%" height="15" fill="rgb(247,18,42)"/><text x="17.8011%" y="286.50">av_malloc..</text></g><g><title>posix_memalign (libc-2.27.so) (983 samples, 6.63%)</title><rect x="17.5578%" y="292" width="6.6280%" height="15" fill="rgb(241,131,45)"/><text x="17.8078%" y="302.50">posix_mem..</text></g><g><title>0x7f359fd9ec39 (libavformat.so.58.45.100) (1,170 samples, 7.89%)</title><rect x="16.8566%" y="212" width="7.8889%" height="15" fill="rgb(249,31,29)"/><text x="17.1066%" y="222.50">0x7f359fd9e..</text></g><g><title>0x7f359fe61dea (libavformat.so.58.45.100) (2,330 samples, 15.71%)</title><rect x="9.1565%" y="196" width="15.7103%" height="15" fill="rgb(225,111,53)"/><text x="9.4065%" y="206.50">0x7f359fe61dea (libavfor..</text></g><g><title>0x7f359fe62b24 (libavformat.so.58.45.100) (2,347 samples, 15.82%)</title><rect x="9.1363%" y="180" width="15.8250%" height="15" fill="rgb(238,160,17)"/><text x="9.3863%" y="190.50">0x7f359fe62b24 (libavfor..</text></g><g><title>0x7f359fe63196 (libavformat.so.58.45.100) (297 samples, 2.00%)</title><rect x="25.4804%" y="180" width="2.0026%" height="15" fill="rgb(214,148,48)"/><text x="25.7304%" y="190.50">0..</text></g><g><title>av_opt_get_dict_val (libavutil.so.56.51.100) (297 samples, 2.00%)</title><rect x="25.4804%" y="196" width="2.0026%" height="15" fill="rgb(232,36,49)"/><text x="25.7304%" y="206.50">a..</text></g><g><title>av_opt_find2 (libavutil.so.56.51.100) (291 samples, 1.96%)</title><rect x="25.5209%" y="212" width="1.9621%" height="15" fill="rgb(209,103,24)"/><text x="25.7709%" y="222.50">a..</text></g><g><title>av_read_frame (libavformat.so.58.45.100) (2,833 samples, 19.10%)</title><rect x="8.4890%" y="164" width="19.1019%" height="15" fill="rgb(229,88,8)"/><text x="8.7390%" y="174.50">av_read_frame (libavformat.so...</text></g><g><title>__Pyx_Generator_Next (av/container/core.cpython-38-x86_64-linux-gnu.so) (3,944 samples, 26.59%)</title><rect x="1.2272%" y="116" width="26.5929%" height="15" fill="rgb(213,181,19)"/><text x="1.4772%" y="126.50">__Pyx_Generator_Next (av/container/core.cpy..</text></g><g><title>__Pyx_Coroutine_SendEx.isra.19 (av/container/core.cpython-38-x86_64-linux-gnu.so) (3,941 samples, 26.57%)</title><rect x="1.2474%" y="132" width="26.5727%" height="15" fill="rgb(254,191,54)"/><text x="1.4974%" y="142.50">__Pyx_Coroutine_SendEx.isra.19 (av/containe..</text></g><g><title>__pyx_gb_2av_9container_5input_14InputContainer_8generator (av/container/input.cpython-38-x86_64-linux-gnu.so) (3,939 samples, 26.56%)</title><rect x="1.2609%" y="148" width="26.5592%" height="15" fill="rgb(241,83,37)"/><text x="1.5109%" y="158.50">__pyx_gb_2av_9container_5input_14InputConta..</text></g><g><title>0x7f35a0859916 (libavcodec.so.58.91.100) (177 samples, 1.19%)</title><rect x="29.3372%" y="212" width="1.1934%" height="15" fill="rgb(233,36,39)"/><text x="29.5872%" y="222.50"></text></g><g><title>avcodec_receive_frame (libavcodec.so.58.91.100) (234 samples, 1.58%)</title><rect x="29.2833%" y="196" width="1.5778%" height="15" fill="rgb(226,3,54)"/><text x="29.5333%" y="206.50"></text></g><g><title>CodecContext__recv_frame (av/codec/context.cpython-38-x86_64-linux-gnu.so) (362 samples, 2.44%)</title><rect x="28.4472%" y="180" width="2.4408%" height="15" fill="rgb(245,192,40)"/><text x="28.6972%" y="190.50">Co..</text></g><g><title>av_buffer_unref (libavutil.so.56.51.100) (267 samples, 1.80%)</title><rect x="35.0078%" y="276" width="1.8003%" height="15" fill="rgb(238,167,29)"/><text x="35.2578%" y="286.50">a..</text></g><g><title>0x7f35a0971fb5 (libavcodec.so.58.91.100) (481 samples, 3.24%)</title><rect x="33.6727%" y="244" width="3.2432%" height="15" fill="rgb(232,182,51)"/><text x="33.9227%" y="254.50">0x7..</text></g><g><title>av_frame_unref (libavutil.so.56.51.100) (378 samples, 2.55%)</title><rect x="34.3672%" y="260" width="2.5487%" height="15" fill="rgb(231,60,39)"/><text x="34.6172%" y="270.50">av..</text></g><g><title>0x7f35a0981e5c (libavcodec.so.58.91.100) (1,069 samples, 7.21%)</title><rect x="33.1738%" y="228" width="7.2079%" height="15" fill="rgb(208,69,12)"/><text x="33.4238%" y="238.50">0x7f35a098..</text></g><g><title>av_buffer_ref (libavutil.so.56.51.100) (453 samples, 3.05%)</title><rect x="41.1570%" y="292" width="3.0544%" height="15" fill="rgb(235,93,37)"/><text x="41.4070%" y="302.50">av_..</text></g><g><title>av_mallocz (libavutil.so.56.51.100) (251 samples, 1.69%)</title><rect x="42.5190%" y="308" width="1.6924%" height="15" fill="rgb(213,116,39)"/><text x="42.7690%" y="318.50"></text></g><g><title>av_malloc (libavutil.so.56.51.100) (238 samples, 1.60%)</title><rect x="42.6067%" y="324" width="1.6047%" height="15" fill="rgb(222,207,29)"/><text x="42.8567%" y="334.50"></text></g><g><title>posix_memalign (libc-2.27.so) (237 samples, 1.60%)</title><rect x="42.6134%" y="340" width="1.5980%" height="15" fill="rgb(206,96,30)"/><text x="42.8634%" y="350.50"></text></g><g><title>0x7f35a0cf89d8 (libavcodec.so.58.91.100) (495 samples, 3.34%)</title><rect x="40.9008%" y="260" width="3.3376%" height="15" fill="rgb(218,138,4)"/><text x="41.1508%" y="270.50">0x7..</text></g><g><title>av_frame_ref (libavutil.so.56.51.100) (495 samples, 3.34%)</title><rect x="40.9008%" y="276" width="3.3376%" height="15" fill="rgb(250,191,14)"/><text x="41.1508%" y="286.50">av_..</text></g><g><title>0x7f35a0972085 (libavcodec.so.58.91.100) (633 samples, 4.27%)</title><rect x="40.8738%" y="244" width="4.2681%" height="15" fill="rgb(239,60,40)"/><text x="41.1238%" y="254.50">0x7f3..</text></g><g><title>0x7f35a0972112 (libavcodec.so.58.91.100) (176 samples, 1.19%)</title><rect x="47.1243%" y="244" width="1.1867%" height="15" fill="rgb(206,27,48)"/><text x="47.3743%" y="254.50"></text></g><g><title>av_buffer_ref (libavutil.so.56.51.100) (176 samples, 1.19%)</title><rect x="47.1243%" y="260" width="1.1867%" height="15" fill="rgb(225,35,8)"/><text x="47.3743%" y="270.50"></text></g><g><title>0x7f35a0972120 (libavcodec.so.58.91.100) (198 samples, 1.34%)</title><rect x="48.3110%" y="244" width="1.3350%" height="15" fill="rgb(250,213,24)"/><text x="48.5610%" y="254.50"></text></g><g><title>av_buffer_ref (libavutil.so.56.51.100) (198 samples, 1.34%)</title><rect x="48.3110%" y="260" width="1.3350%" height="15" fill="rgb(247,123,22)"/><text x="48.5610%" y="270.50"></text></g><g><title>0x7f35a0981e78 (libavcodec.so.58.91.100) (1,340 samples, 9.04%)</title><rect x="40.8199%" y="228" width="9.0351%" height="15" fill="rgb(231,138,38)"/><text x="41.0699%" y="238.50">0x7f35a0981e7..</text></g><g><title>0x7f35a0981edf (libavcodec.so.58.91.100) (192 samples, 1.29%)</title><rect x="49.8685%" y="228" width="1.2946%" height="15" fill="rgb(231,145,46)"/><text x="50.1185%" y="238.50"></text></g><g><title>0x7f35a0981f03 (libavcodec.so.58.91.100) (287 samples, 1.94%)</title><rect x="51.1901%" y="228" width="1.9351%" height="15" fill="rgb(251,118,11)"/><text x="51.4401%" y="238.50">0..</text></g><g><title>0x7f35a0bfcbd9 (libavcodec.so.58.91.100) (3,387 samples, 22.84%)</title><rect x="31.4207%" y="212" width="22.8373%" height="15" fill="rgb(217,147,25)"/><text x="31.6707%" y="222.50">0x7f35a0bfcbd9 (libavcodec.so.58.91...</text></g><g><title>0x7f35a0bfcc2c (libavcodec.so.58.91.100) (239 samples, 1.61%)</title><rect x="54.7974%" y="212" width="1.6115%" height="15" fill="rgb(247,81,37)"/><text x="55.0474%" y="222.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.27.so) (239 samples, 1.61%)</title><rect x="54.7974%" y="228" width="1.6115%" height="15" fill="rgb(209,12,38)"/><text x="55.0474%" y="238.50"></text></g><g><title>0x7f35a0bfd0f4 (libavcodec.so.58.91.100) (3,656 samples, 24.65%)</title><rect x="56.7730%" y="212" width="24.6511%" height="15" fill="rgb(227,1,9)"/><text x="57.0230%" y="222.50">0x7f35a0bfd0f4 (libavcodec.so.58.91.100)</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (3,656 samples, 24.65%)</title><rect x="56.7730%" y="228" width="24.6511%" height="15" fill="rgb(248,47,43)"/><text x="57.0230%" y="238.50">__pthread_cond_wait (libpthread-2.27.so)</text></g><g><title>0x7f35a0859916 (libavcodec.so.58.91.100) (7,509 samples, 50.63%)</title><rect x="31.2184%" y="196" width="50.6304%" height="15" fill="rgb(221,10,30)"/><text x="31.4684%" y="206.50">0x7f35a0859916 (libavcodec.so.58.91.100)</text></g><g><title>avcodec_send_packet (libavcodec.so.58.91.100) (7,615 samples, 51.35%)</title><rect x="30.9487%" y="180" width="51.3452%" height="15" fill="rgb(210,229,1)"/><text x="31.1987%" y="190.50">avcodec_send_packet (libavcodec.so.58.91.100)</text></g><g><title>CodecContext__send_packet_and_recv (av/codec/context.cpython-38-x86_64-linux-gnu.so) (8,014 samples, 54.04%)</title><rect x="28.2786%" y="164" width="54.0355%" height="15" fill="rgb(222,148,37)"/><text x="28.5286%" y="174.50">CodecContext__send_packet_and_recv (av/codec/context.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>avcodec_open2 (libavcodec.so.58.91.100) (194 samples, 1.31%)</title><rect x="82.3882%" y="180" width="1.3081%" height="15" fill="rgb(234,67,33)"/><text x="82.6382%" y="190.50"></text></g><g><title>CodecContext_open (av/codec/context.cpython-38-x86_64-linux-gnu.so) (206 samples, 1.39%)</title><rect x="82.3141%" y="164" width="1.3890%" height="15" fill="rgb(247,98,35)"/><text x="82.5641%" y="174.50"></text></g><g><title>av_buffer_unref (libavutil.so.56.51.100) (210 samples, 1.42%)</title><rect x="86.1034%" y="404" width="1.4160%" height="15" fill="rgb(247,138,52)"/><text x="86.3534%" y="414.50"></text></g><g><title>avformat_close_input (libavformat.so.58.45.100) (333 samples, 2.25%)</title><rect x="85.2808%" y="324" width="2.2453%" height="15" fill="rgb(213,79,30)"/><text x="85.5308%" y="334.50">a..</text></g><g><title>avformat_free_context (libavformat.so.58.45.100) (332 samples, 2.24%)</title><rect x="85.2876%" y="340" width="2.2386%" height="15" fill="rgb(246,177,23)"/><text x="85.5376%" y="350.50">a..</text></g><g><title>0x7f359fe5b441 (libavformat.so.58.45.100) (324 samples, 2.18%)</title><rect x="85.3415%" y="356" width="2.1846%" height="15" fill="rgb(230,62,27)"/><text x="85.5915%" y="366.50">0..</text></g><g><title>avcodec_free_context (libavcodec.so.58.91.100) (324 samples, 2.18%)</title><rect x="85.3415%" y="372" width="2.1846%" height="15" fill="rgb(216,154,8)"/><text x="85.5915%" y="382.50">a..</text></g><g><title>avcodec_close (libavcodec.so.58.91.100) (324 samples, 2.18%)</title><rect x="85.3415%" y="388" width="2.1846%" height="15" fill="rgb(244,35,45)"/><text x="85.5915%" y="398.50">a..</text></g><g><title>__pyx_tp_dealloc_2av_9container_5input_InputContainer (av/container/input.cpython-38-x86_64-linux-gnu.so) (338 samples, 2.28%)</title><rect x="85.2741%" y="292" width="2.2790%" height="15" fill="rgb(251,115,12)"/><text x="85.5241%" y="302.50">_..</text></g><g><title>input_close_input (av/container/input.cpython-38-x86_64-linux-gnu.so) (337 samples, 2.27%)</title><rect x="85.2808%" y="308" width="2.2723%" height="15" fill="rgb(240,54,50)"/><text x="85.5308%" y="318.50">i..</text></g><g><title>__Pyx_Generator_Next (av/container/core.cpython-38-x86_64-linux-gnu.so) (494 samples, 3.33%)</title><rect x="84.2290%" y="228" width="3.3309%" height="15" fill="rgb(233,84,52)"/><text x="84.4790%" y="238.50">__P..</text></g><g><title>__Pyx_Coroutine_SendEx.isra.19 (av/container/core.cpython-38-x86_64-linux-gnu.so) (487 samples, 3.28%)</title><rect x="84.2762%" y="244" width="3.2837%" height="15" fill="rgb(207,117,47)"/><text x="84.5262%" y="254.50">__P..</text></g><g><title>__pyx_gb_2av_5video_6format_11VideoFormat_5_init_2generator (av/video/format.cpython-38-x86_64-linux-gnu.so) (480 samples, 3.24%)</title><rect x="84.3234%" y="260" width="3.2365%" height="15" fill="rgb(249,43,39)"/><text x="84.5734%" y="270.50">__p..</text></g><g><title>__pyx_tp_new_2av_5video_6format_VideoFormatComponent (av/video/format.cpython-38-x86_64-linux-gnu.so) (441 samples, 2.97%)</title><rect x="84.5863%" y="276" width="2.9735%" height="15" fill="rgb(209,38,44)"/><text x="84.8363%" y="286.50">__p..</text></g><g><title>VideoFormat__init (av/video/format.cpython-38-x86_64-linux-gnu.so) (567 samples, 3.82%)</title><rect x="83.8177%" y="212" width="3.8231%" height="15" fill="rgb(236,212,23)"/><text x="84.0677%" y="222.50">Vide..</text></g><g><title>__Pyx_Generator_Next (av/container/core.cpython-38-x86_64-linux-gnu.so) (12,851 samples, 86.65%)</title><rect x="1.0114%" y="68" width="86.6496%" height="15" fill="rgb(242,79,21)"/><text x="1.2614%" y="78.50">__Pyx_Generator_Next (av/container/core.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>__Pyx_Coroutine_SendEx.isra.19 (av/container/core.cpython-38-x86_64-linux-gnu.so) (12,850 samples, 86.64%)</title><rect x="1.0181%" y="84" width="86.6428%" height="15" fill="rgb(211,96,35)"/><text x="1.2681%" y="94.50">__Pyx_Coroutine_SendEx.isra.19 (av/container/core.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>__pyx_gb_2av_9container_5input_14InputContainer_11generator1 (av/container/input.cpython-38-x86_64-linux-gnu.so) (12,847 samples, 86.62%)</title><rect x="1.0384%" y="100" width="86.6226%" height="15" fill="rgb(253,215,40)"/><text x="1.2884%" y="110.50">__pyx_gb_2av_9container_5input_14InputContainer_11generator1 (av/container/input.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>decode (av/packet.cpython-38-x86_64-linux-gnu.so) (8,851 samples, 59.68%)</title><rect x="27.9819%" y="116" width="59.6791%" height="15" fill="rgb(211,81,21)"/><text x="28.2319%" y="126.50">decode (av/packet.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>decode (av/stream.cpython-38-x86_64-linux-gnu.so) (8,831 samples, 59.54%)</title><rect x="28.1168%" y="132" width="59.5442%" height="15" fill="rgb(208,190,38)"/><text x="28.3668%" y="142.50">decode (av/stream.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>CodecContext_decode (av/codec/context.cpython-38-x86_64-linux-gnu.so) (8,822 samples, 59.48%)</title><rect x="28.1775%" y="148" width="59.4835%" height="15" fill="rgb(235,213,38)"/><text x="28.4275%" y="158.50">CodecContext_decode (av/codec/context.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>VideoCodecContext__setup_decoded_frame (av/video/codeccontext.cpython-38-x86_64-linux-gnu.so) (587 samples, 3.96%)</title><rect x="83.7031%" y="164" width="3.9579%" height="15" fill="rgb(237,122,38)"/><text x="83.9531%" y="174.50">Vide..</text></g><g><title>VideoFrame__init_user_attributes (av/video/frame.cpython-38-x86_64-linux-gnu.so) (578 samples, 3.90%)</title><rect x="83.7637%" y="180" width="3.8972%" height="15" fill="rgb(244,218,35)"/><text x="84.0137%" y="190.50">Vide..</text></g><g><title>format_get_video_format (av/video/format.cpython-38-x86_64-linux-gnu.so) (575 samples, 3.88%)</title><rect x="83.7840%" y="196" width="3.8770%" height="15" fill="rgb(240,68,47)"/><text x="84.0340%" y="206.50">form..</text></g><g><title>&lt;module&gt; (PV_SOX5_pyav.py:11) (12,979 samples, 87.51%)</title><rect x="0.1551%" y="52" width="87.5126%" height="15" fill="rgb(210,16,53)"/><text x="0.4051%" y="62.50">&lt;module&gt; (PV_SOX5_pyav.py:11)</text></g><g><title>__vsnprintf_chk (libc-2.27.so) (153 samples, 1.03%)</title><rect x="92.1583%" y="244" width="1.0316%" height="15" fill="rgb(235,124,12)"/><text x="92.4083%" y="254.50"></text></g><g><title>0x7f359fda2e5d (libavformat.so.58.45.100) (374 samples, 2.52%)</title><rect x="90.9649%" y="196" width="2.5217%" height="15" fill="rgb(224,169,11)"/><text x="91.2149%" y="206.50">0x..</text></g><g><title>av_log (libavutil.so.56.51.100) (374 samples, 2.52%)</title><rect x="90.9649%" y="212" width="2.5217%" height="15" fill="rgb(250,166,2)"/><text x="91.2149%" y="222.50">av..</text></g><g><title>logging_log_callback (av/logging.cpython-38-x86_64-linux-gnu.so) (373 samples, 2.52%)</title><rect x="90.9716%" y="228" width="2.5150%" height="15" fill="rgb(242,216,29)"/><text x="91.2216%" y="238.50">lo..</text></g><g><title>0x7f359fd93a3a (libavformat.so.58.45.100) (691 samples, 4.66%)</title><rect x="89.9939%" y="164" width="4.6592%" height="15" fill="rgb(230,116,27)"/><text x="90.2439%" y="174.50">0x7f3..</text></g><g><title>0x7f359fd934fc (libavformat.so.58.45.100) (690 samples, 4.65%)</title><rect x="90.0007%" y="180" width="4.6524%" height="15" fill="rgb(228,99,48)"/><text x="90.2507%" y="190.50">0x7f3..</text></g><g><title>0x7f359fd934fc (libavformat.so.58.45.100) (692 samples, 4.67%)</title><rect x="89.9939%" y="148" width="4.6659%" height="15" fill="rgb(253,11,6)"/><text x="90.2439%" y="158.50">0x7f3..</text></g><g><title>0x7f359fd9c544 (libavformat.so.58.45.100) (695 samples, 4.69%)</title><rect x="89.9872%" y="132" width="4.6861%" height="15" fill="rgb(247,143,39)"/><text x="90.2372%" y="142.50">0x7f3..</text></g><g><title>avformat_open_input (libavformat.so.58.45.100) (768 samples, 5.18%)</title><rect x="89.9872%" y="116" width="5.1783%" height="15" fill="rgb(236,97,10)"/><text x="90.2372%" y="126.50">avform..</text></g><g><title>__pyx_tp_new_2av_9container_4core_Container (av/container/core.cpython-38-x86_64-linux-gnu.so) (841 samples, 5.67%)</title><rect x="89.5017%" y="100" width="5.6706%" height="15" fill="rgb(233,208,19)"/><text x="89.7517%" y="110.50">__pyx_t..</text></g><g><title>0x7f35a0981350 (libavcodec.so.58.91.100) (284 samples, 1.91%)</title><rect x="95.6577%" y="196" width="1.9149%" height="15" fill="rgb(216,164,2)"/><text x="95.9077%" y="206.50">0..</text></g><g><title>0x7f35a0859ae7 (libavcodec.so.58.91.100) (373 samples, 2.52%)</title><rect x="95.2532%" y="148" width="2.5150%" height="15" fill="rgb(220,129,5)"/><text x="95.5032%" y="158.50">0x..</text></g><g><title>0x7f35a0989120 (libavcodec.so.58.91.100) (313 samples, 2.11%)</title><rect x="95.6577%" y="164" width="2.1104%" height="15" fill="rgb(242,17,10)"/><text x="95.9077%" y="174.50">0..</text></g><g><title>0x7f35a0982f51 (libavcodec.so.58.91.100) (313 samples, 2.11%)</title><rect x="95.6577%" y="180" width="2.1104%" height="15" fill="rgb(242,107,0)"/><text x="95.9077%" y="190.50">0..</text></g><g><title>0x7f359fe5c65c (libavformat.so.58.45.100) (375 samples, 2.53%)</title><rect x="95.2532%" y="116" width="2.5285%" height="15" fill="rgb(251,28,31)"/><text x="95.5032%" y="126.50">0x..</text></g><g><title>avcodec_send_packet (libavcodec.so.58.91.100) (375 samples, 2.53%)</title><rect x="95.2532%" y="132" width="2.5285%" height="15" fill="rgb(233,223,10)"/><text x="95.5032%" y="142.50">av..</text></g><g><title>avformat_find_stream_info (libavformat.so.58.45.100) (558 samples, 3.76%)</title><rect x="95.1723%" y="100" width="3.7624%" height="15" fill="rgb(215,21,27)"/><text x="95.4223%" y="110.50">avfo..</text></g><g><title>__pyx_tp_new_2av_9container_5input_InputContainer (av/container/input.cpython-38-x86_64-linux-gnu.so) (1,557 samples, 10.50%)</title><rect x="89.4747%" y="84" width="10.4983%" height="15" fill="rgb(232,23,21)"/><text x="89.7247%" y="94.50">__pyx_tp_new_2a..</text></g><g><title>stream_wrap_stream (av/stream.cpython-38-x86_64-linux-gnu.so) (154 samples, 1.04%)</title><rect x="98.9347%" y="100" width="1.0384%" height="15" fill="rgb(244,5,23)"/><text x="99.1847%" y="110.50"></text></g><g><title>&lt;module&gt; (PV_SOX5_pyav.py:9) (1,618 samples, 10.91%)</title><rect x="89.0702%" y="52" width="10.9096%" height="15" fill="rgb(226,81,46)"/><text x="89.3202%" y="62.50">&lt;module&gt; (PV_SOX..</text></g><g><title>open (av/container/core.cpython-38-x86_64-linux-gnu.so) (1,561 samples, 10.53%)</title><rect x="89.4545%" y="68" width="10.5253%" height="15" fill="rgb(247,70,30)"/><text x="89.7045%" y="78.50">open (av/contai..</text></g><g><title>all (14,831 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>