<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="682" onload="init(evt)" viewBox="0 0 1200 682" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="682" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="671.00"> </text><svg id="frames" x="10" width="1180"><g><title>torch::class_&lt;vision::video::Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(c10::tagged_capsule&lt;vision::video::Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)#1}::operator() const (custom_class.h:104) (1,125 samples, 1.23%)</title><rect x="0.3132%" y="276" width="1.2321%" height="15" fill="rgb(227,0,7)"/><text x="0.5632%" y="286.50"></text></g><g><title>c10::make_intrusive&lt;vision::video::Video, c10::detail::intrusive_target_default_null_type&lt;vision::video::Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (intrusive_ptr.h:464) (1,125 samples, 1.23%)</title><rect x="0.3132%" y="292" width="1.2321%" height="15" fill="rgb(217,0,24)"/><text x="0.5632%" y="302.50"></text></g><g><title>c10::intrusive_ptr&lt;vision::video::Video, c10::detail::intrusive_target_default_null_type&lt;vision::video::Video&gt; &gt;::make&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (basic_string.h:647) (1,125 samples, 1.23%)</title><rect x="0.3132%" y="308" width="1.2321%" height="15" fill="rgb(221,193,54)"/><text x="0.5632%" y="318.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (basic_string.h:220) (1,125 samples, 1.23%)</title><rect x="0.3132%" y="324" width="1.2321%" height="15" fill="rgb(248,212,6)"/><text x="0.5632%" y="334.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (basic_string.h:211) (1,125 samples, 1.23%)</title><rect x="0.3132%" y="340" width="1.2321%" height="15" fill="rgb(208,68,35)"/><text x="0.5632%" y="350.50"></text></g><g><title>torch::detail::BoxedProxy&lt;void, torch::class_&lt;vision::video::Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(c10::tagged_capsule&lt;vision::video::Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)#1}&gt;::operator() (custom_class_detail.h:115) (1,126 samples, 1.23%)</title><rect x="0.3132%" y="196" width="1.2332%" height="15" fill="rgb(232,128,0)"/><text x="0.5632%" y="206.50"></text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::class_&lt;vision::video::Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(c10::tagged_capsule&lt;vision::video::Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)#1}, false&gt; (custom_class_detail.h:94) (1,126 samples, 1.23%)</title><rect x="0.3132%" y="212" width="1.2332%" height="15" fill="rgb(207,160,47)"/><text x="0.5632%" y="222.50"></text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::class_&lt;vision::video::Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(c10::tagged_capsule&lt;vision::video::Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)#1}, false, (unsigned long)0, (unsigned long)1, (unsigned long)2&gt; (custom_class_detail.h:81) (1,126 samples, 1.23%)</title><rect x="0.3132%" y="228" width="1.2332%" height="15" fill="rgb(228,23,34)"/><text x="0.5632%" y="238.50"></text></g><g><title>c10::tagged_capsule&lt;vision::video::Video&gt;::~tagged_capsule (ivalue_inl.h:44) (1,126 samples, 1.23%)</title><rect x="0.3132%" y="244" width="1.2332%" height="15" fill="rgb(218,30,26)"/><text x="0.5632%" y="254.50"></text></g><g><title>c10::IValue::~IValue (ivalue.h:193) (1,126 samples, 1.23%)</title><rect x="0.3132%" y="260" width="1.2332%" height="15" fill="rgb(220,122,19)"/><text x="0.5632%" y="270.50"></text></g><g><title>std::_Function_handler&lt;void (std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;), torch::class_&lt;vision::video::Video&gt;::defineMethod&lt;torch::class_&lt;vision::video::Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(c10::tagged_capsule&lt;vision::video::Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)#1}&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::class_&lt;vision::video::Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(c10::tagged_capsule&lt;vision::video::Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}&gt;::_M_invoke (std_function.h:316) (1,128 samples, 1.24%)</title><rect x="0.3132%" y="164" width="1.2354%" height="15" fill="rgb(250,228,42)"/><text x="0.5632%" y="174.50"></text></g><g><title>torch::class_&lt;vision::video::Video&gt;::defineMethod&lt;torch::class_&lt;vision::video::Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(c10::tagged_capsule&lt;vision::video::Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)#1}&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::class_&lt;vision::video::Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(c10::tagged_capsule&lt;vision::video::Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}::operator() (custom_class.h:276) (1,128 samples, 1.24%)</title><rect x="0.3132%" y="180" width="1.2354%" height="15" fill="rgb(240,193,28)"/><text x="0.5632%" y="190.50"></text></g><g><title>pybind11::cpp_function::dispatcher (libtorch_python.so) (1,132 samples, 1.24%)</title><rect x="0.3100%" y="100" width="1.2398%" height="15" fill="rgb(216,20,37)"/><text x="0.5600%" y="110.50"></text></g><g><title>pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::object, torch::jit::ScriptClass, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs)#1}, pybind11::object, torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::object, torch::jit::ScriptClass, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(torch::jit::ScriptClass*, pybind11::args&amp;&amp;, pybind11::kwargs)#1}, pybind11::object (*)(torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (libtorch_python.so) (1,131 samples, 1.24%)</title><rect x="0.3110%" y="116" width="1.2387%" height="15" fill="rgb(206,188,39)"/><text x="0.5610%" y="126.50"></text></g><g><title>torch::jit::ScriptClass::__call__ (libtorch_python.so) (1,131 samples, 1.24%)</title><rect x="0.3110%" y="132" width="1.2387%" height="15" fill="rgb(217,207,13)"/><text x="0.5610%" y="142.50"></text></g><g><title>torch::jit::runAndInsertCall (libtorch_python.so) (1,129 samples, 1.24%)</title><rect x="0.3132%" y="148" width="1.2365%" height="15" fill="rgb(231,73,38)"/><text x="0.5632%" y="158.50"></text></g><g><title>__init__ (torchvision/io/__init__.py:109) (1,135 samples, 1.24%)</title><rect x="0.3078%" y="84" width="1.2431%" height="15" fill="rgb(225,20,46)"/><text x="0.5578%" y="94.50"></text></g><g><title>&lt;module&gt; (PV_SOX5_newAPI.py:7) (1,143 samples, 1.25%)</title><rect x="0.3078%" y="68" width="1.2519%" height="15" fill="rgb(210,31,41)"/><text x="0.5578%" y="78.50"></text></g><g><title>ff_h264_decode_mb_cabac (h264_cabac.c:1942) (968 samples, 1.06%)</title><rect x="4.3897%" y="500" width="1.0602%" height="15" fill="rgb(221,200,47)"/><text x="4.6397%" y="510.50"></text></g><g><title>ff_h264_decode_mb_cabac (h264_cabac.c:2068) (1,000 samples, 1.10%)</title><rect x="6.2560%" y="500" width="1.0952%" height="15" fill="rgb(226,26,5)"/><text x="6.5060%" y="510.50"></text></g><g><title>decode_significance_8x8_x86 (h264_cabac.c:141) (961 samples, 1.05%)</title><rect x="12.0225%" y="580" width="1.0525%" height="15" fill="rgb(249,33,26)"/><text x="12.2725%" y="590.50"></text></g><g><title>decode_cabac_residual_internal (h264_cabac.c:1678) (969 samples, 1.06%)</title><rect x="12.0148%" y="564" width="1.0613%" height="15" fill="rgb(235,183,28)"/><text x="12.2648%" y="574.50"></text></g><g><title>decode_cabac_residual_nondc_internal (h264_cabac.c:1798) (1,528 samples, 1.67%)</title><rect x="11.9677%" y="548" width="1.6735%" height="15" fill="rgb(221,5,38)"/><text x="12.2177%" y="558.50"></text></g><g><title>decode_cabac_luma_residual (h264_cabac.c:1892) (1,614 samples, 1.77%)</title><rect x="11.9086%" y="516" width="1.7677%" height="15" fill="rgb(247,18,42)"/><text x="12.1586%" y="526.50"></text></g><g><title>decode_cabac_residual_nondc (h264_cabac.c:1859) (1,581 samples, 1.73%)</title><rect x="11.9447%" y="532" width="1.7316%" height="15" fill="rgb(241,131,45)"/><text x="12.1947%" y="542.50"></text></g><g><title>decode_cabac_residual_nondc_internal (h264_cabac.c:1798) (1,065 samples, 1.17%)</title><rect x="14.1702%" y="548" width="1.1664%" height="15" fill="rgb(249,31,29)"/><text x="14.4202%" y="558.50"></text></g><g><title>decode_cabac_luma_residual (h264_cabac.c:1899) (1,479 samples, 1.62%)</title><rect x="13.7541%" y="516" width="1.6199%" height="15" fill="rgb(225,111,53)"/><text x="14.0041%" y="526.50"></text></g><g><title>decode_cabac_residual_nondc (h264_cabac.c:1859) (1,122 samples, 1.23%)</title><rect x="14.1451%" y="532" width="1.2289%" height="15" fill="rgb(238,160,17)"/><text x="14.3951%" y="542.50"></text></g><g><title>ff_h264_decode_mb_cabac (h264_cabac.c:2430) (3,371 samples, 3.69%)</title><rect x="11.7771%" y="500" width="3.6921%" height="15" fill="rgb(214,148,48)"/><text x="12.0271%" y="510.50">ff_h..</text></g><g><title>decode_slice (h264_slice.c:2634) (11,176 samples, 12.24%)</title><rect x="3.8563%" y="484" width="12.2404%" height="15" fill="rgb(232,36,49)"/><text x="4.1063%" y="494.50">decode_slice (h264..</text></g><g><title>mc_part_weighted (h264_mb.c:460) (1,712 samples, 1.88%)</title><rect x="16.8854%" y="548" width="1.8751%" height="15" fill="rgb(209,103,24)"/><text x="17.1354%" y="558.50">m..</text></g><g><title>mc_part_420_simple_8 (h264_mc_template.c:54) (2,229 samples, 2.44%)</title><rect x="16.8503%" y="532" width="2.4413%" height="15" fill="rgb(229,88,8)"/><text x="17.1003%" y="542.50">mc..</text></g><g><title>hl_motion_420_simple_8 (h264_mc_template.c:103) (3,035 samples, 3.32%)</title><rect x="16.7923%" y="516" width="3.3241%" height="15" fill="rgb(213,181,19)"/><text x="17.0423%" y="526.50">hl_..</text></g><g><title>mc_dir_part (h264_mb.c:250) (1,267 samples, 1.39%)</title><rect x="20.3857%" y="564" width="1.3877%" height="15" fill="rgb(254,191,54)"/><text x="20.6357%" y="574.50"></text></g><g><title>mc_part_weighted (h264_mb.c:460) (1,606 samples, 1.76%)</title><rect x="20.2894%" y="548" width="1.7590%" height="15" fill="rgb(241,83,37)"/><text x="20.5394%" y="558.50"></text></g><g><title>mc_part_420_simple_8 (h264_mc_template.c:54) (2,085 samples, 2.28%)</title><rect x="20.2423%" y="532" width="2.2836%" height="15" fill="rgb(233,36,39)"/><text x="20.4923%" y="542.50">m..</text></g><g><title>hl_motion_420_simple_8 (h264_mc_template.c:119) (2,637 samples, 2.89%)</title><rect x="20.1634%" y="516" width="2.8882%" height="15" fill="rgb(226,3,54)"/><text x="20.4134%" y="526.50">hl..</text></g><g><title>mc_dir_part (h264_mb.c:250) (4,090 samples, 4.48%)</title><rect x="25.0230%" y="564" width="4.4795%" height="15" fill="rgb(245,192,40)"/><text x="25.2730%" y="574.50">mc_di..</text></g><g><title>mc_part_weighted (h264_mb.c:460) (4,655 samples, 5.10%)</title><rect x="24.9135%" y="548" width="5.0984%" height="15" fill="rgb(238,167,29)"/><text x="25.1635%" y="558.50">mc_par..</text></g><g><title>mc_part_weighted (h264_mb.c:469) (1,178 samples, 1.29%)</title><rect x="30.4379%" y="548" width="1.2902%" height="15" fill="rgb(232,182,51)"/><text x="30.6879%" y="558.50"></text></g><g><title>weight_h264_pixels16_8_c (h264dsp_template.c:95) (1,177 samples, 1.29%)</title><rect x="30.4390%" y="564" width="1.2891%" height="15" fill="rgb(231,60,39)"/><text x="30.6890%" y="574.50"></text></g><g><title>mc_part_420_simple_8 (h264_mc_template.c:54) (7,201 samples, 7.89%)</title><rect x="23.8566%" y="532" width="7.8868%" height="15" fill="rgb(208,69,12)"/><text x="24.1066%" y="542.50">mc_part_420..</text></g><g><title>mc_dir_part (h264_mb.c:250) (3,523 samples, 3.86%)</title><rect x="31.8464%" y="564" width="3.8585%" height="15" fill="rgb(235,93,37)"/><text x="32.0964%" y="574.50">mc_d..</text></g><g><title>mc_part_std (h264_mb.c:353) (4,051 samples, 4.44%)</title><rect x="31.7664%" y="548" width="4.4368%" height="15" fill="rgb(213,116,39)"/><text x="32.0164%" y="558.50">mc_pa..</text></g><g><title>mc_dir_part (h264_mb.c:250) (5,008 samples, 5.48%)</title><rect x="36.7498%" y="564" width="5.4850%" height="15" fill="rgb(222,207,29)"/><text x="36.9998%" y="574.50">mc_dir_..</text></g><g><title>mc_part_420_simple_8 (h264_mc_template.c:59) (10,231 samples, 11.21%)</title><rect x="31.7434%" y="532" width="11.2054%" height="15" fill="rgb(206,96,30)"/><text x="31.9934%" y="542.50">mc_part_420_simp..</text></g><g><title>mc_part_std (h264_mb.c:363) (5,786 samples, 6.34%)</title><rect x="36.6118%" y="548" width="6.3371%" height="15" fill="rgb(218,138,4)"/><text x="36.8618%" y="558.50">mc_part_..</text></g><g><title>hl_motion_420_simple_8 (h264_mc_template.c:85) (18,262 samples, 20.00%)</title><rect x="23.2706%" y="516" width="20.0013%" height="15" fill="rgb(250,191,14)"/><text x="23.5206%" y="526.50">hl_motion_420_simple_8 (h264_mc..</text></g><g><title>mc_part_weighted (h264_mb.c:460) (1,356 samples, 1.49%)</title><rect x="43.3464%" y="548" width="1.4851%" height="15" fill="rgb(239,60,40)"/><text x="43.5964%" y="558.50"></text></g><g><title>mc_part_420_simple_8 (h264_mc_template.c:54) (1,714 samples, 1.88%)</title><rect x="43.3245%" y="532" width="1.8772%" height="15" fill="rgb(206,27,48)"/><text x="43.5745%" y="542.50">m..</text></g><g><title>hl_motion_420_simple_8 (h264_mc_template.c:94) (2,357 samples, 2.58%)</title><rect x="43.2927%" y="516" width="2.5815%" height="15" fill="rgb(225,35,8)"/><text x="43.5427%" y="526.50">hl..</text></g><g><title>hl_decode_mb_simple_8 (h264_mb_template.c:180) (26,588 samples, 29.12%)</title><rect x="16.7923%" y="500" width="29.1203%" height="15" fill="rgb(250,213,24)"/><text x="17.0423%" y="510.50">hl_decode_mb_simple_8 (h264_mb_template.c:180)</text></g><g><title>ff_h264_idct8_add4_8_c (h264idct_template.c:199) (1,166 samples, 1.28%)</title><rect x="46.3375%" y="532" width="1.2771%" height="15" fill="rgb(247,123,22)"/><text x="46.5875%" y="542.50"></text></g><g><title>hl_decode_mb_idct_luma (h264_mb.c:773) (1,470 samples, 1.61%)</title><rect x="46.0276%" y="516" width="1.6100%" height="15" fill="rgb(231,138,38)"/><text x="46.2776%" y="526.50"></text></g><g><title>hl_decode_mb_simple_8 (h264_mb_template.c:190) (2,477 samples, 2.71%)</title><rect x="45.9126%" y="500" width="2.7129%" height="15" fill="rgb(231,145,46)"/><text x="46.1626%" y="510.50">hl..</text></g><g><title>decode_slice (h264_slice.c:2641) (30,513 samples, 33.42%)</title><rect x="16.1012%" y="484" width="33.4191%" height="15" fill="rgb(251,118,11)"/><text x="16.3512%" y="494.50">decode_slice (h264_slice.c:2641)</text></g><g><title>h264_h_loop_filter_luma_8_c (h264dsp_template.c:158) (2,147 samples, 2.35%)</title><rect x="52.3230%" y="580" width="2.3515%" height="15" fill="rgb(217,147,25)"/><text x="52.5730%" y="590.50">h..</text></g><g><title>filter_mb_edgev (h264_loopfilter.c:118) (2,235 samples, 2.45%)</title><rect x="52.2912%" y="564" width="2.4479%" height="15" fill="rgb(247,81,37)"/><text x="52.5412%" y="574.50">fi..</text></g><g><title>filter_mb_dir (h264_loopfilter.c:601) (2,437 samples, 2.67%)</title><rect x="52.2310%" y="548" width="2.6691%" height="15" fill="rgb(209,12,38)"/><text x="52.4810%" y="558.50">fi..</text></g><g><title>filter_mb_dir (h264_loopfilter.c:608) (1,222 samples, 1.34%)</title><rect x="54.9505%" y="548" width="1.3384%" height="15" fill="rgb(227,1,9)"/><text x="55.2005%" y="558.50"></text></g><g><title>h264_h_loop_filter_luma_8_c (h264dsp_template.c:158) (1,731 samples, 1.90%)</title><rect x="57.0106%" y="564" width="1.8959%" height="15" fill="rgb(248,47,43)"/><text x="57.2606%" y="574.50">h..</text></g><g><title>filter_mb_dir (h264_loopfilter.c:685) (1,812 samples, 1.98%)</title><rect x="56.9909%" y="548" width="1.9846%" height="15" fill="rgb(221,10,30)"/><text x="57.2409%" y="558.50">f..</text></g><g><title>ff_h264_filter_mb (h264_loopfilter.c:846) (7,773 samples, 8.51%)</title><rect x="51.3877%" y="532" width="8.5133%" height="15" fill="rgb(210,229,1)"/><text x="51.6377%" y="542.50">ff_h264_filt..</text></g><g><title>h264_v_loop_filter_luma_8_c (h264dsp_template.c:154) (2,139 samples, 2.34%)</title><rect x="60.8604%" y="580" width="2.3427%" height="15" fill="rgb(222,148,37)"/><text x="61.1104%" y="590.50">h..</text></g><g><title>filter_mb_edgeh (h264_loopfilter.c:208) (2,228 samples, 2.44%)</title><rect x="60.8374%" y="564" width="2.4402%" height="15" fill="rgb(234,67,33)"/><text x="61.0874%" y="574.50">fi..</text></g><g><title>filter_mb_dir (h264_loopfilter.c:612) (2,467 samples, 2.70%)</title><rect x="60.7881%" y="548" width="2.7020%" height="15" fill="rgb(247,98,35)"/><text x="61.0381%" y="558.50">fi..</text></g><g><title>filter_mb_dir (h264_loopfilter.c:619) (1,247 samples, 1.37%)</title><rect x="63.5514%" y="548" width="1.3658%" height="15" fill="rgb(247,138,52)"/><text x="63.8014%" y="558.50"></text></g><g><title>h264_v_loop_filter_luma_8_c (h264dsp_template.c:154) (1,991 samples, 2.18%)</title><rect x="65.6390%" y="564" width="2.1806%" height="15" fill="rgb(213,79,30)"/><text x="65.8890%" y="574.50">h..</text></g><g><title>filter_mb_dir (h264_loopfilter.c:704) (2,063 samples, 2.26%)</title><rect x="65.6149%" y="548" width="2.2595%" height="15" fill="rgb(246,177,23)"/><text x="65.8649%" y="558.50">f..</text></g><g><title>ff_h264_filter_mb (h264_loopfilter.c:847) (8,074 samples, 8.84%)</title><rect x="59.9010%" y="532" width="8.8430%" height="15" fill="rgb(230,62,27)"/><text x="60.1510%" y="542.50">ff_h264_filt..</text></g><g><title>ff_h264_filter_mb_fast (h264_loopfilter.c:426) (16,104 samples, 17.64%)</title><rect x="51.1796%" y="516" width="17.6378%" height="15" fill="rgb(216,154,8)"/><text x="51.4296%" y="526.50">ff_h264_filter_mb_fast (h26..</text></g><g><title>loop_filter (h264_slice.c:2505) (16,223 samples, 17.77%)</title><rect x="51.0766%" y="500" width="17.7681%" height="15" fill="rgb(244,35,45)"/><text x="51.3266%" y="510.50">loop_filter (h264_slice.c:25..</text></g><g><title>decode_slice (h264_slice.c:2675) (17,533 samples, 19.20%)</title><rect x="49.6462%" y="484" width="19.2029%" height="15" fill="rgb(251,115,12)"/><text x="49.8962%" y="494.50">decode_slice (h264_slice.c:267..</text></g><g><title>ff_h264_execute_decode_slices (h264_slice.c:2810) (59,540 samples, 65.21%)</title><rect x="3.7173%" y="468" width="65.2107%" height="15" fill="rgb(240,54,50)"/><text x="3.9673%" y="478.50">ff_h264_execute_decode_slices (h264_slice.c:2810)</text></g><g><title>decode_nal_units (h264dec.c:691) (59,543 samples, 65.21%)</title><rect x="3.7151%" y="452" width="65.2140%" height="15" fill="rgb(233,84,52)"/><text x="3.9651%" y="462.50">decode_nal_units (h264dec.c:691)</text></g><g><title>decode_simple_internal (decode.c:433) (60,334 samples, 66.08%)</title><rect x="2.8706%" y="420" width="66.0803%" height="15" fill="rgb(207,117,47)"/><text x="3.1206%" y="430.50">decode_simple_internal (decode.c:433)</text></g><g><title>h264_decode_frame (h264dec.c:996) (60,159 samples, 65.89%)</title><rect x="3.0623%" y="436" width="65.8887%" height="15" fill="rgb(249,43,39)"/><text x="3.3123%" y="446.50">h264_decode_frame (h264dec.c:996)</text></g><g><title>decode_receive_frame_internal (decode.c:647) (60,392 samples, 66.14%)</title><rect x="2.8411%" y="388" width="66.1439%" height="15" fill="rgb(209,38,44)"/><text x="3.0911%" y="398.50">decode_receive_frame_internal (decode.c:647)</text></g><g><title>decode_simple_receive_frame (decode.c:629) (60,392 samples, 66.14%)</title><rect x="2.8411%" y="404" width="66.1439%" height="15" fill="rgb(236,212,23)"/><text x="3.0911%" y="414.50">decode_simple_receive_frame (decode.c:629)</text></g><g><title>avcodec_send_packet (decode.c:706) (60,400 samples, 66.15%)</title><rect x="2.8411%" y="372" width="66.1526%" height="15" fill="rgb(242,79,21)"/><text x="3.0911%" y="382.50">avcodec_send_packet (decode.c:706)</text></g><g><title>ffmpeg::Stream::decodePacket (stream.cpp:145) (60,488 samples, 66.25%)</title><rect x="2.7469%" y="340" width="66.2490%" height="15" fill="rgb(211,96,35)"/><text x="2.9969%" y="350.50">ffmpeg::Stream::decodePacket (stream.cpp:145)</text></g><g><title>ffmpeg::Stream::analyzePacket (stream.cpp:99) (60,423 samples, 66.18%)</title><rect x="2.8181%" y="356" width="66.1778%" height="15" fill="rgb(253,215,40)"/><text x="3.0681%" y="366.50">ffmpeg::Stream::analyzePacket (stream.cpp:99)</text></g><g><title>yuv2rgb_c_24_rgb (yuv2rgb.c:356) (915 samples, 1.00%)</title><rect x="73.8478%" y="420" width="1.0021%" height="15" fill="rgb(211,81,21)"/><text x="74.0978%" y="430.50"></text></g><g><title>ffmpeg::VideoSampler::sample (video_sampler.cpp:182) (7,749 samples, 8.49%)</title><rect x="69.1010%" y="372" width="8.4870%" height="15" fill="rgb(208,190,38)"/><text x="69.3510%" y="382.50">ffmpeg::Vide..</text></g><g><title>transformImage (video_sampler.cpp:45) (7,744 samples, 8.48%)</title><rect x="69.1065%" y="388" width="8.4816%" height="15" fill="rgb(235,213,38)"/><text x="69.3565%" y="398.50">transformIma..</text></g><g><title>sws_scale (swscale.c:989) (7,713 samples, 8.45%)</title><rect x="69.1405%" y="404" width="8.4476%" height="15" fill="rgb(237,122,38)"/><text x="69.3905%" y="414.50">sws_scale (s..</text></g><g><title>ffmpeg::VideoStream::copyFrameBytes (video_stream.cpp:115) (7,824 samples, 8.57%)</title><rect x="69.0255%" y="356" width="8.5692%" height="15" fill="rgb(244,218,35)"/><text x="69.2755%" y="366.50">ffmpeg::Vide..</text></g><g><title>ffmpeg::Stream::decodePacket (stream.cpp:148) (7,871 samples, 8.62%)</title><rect x="68.9959%" y="340" width="8.6207%" height="15" fill="rgb(240,68,47)"/><text x="69.2459%" y="350.50">ffmpeg::Stre..</text></g><g><title>ffmpeg::Decoder::processPacket (decoder.cpp:622) (68,364 samples, 74.88%)</title><rect x="2.7425%" y="324" width="74.8751%" height="15" fill="rgb(210,16,53)"/><text x="2.9925%" y="334.50">ffmpeg::Decoder::processPacket (decoder.cpp:622)</text></g><g><title>ffmpeg::Decoder::getFrame (decoder.cpp:536) (68,399 samples, 74.91%)</title><rect x="2.7282%" y="308" width="74.9135%" height="15" fill="rgb(235,124,12)"/><text x="2.9782%" y="318.50">ffmpeg::Decoder::getFrame (decoder.cpp:536)</text></g><g><title>ffmpeg::SyncDecoder::decode (sync_decoder.cpp:72) (69,581 samples, 76.21%)</title><rect x="2.0032%" y="292" width="76.2081%" height="15" fill="rgb(224,169,11)"/><text x="2.2532%" y="302.50">ffmpeg::SyncDecoder::decode (sync_decoder.cpp:72)</text></g><g><title>vision::video::Video::Next (video.cpp:276) (69,877 samples, 76.53%)</title><rect x="1.9977%" y="276" width="76.5322%" height="15" fill="rgb(250,166,2)"/><text x="2.2477%" y="286.50">vision::video::Video::Next (video.cpp:276)</text></g><g><title>futex_wake (futex.h:66) (1,288 samples, 1.41%)</title><rect x="79.8202%" y="628" width="1.4107%" height="15" fill="rgb(242,216,29)"/><text x="80.0702%" y="638.50"></text></g><g><title>GOMP_parallel (parallel.c:171) (1,895 samples, 2.08%)</title><rect x="79.3864%" y="596" width="2.0755%" height="15" fill="rgb(230,116,27)"/><text x="79.6364%" y="606.50">G..</text></g><g><title>gomp_team_start (team.c:861) (1,499 samples, 1.64%)</title><rect x="79.8202%" y="612" width="1.6418%" height="15" fill="rgb(228,99,48)"/><text x="80.0702%" y="622.50"></text></g><g><title>do_spin (wait.h:56) (9,569 samples, 10.48%)</title><rect x="82.3447%" y="644" width="10.4804%" height="15" fill="rgb(253,11,6)"/><text x="82.5947%" y="654.50">do_spin (wait.h..</text></g><g><title>do_wait (wait.h:66) (12,059 samples, 13.21%)</title><rect x="82.3447%" y="628" width="13.2075%" height="15" fill="rgb(247,143,39)"/><text x="82.5947%" y="638.50">do_wait (wait.h:66)</text></g><g><title>do_spin (wait.h:57) (2,490 samples, 2.73%)</title><rect x="92.8251%" y="644" width="2.7272%" height="15" fill="rgb(236,97,10)"/><text x="93.0751%" y="654.50">do..</text></g><g><title>gomp_team_barrier_wait_end (bar.c:113) (14,006 samples, 15.34%)</title><rect x="82.3403%" y="612" width="15.3400%" height="15" fill="rgb(233,208,19)"/><text x="82.5903%" y="622.50">gomp_team_barrier_wait_..</text></g><g><title>do_wait (wait.h:67) (1,943 samples, 2.13%)</title><rect x="95.5522%" y="628" width="2.1281%" height="15" fill="rgb(216,164,2)"/><text x="95.8022%" y="638.50">d..</text></g><g><title>futex_wait (futex.h:44) (1,943 samples, 2.13%)</title><rect x="95.5522%" y="644" width="2.1281%" height="15" fill="rgb(220,129,5)"/><text x="95.8022%" y="654.50">f..</text></g><g><title>gomp_team_end (team.c:935) (14,022 samples, 15.36%)</title><rect x="82.3316%" y="596" width="15.3575%" height="15" fill="rgb(242,17,10)"/><text x="82.5816%" y="606.50">gomp_team_end (team.c:93..</text></g><g><title>at::TensorIteratorBase::for_each (libtorch_cpu.so) (16,795 samples, 18.39%)</title><rect x="79.3492%" y="564" width="18.3946%" height="15" fill="rgb(242,107,0)"/><text x="79.5992%" y="574.50">at::TensorIteratorBase::for_e..</text></g><g><title>at::TensorIteratorBase::for_each (libtorch_cpu.so) (16,789 samples, 18.39%)</title><rect x="79.3558%" y="580" width="18.3880%" height="15" fill="rgb(251,28,31)"/><text x="79.6058%" y="590.50">at::TensorIteratorBase::for_e..</text></g><g><title>at::native::(anonymous namespace)::fill_kernel (libtorch_cpu.so) (16,831 samples, 18.43%)</title><rect x="79.3153%" y="532" width="18.4340%" height="15" fill="rgb(233,223,10)"/><text x="79.5653%" y="542.50">at::native::(anonymous namesp..</text></g><g><title>at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::{lambda()#1}::operator() const (libtorch_cpu.so) (16,822 samples, 18.42%)</title><rect x="79.3251%" y="548" width="18.4242%" height="15" fill="rgb(215,21,27)"/><text x="79.5751%" y="558.50">at::native::(anonymous namesp..</text></g><g><title>at::native::fill_out (libtorch_cpu.so) (16,989 samples, 18.61%)</title><rect x="79.1455%" y="516" width="18.6071%" height="15" fill="rgb(232,23,21)"/><text x="79.3955%" y="526.50">at::native::fill_out (libtorc..</text></g><g><title>at::(anonymous namespace)::fill__Scalar (libtorch_cpu.so) (17,016 samples, 18.64%)</title><rect x="79.1323%" y="500" width="18.6366%" height="15" fill="rgb(244,5,23)"/><text x="79.3823%" y="510.50">at::(anonymous namespace)::fi..</text></g><g><title>at::native::zero_ (libtorch_cpu.so) (17,056 samples, 18.68%)</title><rect x="79.0940%" y="468" width="18.6805%" height="15" fill="rgb(226,81,46)"/><text x="79.3440%" y="478.50">at::native::zero_ (libtorch_c..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Scalar&gt; (libtorch_cpu.so) (17,036 samples, 18.66%)</title><rect x="79.1159%" y="484" width="18.6585%" height="15" fill="rgb(247,70,30)"/><text x="79.3659%" y="494.50">c10::Dispatcher::call&lt;at::Ten..</text></g><g><title>at::native::zeros (libtorch_cpu.so) (17,468 samples, 19.13%)</title><rect x="78.6450%" y="436" width="19.1317%" height="15" fill="rgb(212,68,19)"/><text x="78.8950%" y="446.50">at::native::zeros (libtorch_cp..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (libtorch_cpu.so) (17,065 samples, 18.69%)</title><rect x="79.0863%" y="452" width="18.6903%" height="15" fill="rgb(240,187,13)"/><text x="79.3363%" y="462.50">c10::Dispatcher::call&lt;at::Ten..</text></g><g><title>at::zeros (libtorch_cpu.so) (17,590 samples, 19.27%)</title><rect x="78.5475%" y="372" width="19.2653%" height="15" fill="rgb(223,113,26)"/><text x="78.7975%" y="382.50">at::zeros (libtorch_cpu.so)</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (libtorch_cpu.so) (17,571 samples, 19.24%)</title><rect x="78.5683%" y="388" width="19.2445%" height="15" fill="rgb(206,192,2)"/><text x="78.8183%" y="398.50">c10::Dispatcher::call&lt;at::Tens..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), &amp;at::(anonymous namespace)::zeros(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (libtorch_cpu.so) (17,532 samples, 19.20%)</title><rect x="78.6110%" y="404" width="19.2018%" height="15" fill="rgb(241,108,4)"/><text x="78.8610%" y="414.50">c10::impl::wrap_kernel_functor..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), &amp;c10::impl::detail::with_scattered_tensor_options_impl_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;), &amp;at::(anonymous namespace)::zeros(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;)&gt;, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt; &gt;, c10::guts::typelist::typelist&lt;&gt; &gt;::wrapper(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (libtorch_cpu.so) (17,513 samples, 19.18%)</title><rect x="78.6318%" y="420" width="19.1810%" height="15" fill="rgb(247,173,49)"/><text x="78.8818%" y="430.50">c10::impl::wrap_kernel_functor..</text></g><g><title>torch::zeros (variable_factories.h:358) (17,648 samples, 19.33%)</title><rect x="78.5343%" y="356" width="19.3288%" height="15" fill="rgb(224,114,35)"/><text x="78.7843%" y="366.50">torch::zeros (variable_factori..</text></g><g><title>at::Tensor::operator= &amp; (TensorBody.h:207) (17,652 samples, 19.33%)</title><rect x="78.5322%" y="292" width="19.3332%" height="15" fill="rgb(245,159,27)"/><text x="78.7822%" y="302.50">at::Tensor::operator= &amp; (Tenso..</text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::operator= &amp; (intrusive_ptr.h:318) (17,652 samples, 19.33%)</title><rect x="78.5322%" y="308" width="19.3332%" height="15" fill="rgb(245,172,44)"/><text x="78.7822%" y="318.50">c10::intrusive_ptr&lt;c10::Tensor..</text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::operator=&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt; &amp; (intrusive_ptr.h:328) (17,652 samples, 19.33%)</title><rect x="78.5322%" y="324" width="19.3332%" height="15" fill="rgb(236,23,11)"/><text x="78.7822%" y="334.50">c10::intrusive_ptr&lt;c10::Tensor..</text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::swap (intrusive_ptr.h:367) (17,652 samples, 19.33%)</title><rect x="78.5322%" y="340" width="19.3332%" height="15" fill="rgb(205,117,38)"/><text x="78.7822%" y="350.50">c10::intrusive_ptr&lt;c10::Tensor..</text></g><g><title>vision::video::Video::Next (video.cpp:293) (17,684 samples, 19.37%)</title><rect x="78.5322%" y="276" width="19.3683%" height="15" fill="rgb(237,72,25)"/><text x="78.7822%" y="286.50">vision::video::Video::Next (vi..</text></g><g><title>vision::video::Video::Next (video.cpp:295) (1,043 samples, 1.14%)</title><rect x="97.9125%" y="276" width="1.1423%" height="15" fill="rgb(244,70,9)"/><text x="98.1625%" y="286.50"></text></g><g><title>torch::detail::BoxedProxy&lt;std::tuple&lt;at::Tensor, double&gt;, torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt; &gt;::operator() (custom_class_detail.h:104) (88,790 samples, 97.25%)</title><rect x="1.9725%" y="212" width="97.2466%" height="15" fill="rgb(217,125,39)"/><text x="2.2225%" y="222.50">torch::detail::BoxedProxy&lt;std::tuple&lt;at::Tensor, double&gt;, torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt; &gt;::operator() (cus..</text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt;, false&gt; (custom_class_detail.h:95) (88,790 samples, 97.25%)</title><rect x="1.9725%" y="228" width="97.2466%" height="15" fill="rgb(235,36,10)"/><text x="2.2225%" y="238.50">torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt;, false&gt; (custom_class_detail..</text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt;, false, (unsigned long)0&gt; (custom_class_detail.h:86) (88,790 samples, 97.25%)</title><rect x="1.9725%" y="244" width="97.2466%" height="15" fill="rgb(251,123,47)"/><text x="2.2225%" y="254.50">torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt;, false, (unsigned long)0&gt; (c..</text></g><g><title>c10::intrusive_ptr&lt;vision::video::Video, c10::detail::intrusive_target_default_null_type&lt;vision::video::Video&gt; &gt;::~intrusive_ptr (intrusive_ptr.h:314) (88,771 samples, 97.23%)</title><rect x="1.9933%" y="260" width="97.2258%" height="15" fill="rgb(221,13,13)"/><text x="2.2433%" y="270.50">c10::intrusive_ptr&lt;vision::video::Video, c10::detail::intrusive_target_default_null_type&lt;vision::video::Video&gt; &gt;::~intrusive_ptr (intrusive_ptr.h:314)</text></g><g><title>std::_Function_handler&lt;void (std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;), torch::class_&lt;vision::video::Video&gt;::defineMethod&lt;torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}&gt;::_M_invoke (std_function.h:316) (88,820 samples, 97.28%)</title><rect x="1.9725%" y="180" width="97.2794%" height="15" fill="rgb(238,131,9)"/><text x="2.2225%" y="190.50">std::_Function_handler&lt;void (std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;), torch::class_&lt;vision::video::Video&gt;::defineMethod&lt;torch::detail::WrapMethod..</text></g><g><title>torch::class_&lt;vision::video::Video&gt;::defineMethod&lt;torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}::operator() (custom_class.h:276) (88,820 samples, 97.28%)</title><rect x="1.9725%" y="196" width="97.2794%" height="15" fill="rgb(211,50,8)"/><text x="2.2225%" y="206.50">torch::class_&lt;vision::video::Video&gt;::defineMethod&lt;torch::detail::WrapMethod&lt;std::tuple&lt;at::Tensor, double&gt; (vision::video::Video::*)()&gt; &gt;(std::__cxx11::basic_stri..</text></g><g><title>pybind11::cpp_function::initialize&lt;torch::jit::initJitScriptBindings(_object*)::{lambda(pybind11::args, pybind11::kwargs)#50}, pybind11::object, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(torch::jit::initJitScriptBindings(_object*)::{lambda(pybind11::args&amp;&amp;, pybind11::kwargs)#50}, pybind11::object (*)(pybind11::args, pybind11::kwargs), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (libtorch_python.so) (89,272 samples, 97.77%)</title><rect x="1.8301%" y="116" width="97.7745%" height="15" fill="rgb(245,182,24)"/><text x="2.0801%" y="126.50">pybind11::cpp_function::initialize&lt;torch::jit::initJitScriptBindings(_object*)::{lambda(pybind11::args, pybind11::kwargs)#50}, pybind11::object, pybind11::args, py..</text></g><g><title>torch::jit::initJitScriptBindings(_object*)::{lambda(pybind11::args, pybind11::kwargs)#50}::operator() const (libtorch_python.so) (89,264 samples, 97.77%)</title><rect x="1.8389%" y="132" width="97.7657%" height="15" fill="rgb(242,14,37)"/><text x="2.0889%" y="142.50">torch::jit::initJitScriptBindings(_object*)::{lambda(pybind11::args, pybind11::kwargs)#50}::operator() const (libtorch_python.so)</text></g><g><title>torch::jit::invokeScriptMethodFromPython (libtorch_python.so) (89,221 samples, 97.72%)</title><rect x="1.8860%" y="148" width="97.7186%" height="15" fill="rgb(246,228,12)"/><text x="2.1360%" y="158.50">torch::jit::invokeScriptMethodFromPython (libtorch_python.so)</text></g><g><title>torch::jit::runAndInsertCall (libtorch_python.so) (89,192 samples, 97.69%)</title><rect x="1.9178%" y="164" width="97.6868%" height="15" fill="rgb(213,55,15)"/><text x="2.1678%" y="174.50">torch::jit::runAndInsertCall (libtorch_python.so)</text></g><g><title>pybind11::cpp_function::dispatcher (libtorch_python.so) (89,522 samples, 98.05%)</title><rect x="1.7874%" y="100" width="98.0483%" height="15" fill="rgb(209,9,3)"/><text x="2.0374%" y="110.50">pybind11::cpp_function::dispatcher (libtorch_python.so)</text></g><g><title>__next__ (torchvision/io/__init__.py:123) (89,741 samples, 98.29%)</title><rect x="1.6144%" y="84" width="98.2881%" height="15" fill="rgb(230,59,30)"/><text x="1.8644%" y="94.50">__next__ (torchvision/io/__init__.py:123)</text></g><g><title>&lt;module&gt; (PV_SOX5_newAPI.py:8) (89,861 samples, 98.42%)</title><rect x="1.5596%" y="68" width="98.4196%" height="15" fill="rgb(209,121,21)"/><text x="1.8096%" y="78.50">&lt;module&gt; (PV_SOX5_newAPI.py:8)</text></g><g><title>all (91,304 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="62.50"></text></g></svg></svg>