<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>__vsnprintf_chk (libc-2.27.so) (191 samples, 1.01%)</title><rect x="3.6486%" y="260" width="1.0085%" height="15" fill="rgb(227,0,7)"/><text x="3.8986%" y="270.50"></text></g><g><title>0x7fee98f05a47 (libavformat.so.58.45.100) (456 samples, 2.41%)</title><rect x="2.6348%" y="212" width="2.4077%" height="15" fill="rgb(217,0,24)"/><text x="2.8848%" y="222.50">0x..</text></g><g><title>av_log (libavutil.so.56.51.100) (456 samples, 2.41%)</title><rect x="2.6348%" y="228" width="2.4077%" height="15" fill="rgb(221,193,54)"/><text x="2.8848%" y="238.50">av..</text></g><g><title>logging_log_callback (av/logging.cpython-38-x86_64-linux-gnu.so) (453 samples, 2.39%)</title><rect x="2.6506%" y="244" width="2.3919%" height="15" fill="rgb(248,212,6)"/><text x="2.9006%" y="254.50">lo..</text></g><g><title>0x7fee98fc8dea (libavformat.so.58.45.100) (657 samples, 3.47%)</title><rect x="2.5345%" y="196" width="3.4690%" height="15" fill="rgb(208,68,35)"/><text x="2.7845%" y="206.50">0x7..</text></g><g><title>0x7fee98fc9b24 (libavformat.so.58.45.100) (669 samples, 3.53%)</title><rect x="2.5081%" y="180" width="3.5324%" height="15" fill="rgb(232,128,0)"/><text x="2.7581%" y="190.50">0x7..</text></g><g><title>av_read_frame (libavformat.so.58.45.100) (944 samples, 4.98%)</title><rect x="2.2546%" y="164" width="4.9844%" height="15" fill="rgb(207,160,47)"/><text x="2.5046%" y="174.50">av_rea..</text></g><g><title>__Pyx_Generator_Next (av/container/core.cpython-38-x86_64-linux-gnu.so) (1,259 samples, 6.65%)</title><rect x="0.6125%" y="116" width="6.6477%" height="15" fill="rgb(228,23,34)"/><text x="0.8625%" y="126.50">__Pyx_Gen..</text></g><g><title>__Pyx_Coroutine_SendEx.isra.19 (av/container/core.cpython-38-x86_64-linux-gnu.so) (1,257 samples, 6.64%)</title><rect x="0.6231%" y="132" width="6.6371%" height="15" fill="rgb(218,30,26)"/><text x="0.8731%" y="142.50">__Pyx_Cor..</text></g><g><title>__pyx_gb_2av_9container_5input_14InputContainer_8generator (av/container/input.cpython-38-x86_64-linux-gnu.so) (1,257 samples, 6.64%)</title><rect x="0.6231%" y="148" width="6.6371%" height="15" fill="rgb(220,122,19)"/><text x="0.8731%" y="158.50">__pyx_gb_..</text></g><g><title>CodecContext__recv_frame (av/codec/context.cpython-38-x86_64-linux-gnu.so) (210 samples, 1.11%)</title><rect x="7.6456%" y="180" width="1.1088%" height="15" fill="rgb(250,228,42)"/><text x="7.8956%" y="190.50"></text></g><g><title>0x7fee99ad8fb5 (libavcodec.so.58.91.100) (284 samples, 1.50%)</title><rect x="10.1853%" y="244" width="1.4996%" height="15" fill="rgb(240,193,28)"/><text x="10.4353%" y="254.50"></text></g><g><title>av_frame_unref (libavutil.so.56.51.100) (225 samples, 1.19%)</title><rect x="10.4969%" y="260" width="1.1880%" height="15" fill="rgb(216,20,37)"/><text x="10.7469%" y="270.50"></text></g><g><title>0x7fee99ae8e5c (libavcodec.so.58.91.100) (619 samples, 3.27%)</title><rect x="9.8791%" y="228" width="3.2684%" height="15" fill="rgb(206,188,39)"/><text x="10.1291%" y="238.50">0x7..</text></g><g><title>av_buffer_ref (libavutil.so.56.51.100) (264 samples, 1.39%)</title><rect x="13.4273%" y="292" width="1.3939%" height="15" fill="rgb(217,207,13)"/><text x="13.6773%" y="302.50"></text></g><g><title>0x7fee99e5f9d8 (libavcodec.so.58.91.100) (301 samples, 1.59%)</title><rect x="13.2531%" y="260" width="1.5893%" height="15" fill="rgb(231,73,38)"/><text x="13.5031%" y="270.50"></text></g><g><title>av_frame_ref (libavutil.so.56.51.100) (301 samples, 1.59%)</title><rect x="13.2531%" y="276" width="1.5893%" height="15" fill="rgb(225,20,46)"/><text x="13.5031%" y="286.50"></text></g><g><title>0x7fee99ad9085 (libavcodec.so.58.91.100) (380 samples, 2.01%)</title><rect x="13.2425%" y="244" width="2.0064%" height="15" fill="rgb(210,31,41)"/><text x="13.4925%" y="254.50">0..</text></g><g><title>0x7fee99ae8e78 (libavcodec.so.58.91.100) (789 samples, 4.17%)</title><rect x="13.2425%" y="228" width="4.1660%" height="15" fill="rgb(221,200,47)"/><text x="13.4925%" y="238.50">0x7fe..</text></g><g><title>0x7fee99d63bd9 (libavcodec.so.58.91.100) (1,931 samples, 10.20%)</title><rect x="9.0659%" y="212" width="10.1959%" height="15" fill="rgb(226,26,5)"/><text x="9.3159%" y="222.50">0x7fee99d63bd9 ..</text></g><g><title>0x7fee999c0916 (libavcodec.so.58.91.100) (2,500 samples, 13.20%)</title><rect x="8.9603%" y="196" width="13.2003%" height="15" fill="rgb(249,33,26)"/><text x="9.2103%" y="206.50">0x7fee999c0916 (liba..</text></g><g><title>0x7fee99d640f4 (libavcodec.so.58.91.100) (311 samples, 1.64%)</title><rect x="20.5185%" y="212" width="1.6421%" height="15" fill="rgb(235,183,28)"/><text x="20.7685%" y="222.50"></text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (311 samples, 1.64%)</title><rect x="20.5185%" y="228" width="1.6421%" height="15" fill="rgb(221,5,38)"/><text x="20.7685%" y="238.50"></text></g><g><title>CodecContext__send_packet_and_recv (av/codec/context.cpython-38-x86_64-linux-gnu.so) (2,796 samples, 14.76%)</title><rect x="7.5981%" y="164" width="14.7632%" height="15" fill="rgb(247,18,42)"/><text x="7.8481%" y="174.50">CodecContext__send_pack..</text></g><g><title>avcodec_send_packet (libavcodec.so.58.91.100) (2,576 samples, 13.60%)</title><rect x="8.7597%" y="180" width="13.6016%" height="15" fill="rgb(241,131,45)"/><text x="9.0097%" y="190.50">avcodec_send_packet (..</text></g><g><title>__Pyx_Generator_Next (av/container/core.cpython-38-x86_64-linux-gnu.so) (4,326 samples, 22.84%)</title><rect x="0.4858%" y="68" width="22.8418%" height="15" fill="rgb(249,31,29)"/><text x="0.7358%" y="78.50">__Pyx_Generator_Next (av/container/c..</text></g><g><title>__Pyx_Coroutine_SendEx.isra.19 (av/container/core.cpython-38-x86_64-linux-gnu.so) (4,325 samples, 22.84%)</title><rect x="0.4911%" y="84" width="22.8365%" height="15" fill="rgb(225,111,53)"/><text x="0.7411%" y="94.50">__Pyx_Coroutine_SendEx.isra.19 (av/c..</text></g><g><title>__pyx_gb_2av_9container_5input_14InputContainer_11generator1 (av/container/input.cpython-38-x86_64-linux-gnu.so) (4,321 samples, 22.82%)</title><rect x="0.5122%" y="100" width="22.8154%" height="15" fill="rgb(238,160,17)"/><text x="0.7622%" y="110.50">__pyx_gb_2av_9container_5input_14Inp..</text></g><g><title>decode (av/packet.cpython-38-x86_64-linux-gnu.so) (3,019 samples, 15.94%)</title><rect x="7.3869%" y="116" width="15.9407%" height="15" fill="rgb(214,148,48)"/><text x="7.6369%" y="126.50">decode (av/packet.cpython..</text></g><g><title>decode (av/stream.cpython-38-x86_64-linux-gnu.so) (3,005 samples, 15.87%)</title><rect x="7.4608%" y="132" width="15.8667%" height="15" fill="rgb(232,36,49)"/><text x="7.7108%" y="142.50">decode (av/stream.cpytho..</text></g><g><title>CodecContext_decode (av/codec/context.cpython-38-x86_64-linux-gnu.so) (2,997 samples, 15.82%)</title><rect x="7.5030%" y="148" width="15.8245%" height="15" fill="rgb(209,103,24)"/><text x="7.7530%" y="158.50">CodecContext_decode (av/..</text></g><g><title>__pyx_tp_dealloc_2av_5video_5frame_VideoFrame (av/video/frame.cpython-38-x86_64-linux-gnu.so) (215 samples, 1.14%)</title><rect x="23.3275%" y="68" width="1.1352%" height="15" fill="rgb(229,88,8)"/><text x="23.5775%" y="78.50"></text></g><g><title>&lt;module&gt; (PV_SOX5_pyav.py:11) (4,599 samples, 24.28%)</title><rect x="0.1848%" y="52" width="24.2832%" height="15" fill="rgb(213,181,19)"/><text x="0.4348%" y="62.50">&lt;module&gt; (PV_SOX5_pyav.py:11)</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:988) (376 samples, 1.99%)</title><rect x="38.9514%" y="100" width="1.9853%" height="15" fill="rgb(254,191,54)"/><text x="39.2014%" y="110.50">_..</text></g><g><title>__xstat64 (libc-2.27.so) (205 samples, 1.08%)</title><rect x="44.7701%" y="228" width="1.0824%" height="15" fill="rgb(241,83,37)"/><text x="45.0201%" y="238.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;:87) (313 samples, 1.65%)</title><rect x="44.2051%" y="196" width="1.6527%" height="15" fill="rgb(233,36,39)"/><text x="44.4551%" y="206.50"></text></g><g><title>os_stat (python3.8) (293 samples, 1.55%)</title><rect x="44.3107%" y="212" width="1.5471%" height="15" fill="rgb(226,3,54)"/><text x="44.5607%" y="222.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1439) (351 samples, 1.85%)</title><rect x="44.0097%" y="180" width="1.8533%" height="15" fill="rgb(245,192,40)"/><text x="44.2597%" y="190.50">f..</text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1466) (256 samples, 1.35%)</title><rect x="46.0848%" y="180" width="1.3517%" height="15" fill="rgb(238,167,29)"/><text x="46.3348%" y="190.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1314) (812 samples, 4.29%)</title><rect x="43.8724%" y="164" width="4.2874%" height="15" fill="rgb(232,182,51)"/><text x="44.1224%" y="174.50">_get_..</text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1342) (957 samples, 5.05%)</title><rect x="43.4236%" y="148" width="5.0531%" height="15" fill="rgb(231,60,39)"/><text x="43.6736%" y="158.50">find_s..</text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:914) (1,100 samples, 5.81%)</title><rect x="42.7214%" y="132" width="5.8081%" height="15" fill="rgb(208,69,12)"/><text x="42.9714%" y="142.50">_find_s..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:971) (1,212 samples, 6.40%)</title><rect x="42.1458%" y="116" width="6.3995%" height="15" fill="rgb(235,93,37)"/><text x="42.3958%" y="126.50">_find_an..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (1,586 samples, 8.37%)</title><rect x="41.0159%" y="100" width="8.3743%" height="15" fill="rgb(213,116,39)"/><text x="41.2659%" y="110.50">_find_and_lo..</text></g><g><title>__Pyx_Import (av/video/frame.cpython-38-x86_64-linux-gnu.so) (2,262 samples, 11.94%)</title><rect x="37.9006%" y="84" width="11.9436%" height="15" fill="rgb(222,207,29)"/><text x="38.1506%" y="94.50">__Pyx_Import (av/v..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:988) (206 samples, 1.09%)</title><rect x="51.5233%" y="116" width="1.0877%" height="15" fill="rgb(206,96,30)"/><text x="51.7733%" y="126.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1466) (216 samples, 1.14%)</title><rect x="56.1856%" y="196" width="1.1405%" height="15" fill="rgb(218,138,4)"/><text x="56.4356%" y="206.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1314) (573 samples, 3.03%)</title><rect x="54.9290%" y="180" width="3.0255%" height="15" fill="rgb(250,191,14)"/><text x="55.1790%" y="190.50">_ge..</text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1342) (685 samples, 3.62%)</title><rect x="54.5805%" y="164" width="3.6169%" height="15" fill="rgb(239,60,40)"/><text x="54.8305%" y="174.50">find..</text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:914) (787 samples, 4.16%)</title><rect x="54.1000%" y="148" width="4.1554%" height="15" fill="rgb(206,27,48)"/><text x="54.3500%" y="158.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:971) (899 samples, 4.75%)</title><rect x="53.5509%" y="132" width="4.7468%" height="15" fill="rgb(225,35,8)"/><text x="53.8009%" y="142.50">_find_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (1,153 samples, 6.09%)</title><rect x="52.7219%" y="116" width="6.0880%" height="15" fill="rgb(250,213,24)"/><text x="52.9719%" y="126.50">_find_an..</text></g><g><title>__Pyx_Import (av/video/frame.cpython-38-x86_64-linux-gnu.so) (1,518 samples, 8.02%)</title><rect x="50.9636%" y="100" width="8.0152%" height="15" fill="rgb(247,123,22)"/><text x="51.2136%" y="110.50">__Pyx_Impor..</text></g><g><title>PyArray_AssignArray (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2,067 samples, 10.91%)</title><rect x="59.4435%" y="164" width="10.9140%" height="15" fill="rgb(231,138,38)"/><text x="59.6935%" y="174.50">PyArray_AssignAr..</text></g><g><title>raw_array_assign_array (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2,051 samples, 10.83%)</title><rect x="59.5280%" y="180" width="10.8295%" height="15" fill="rgb(231,145,46)"/><text x="59.7780%" y="190.50">raw_array_assign..</text></g><g><title>PyArray_NewCopy (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2,119 samples, 11.19%)</title><rect x="59.4382%" y="148" width="11.1886%" height="15" fill="rgb(251,118,11)"/><text x="59.6882%" y="158.50">PyArray_NewCopy ..</text></g><g><title>PyArray_Newshape (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2,136 samples, 11.28%)</title><rect x="59.3907%" y="132" width="11.2783%" height="15" fill="rgb(217,147,25)"/><text x="59.6407%" y="142.50">PyArray_Newshape ..</text></g><g><title>__Pyx__PyObject_CallOneArg (av/video/frame.cpython-38-x86_64-linux-gnu.so) (2,215 samples, 11.70%)</title><rect x="58.9788%" y="100" width="11.6954%" height="15" fill="rgb(247,81,37)"/><text x="59.2288%" y="110.50">__Pyx__PyObject_C..</text></g><g><title>array_reshape (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (2,202 samples, 11.63%)</title><rect x="59.0475%" y="116" width="11.6268%" height="15" fill="rgb(209,12,38)"/><text x="59.2975%" y="126.50">array_reshape (nu..</text></g><g><title>frame_useful_array (av/video/frame.cpython-38-x86_64-linux-gnu.so) (3,967 samples, 20.95%)</title><rect x="50.6415%" y="84" width="20.9462%" height="15" fill="rgb(227,1,9)"/><text x="50.8915%" y="94.50">frame_useful_array (av/video/fram..</text></g><g><title>to_ndarray (av/video/frame.cpython-38-x86_64-linux-gnu.so) (6,629 samples, 35.00%)</title><rect x="37.5627%" y="68" width="35.0018%" height="15" fill="rgb(248,47,43)"/><text x="37.8127%" y="78.50">to_ndarray (av/video/frame.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>0x7fee9b8257d8 (libc-2.27.so) (228 samples, 1.20%)</title><rect x="75.9280%" y="244" width="1.2039%" height="15" fill="rgb(221,10,30)"/><text x="76.1780%" y="254.50"></text></g><g><title>av_mallocz (libavutil.so.56.51.100) (419 samples, 2.21%)</title><rect x="75.0356%" y="180" width="2.2124%" height="15" fill="rgb(210,229,1)"/><text x="75.2856%" y="190.50">a..</text></g><g><title>av_malloc (libavutil.so.56.51.100) (312 samples, 1.65%)</title><rect x="75.6006%" y="196" width="1.6474%" height="15" fill="rgb(222,148,37)"/><text x="75.8506%" y="206.50"></text></g><g><title>posix_memalign (libc-2.27.so) (312 samples, 1.65%)</title><rect x="75.6006%" y="212" width="1.6474%" height="15" fill="rgb(234,67,33)"/><text x="75.8506%" y="222.50"></text></g><g><title>0x7fee9b8264eb (libc-2.27.so) (309 samples, 1.63%)</title><rect x="75.6165%" y="228" width="1.6316%" height="15" fill="rgb(247,98,35)"/><text x="75.8665%" y="238.50"></text></g><g><title>sws_alloc_context (libswscale.so.5.7.100) (450 samples, 2.38%)</title><rect x="75.0251%" y="164" width="2.3760%" height="15" fill="rgb(247,138,52)"/><text x="75.2751%" y="174.50">sw..</text></g><g><title>0x7fee99093364 (libswscale.so.5.7.100) (750 samples, 3.96%)</title><rect x="86.8842%" y="180" width="3.9601%" height="15" fill="rgb(213,79,30)"/><text x="87.1342%" y="190.50">0x7f..</text></g><g><title>sws_getCachedContext (libswscale.so.5.7.100) (3,894 samples, 20.56%)</title><rect x="74.5340%" y="148" width="20.5607%" height="15" fill="rgb(246,177,23)"/><text x="74.7840%" y="158.50">sws_getCachedContext (libswscale..</text></g><g><title>sws_init_context (libswscale.so.5.7.100) (3,351 samples, 17.69%)</title><rect x="77.4011%" y="164" width="17.6936%" height="15" fill="rgb(230,62,27)"/><text x="77.6511%" y="174.50">sws_init_context (libswscal..</text></g><g><title>sws_setColorspaceDetails (libswscale.so.5.7.100) (489 samples, 2.58%)</title><rect x="92.5128%" y="180" width="2.5820%" height="15" fill="rgb(216,154,8)"/><text x="92.7628%" y="190.50">sw..</text></g><g><title>VideoReformatter__reformat (av/video/reformatter.cpython-38-x86_64-linux-gnu.so) (4,173 samples, 22.03%)</title><rect x="73.2774%" y="132" width="22.0339%" height="15" fill="rgb(244,35,45)"/><text x="73.5274%" y="142.50">VideoReformatter__reformat (av/vide..</text></g><g><title>&lt;module&gt; (PV_SOX5_pyav.py:12) (13,485 samples, 71.20%)</title><rect x="24.4680%" y="52" width="71.2023%" height="15" fill="rgb(251,115,12)"/><text x="24.7180%" y="62.50">&lt;module&gt; (PV_SOX5_pyav.py:12)</text></g><g><title>to_rgb (av/video/frame.cpython-38-x86_64-linux-gnu.so) (4,376 samples, 23.11%)</title><rect x="72.5645%" y="68" width="23.1058%" height="15" fill="rgb(240,54,50)"/><text x="72.8145%" y="78.50">to_rgb (av/video/frame.cpython-38-x86..</text></g><g><title>reformat (av/video/frame.cpython-38-x86_64-linux-gnu.so) (4,345 samples, 22.94%)</title><rect x="72.7282%" y="84" width="22.9421%" height="15" fill="rgb(233,84,52)"/><text x="72.9782%" y="94.50">reformat (av/video/frame.cpython-38-..</text></g><g><title>reformat (av/video/reformatter.cpython-38-x86_64-linux-gnu.so) (4,296 samples, 22.68%)</title><rect x="72.9870%" y="100" width="22.6834%" height="15" fill="rgb(207,117,47)"/><text x="73.2370%" y="110.50">reformat (av/video/reformatter.cpyth..</text></g><g><title>reformat (av/video/reformatter.cpython-38-x86_64-linux-gnu.so) (4,284 samples, 22.62%)</title><rect x="73.0503%" y="116" width="22.6200%" height="15" fill="rgb(249,43,39)"/><text x="73.3003%" y="126.50">reformat (av/video/reformatter.cpyth..</text></g><g><title>0x7fee98f09e5d (libavformat.so.58.45.100) (205 samples, 1.08%)</title><rect x="96.6102%" y="196" width="1.0824%" height="15" fill="rgb(209,38,44)"/><text x="96.8602%" y="206.50"></text></g><g><title>av_log (libavutil.so.56.51.100) (205 samples, 1.08%)</title><rect x="96.6102%" y="212" width="1.0824%" height="15" fill="rgb(236,212,23)"/><text x="96.8602%" y="222.50"></text></g><g><title>logging_log_callback (av/logging.cpython-38-x86_64-linux-gnu.so) (203 samples, 1.07%)</title><rect x="96.6207%" y="228" width="1.0719%" height="15" fill="rgb(242,79,21)"/><text x="96.8707%" y="238.50"></text></g><g><title>0x7fee98efa4fc (libavformat.so.58.45.100) (373 samples, 1.97%)</title><rect x="96.0980%" y="148" width="1.9695%" height="15" fill="rgb(211,96,35)"/><text x="96.3480%" y="158.50">0..</text></g><g><title>0x7fee98efaa3a (libavformat.so.58.45.100) (373 samples, 1.97%)</title><rect x="96.0980%" y="164" width="1.9695%" height="15" fill="rgb(253,215,40)"/><text x="96.3480%" y="174.50">0..</text></g><g><title>0x7fee98efa4fc (libavformat.so.58.45.100) (370 samples, 1.95%)</title><rect x="96.1138%" y="180" width="1.9536%" height="15" fill="rgb(211,81,21)"/><text x="96.3638%" y="190.50">0..</text></g><g><title>0x7fee98f03544 (libavformat.so.58.45.100) (374 samples, 1.97%)</title><rect x="96.0980%" y="132" width="1.9748%" height="15" fill="rgb(208,190,38)"/><text x="96.3480%" y="142.50">0..</text></g><g><title>avformat_open_input (libavformat.so.58.45.100) (411 samples, 2.17%)</title><rect x="96.0980%" y="116" width="2.1701%" height="15" fill="rgb(235,213,38)"/><text x="96.3480%" y="126.50">a..</text></g><g><title>__pyx_tp_new_2av_9container_4core_Container (av/container/core.cpython-38-x86_64-linux-gnu.so) (414 samples, 2.19%)</title><rect x="96.0874%" y="100" width="2.1860%" height="15" fill="rgb(237,122,38)"/><text x="96.3374%" y="110.50">_..</text></g><g><title>avformat_find_stream_info (libavformat.so.58.45.100) (239 samples, 1.26%)</title><rect x="98.2734%" y="100" width="1.2619%" height="15" fill="rgb(244,218,35)"/><text x="98.5234%" y="110.50"></text></g><g><title>&lt;module&gt; (PV_SOX5_pyav.py:9) (738 samples, 3.90%)</title><rect x="95.9396%" y="52" width="3.8967%" height="15" fill="rgb(240,68,47)"/><text x="96.1896%" y="62.50">&lt;mod..</text></g><g><title>open (av/container/core.cpython-38-x86_64-linux-gnu.so) (712 samples, 3.76%)</title><rect x="96.0769%" y="68" width="3.7594%" height="15" fill="rgb(210,16,53)"/><text x="96.3269%" y="78.50">open..</text></g><g><title>__pyx_tp_new_2av_9container_5input_InputContainer (av/container/input.cpython-38-x86_64-linux-gnu.so) (711 samples, 3.75%)</title><rect x="96.0822%" y="84" width="3.7542%" height="15" fill="rgb(235,124,12)"/><text x="96.3322%" y="94.50">__py..</text></g><g><title>all (18,939 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>