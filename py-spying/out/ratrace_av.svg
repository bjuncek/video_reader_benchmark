<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>0x7ff21f419e5b (libavcodec.so.58.91.100) (113 samples, 1.00%)</title><rect x="0.1422%" y="68" width="1.0044%" height="15" fill="rgb(227,0,7)"/><text x="0.3922%" y="78.50"></text></g><g><title>__Pyx_Generator_Next (av/container/core.cpython-38-x86_64-linux-gnu.so) (187 samples, 1.66%)</title><rect x="1.2978%" y="116" width="1.6622%" height="15" fill="rgb(217,0,24)"/><text x="1.5478%" y="126.50"></text></g><g><title>__Pyx_Coroutine_SendEx.isra.19 (av/container/core.cpython-38-x86_64-linux-gnu.so) (184 samples, 1.64%)</title><rect x="1.3244%" y="132" width="1.6356%" height="15" fill="rgb(221,193,54)"/><text x="1.5744%" y="142.50"></text></g><g><title>__pyx_gb_2av_9container_5input_14InputContainer_8generator (av/container/input.cpython-38-x86_64-linux-gnu.so) (184 samples, 1.64%)</title><rect x="1.3244%" y="148" width="1.6356%" height="15" fill="rgb(248,212,6)"/><text x="1.5744%" y="158.50"></text></g><g><title>0x7ff21f418bd9 (libavcodec.so.58.91.100) (151 samples, 1.34%)</title><rect x="3.6889%" y="228" width="1.3422%" height="15" fill="rgb(208,68,35)"/><text x="3.9389%" y="238.50"></text></g><g><title>0x7ff21f3635c2 (libavcodec.so.58.91.100) (151 samples, 1.34%)</title><rect x="3.6889%" y="244" width="1.3422%" height="15" fill="rgb(232,128,0)"/><text x="3.9389%" y="254.50"></text></g><g><title>0x7ff21f075916 (libavcodec.so.58.91.100) (231 samples, 2.05%)</title><rect x="3.6889%" y="212" width="2.0533%" height="15" fill="rgb(207,160,47)"/><text x="3.9389%" y="222.50">0..</text></g><g><title>CodecContext__recv_frame (av/codec/context.cpython-38-x86_64-linux-gnu.so) (267 samples, 2.37%)</title><rect x="3.4756%" y="180" width="2.3733%" height="15" fill="rgb(228,23,34)"/><text x="3.7256%" y="190.50">Co..</text></g><g><title>avcodec_receive_frame (libavcodec.so.58.91.100) (243 samples, 2.16%)</title><rect x="3.6889%" y="196" width="2.1600%" height="15" fill="rgb(218,30,26)"/><text x="3.9389%" y="206.50">a..</text></g><g><title>0x7ff21f39109d (libavcodec.so.58.91.100) (194 samples, 1.72%)</title><rect x="6.0889%" y="244" width="1.7244%" height="15" fill="rgb(220,122,19)"/><text x="6.3389%" y="254.50"></text></g><g><title>0x7ff21f38a96a (libavcodec.so.58.91.100) (179 samples, 1.59%)</title><rect x="6.2222%" y="260" width="1.5911%" height="15" fill="rgb(250,228,42)"/><text x="6.4722%" y="270.50"></text></g><g><title>av_frame_unref (libavutil.so.56.51.100) (167 samples, 1.48%)</title><rect x="6.3289%" y="276" width="1.4844%" height="15" fill="rgb(240,193,28)"/><text x="6.5789%" y="286.50"></text></g><g><title>0x7ff21f38b4ad (libavcodec.so.58.91.100) (153 samples, 1.36%)</title><rect x="9.3422%" y="260" width="1.3600%" height="15" fill="rgb(216,20,37)"/><text x="9.5922%" y="270.50"></text></g><g><title>0x7ff21f3910d2 (libavcodec.so.58.91.100) (246 samples, 2.19%)</title><rect x="8.5333%" y="244" width="2.1867%" height="15" fill="rgb(206,188,39)"/><text x="8.7833%" y="254.50">0..</text></g><g><title>0x7ff21f3635c2 (libavcodec.so.58.91.100) (940 samples, 8.36%)</title><rect x="6.0444%" y="228" width="8.3556%" height="15" fill="rgb(217,207,13)"/><text x="6.2944%" y="238.50">0x7ff21f3635..</text></g><g><title>0x7ff21f418bd9 (libavcodec.so.58.91.100) (954 samples, 8.48%)</title><rect x="6.0178%" y="212" width="8.4800%" height="15" fill="rgb(231,73,38)"/><text x="6.2678%" y="222.50">0x7ff21f418b..</text></g><g><title>0x7ff21f4190f4 (libavcodec.so.58.91.100) (2,221 samples, 19.74%)</title><rect x="15.2978%" y="212" width="19.7422%" height="15" fill="rgb(225,20,46)"/><text x="15.5478%" y="222.50">0x7ff21f4190f4 (libavcodec.so.5..</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (2,221 samples, 19.74%)</title><rect x="15.2978%" y="228" width="19.7422%" height="15" fill="rgb(210,31,41)"/><text x="15.5478%" y="238.50">__pthread_cond_wait (libpthread..</text></g><g><title>0x7ff21f075916 (libavcodec.so.58.91.100) (3,282 samples, 29.17%)</title><rect x="5.9644%" y="196" width="29.1733%" height="15" fill="rgb(221,200,47)"/><text x="6.2144%" y="206.50">0x7ff21f075916 (libavcodec.so.58.91.100)</text></g><g><title>avcodec_send_packet (libavcodec.so.58.91.100) (3,310 samples, 29.42%)</title><rect x="5.8578%" y="180" width="29.4222%" height="15" fill="rgb(226,26,5)"/><text x="6.1078%" y="190.50">avcodec_send_packet (libavcodec.so.58.91.100)</text></g><g><title>CodecContext__send_packet_and_recv (av/codec/context.cpython-38-x86_64-linux-gnu.so) (3,588 samples, 31.89%)</title><rect x="3.4044%" y="164" width="31.8933%" height="15" fill="rgb(249,33,26)"/><text x="3.6544%" y="174.50">CodecContext__send_packet_and_recv (av/codec/context..</text></g><g><title>0x7ff21efdbfaf (libavcodec.so.58.91.100) (232 samples, 2.06%)</title><rect x="35.8133%" y="228" width="2.0622%" height="15" fill="rgb(235,183,28)"/><text x="36.0633%" y="238.50">0..</text></g><g><title>0x7ff21eed83dc (libavcodec.so.58.91.100) (267 samples, 2.37%)</title><rect x="35.5378%" y="212" width="2.3733%" height="15" fill="rgb(221,5,38)"/><text x="35.7878%" y="222.50">0x..</text></g><g><title>0x7ff21f419e20 (libavcodec.so.58.91.100) (304 samples, 2.70%)</title><rect x="35.5200%" y="196" width="2.7022%" height="15" fill="rgb(247,18,42)"/><text x="35.7700%" y="206.50">0x..</text></g><g><title>CodecContext_open (av/codec/context.cpython-38-x86_64-linux-gnu.so) (419 samples, 3.72%)</title><rect x="35.2978%" y="164" width="3.7244%" height="15" fill="rgb(241,131,45)"/><text x="35.5478%" y="174.50">Code..</text></g><g><title>avcodec_open2 (libavcodec.so.58.91.100) (405 samples, 3.60%)</title><rect x="35.4222%" y="180" width="3.6000%" height="15" fill="rgb(249,31,29)"/><text x="35.6722%" y="190.50">avco..</text></g><g><title>__Pyx_Generator_Next (av/container/core.cpython-38-x86_64-linux-gnu.so) (4,294 samples, 38.17%)</title><rect x="1.1556%" y="68" width="38.1689%" height="15" fill="rgb(225,111,53)"/><text x="1.4056%" y="78.50">__Pyx_Generator_Next (av/container/core.cpython-38-x86_64-linu..</text></g><g><title>__Pyx_Coroutine_SendEx.isra.19 (av/container/core.cpython-38-x86_64-linux-gnu.so) (4,294 samples, 38.17%)</title><rect x="1.1556%" y="84" width="38.1689%" height="15" fill="rgb(238,160,17)"/><text x="1.4056%" y="94.50">__Pyx_Coroutine_SendEx.isra.19 (av/container/core.cpython-38-x..</text></g><g><title>__pyx_gb_2av_9container_5input_14InputContainer_11generator1 (av/container/input.cpython-38-x86_64-linux-gnu.so) (4,294 samples, 38.17%)</title><rect x="1.1556%" y="100" width="38.1689%" height="15" fill="rgb(214,148,48)"/><text x="1.4056%" y="110.50">__pyx_gb_2av_9container_5input_14InputContainer_11generator1 (..</text></g><g><title>decode (av/packet.cpython-38-x86_64-linux-gnu.so) (4,054 samples, 36.04%)</title><rect x="3.2889%" y="116" width="36.0356%" height="15" fill="rgb(232,36,49)"/><text x="3.5389%" y="126.50">decode (av/packet.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>decode (av/stream.cpython-38-x86_64-linux-gnu.so) (4,046 samples, 35.96%)</title><rect x="3.3600%" y="132" width="35.9644%" height="15" fill="rgb(209,103,24)"/><text x="3.6100%" y="142.50">decode (av/stream.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>CodecContext_decode (av/codec/context.cpython-38-x86_64-linux-gnu.so) (4,046 samples, 35.96%)</title><rect x="3.3600%" y="148" width="35.9644%" height="15" fill="rgb(229,88,8)"/><text x="3.6100%" y="158.50">CodecContext_decode (av/codec/context.cpython-38-x86_64-li..</text></g><g><title>&lt;module&gt; (PV_ratrace_pyav.py:10) (4,466 samples, 39.70%)</title><rect x="0.0444%" y="52" width="39.6978%" height="15" fill="rgb(213,181,19)"/><text x="0.2944%" y="62.50">&lt;module&gt; (PV_ratrace_pyav.py:10)</text></g><g><title>0x7ff21e7b0cfb (libswscale.so.5.7.100) (126 samples, 1.12%)</title><rect x="52.6844%" y="68" width="1.1200%" height="15" fill="rgb(254,191,54)"/><text x="52.9344%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:988) (155 samples, 1.38%)</title><rect x="55.6533%" y="100" width="1.3778%" height="15" fill="rgb(241,83,37)"/><text x="55.9033%" y="110.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1439) (157 samples, 1.40%)</title><rect x="59.4133%" y="180" width="1.3956%" height="15" fill="rgb(233,36,39)"/><text x="59.6633%" y="190.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;:87) (140 samples, 1.24%)</title><rect x="59.5644%" y="196" width="1.2444%" height="15" fill="rgb(226,3,54)"/><text x="59.8144%" y="206.50"></text></g><g><title>os_stat (python3.8) (132 samples, 1.17%)</title><rect x="59.6356%" y="212" width="1.1733%" height="15" fill="rgb(245,192,40)"/><text x="59.8856%" y="222.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1314) (368 samples, 3.27%)</title><rect x="59.2978%" y="164" width="3.2711%" height="15" fill="rgb(238,167,29)"/><text x="59.5478%" y="174.50">_ge..</text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1342) (441 samples, 3.92%)</title><rect x="58.8978%" y="148" width="3.9200%" height="15" fill="rgb(232,182,51)"/><text x="59.1478%" y="158.50">find..</text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:914) (518 samples, 4.60%)</title><rect x="58.2578%" y="132" width="4.6044%" height="15" fill="rgb(231,60,39)"/><text x="58.5078%" y="142.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:971) (573 samples, 5.09%)</title><rect x="57.7956%" y="116" width="5.0933%" height="15" fill="rgb(208,69,12)"/><text x="58.0456%" y="126.50">_find_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (729 samples, 6.48%)</title><rect x="57.1200%" y="100" width="6.4800%" height="15" fill="rgb(235,93,37)"/><text x="57.3700%" y="110.50">_find_an..</text></g><g><title>__Pyx_Import (av/video/frame.cpython-38-x86_64-linux-gnu.so) (1,008 samples, 8.96%)</title><rect x="54.9600%" y="84" width="8.9600%" height="15" fill="rgb(213,116,39)"/><text x="55.2100%" y="94.50">__Pyx_Import ..</text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1314) (282 samples, 2.51%)</title><rect x="67.9822%" y="180" width="2.5067%" height="15" fill="rgb(222,207,29)"/><text x="68.2322%" y="190.50">_g..</text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1342) (348 samples, 3.09%)</title><rect x="67.6800%" y="164" width="3.0933%" height="15" fill="rgb(206,96,30)"/><text x="67.9300%" y="174.50">fin..</text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:914) (407 samples, 3.62%)</title><rect x="67.2000%" y="148" width="3.6178%" height="15" fill="rgb(218,138,4)"/><text x="67.4500%" y="158.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:971) (468 samples, 4.16%)</title><rect x="66.6933%" y="132" width="4.1600%" height="15" fill="rgb(250,191,14)"/><text x="66.9433%" y="142.50">_find..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (596 samples, 5.30%)</title><rect x="65.9733%" y="116" width="5.2978%" height="15" fill="rgb(239,60,40)"/><text x="66.2233%" y="126.50">_find_..</text></g><g><title>__Pyx_Import (av/video/frame.cpython-38-x86_64-linux-gnu.so) (748 samples, 6.65%)</title><rect x="64.7733%" y="100" width="6.6489%" height="15" fill="rgb(206,27,48)"/><text x="65.0233%" y="110.50">__Pyx_Imp..</text></g><g><title>frame_useful_array (av/video/frame.cpython-38-x86_64-linux-gnu.so) (811 samples, 7.21%)</title><rect x="64.5867%" y="84" width="7.2089%" height="15" fill="rgb(225,35,8)"/><text x="64.8367%" y="94.50">frame_usef..</text></g><g><title>to_ndarray (av/video/frame.cpython-38-x86_64-linux-gnu.so) (1,979 samples, 17.59%)</title><rect x="54.7200%" y="68" width="17.5911%" height="15" fill="rgb(250,213,24)"/><text x="54.9700%" y="78.50">to_ndarray (av/video/frame...</text></g><g><title>0x7ff220eda7d8 (libc-2.27.so) (143 samples, 1.27%)</title><rect x="75.3067%" y="244" width="1.2711%" height="15" fill="rgb(247,123,22)"/><text x="75.5567%" y="254.50"></text></g><g><title>0x7ff220edb4eb (libc-2.27.so) (206 samples, 1.83%)</title><rect x="75.0311%" y="228" width="1.8311%" height="15" fill="rgb(231,138,38)"/><text x="75.2811%" y="238.50">0..</text></g><g><title>av_mallocz (libavutil.so.56.51.100) (273 samples, 2.43%)</title><rect x="74.4533%" y="180" width="2.4267%" height="15" fill="rgb(231,145,46)"/><text x="74.7033%" y="190.50">av..</text></g><g><title>av_malloc (libavutil.so.56.51.100) (211 samples, 1.88%)</title><rect x="75.0044%" y="196" width="1.8756%" height="15" fill="rgb(251,118,11)"/><text x="75.2544%" y="206.50">a..</text></g><g><title>posix_memalign (libc-2.27.so) (210 samples, 1.87%)</title><rect x="75.0133%" y="212" width="1.8667%" height="15" fill="rgb(217,147,25)"/><text x="75.2633%" y="222.50">p..</text></g><g><title>sws_alloc_context (libswscale.so.5.7.100) (287 samples, 2.55%)</title><rect x="74.4533%" y="164" width="2.5511%" height="15" fill="rgb(247,81,37)"/><text x="74.7033%" y="174.50">sw..</text></g><g><title>0x7ff21e748364 (libswscale.so.5.7.100) (433 samples, 3.85%)</title><rect x="86.1156%" y="180" width="3.8489%" height="15" fill="rgb(209,12,38)"/><text x="86.3656%" y="190.50">0x7f..</text></g><g><title>sws_getCachedContext (libswscale.so.5.7.100) (2,181 samples, 19.39%)</title><rect x="74.1422%" y="148" width="19.3867%" height="15" fill="rgb(227,1,9)"/><text x="74.3922%" y="158.50">sws_getCachedContext (libswsca..</text></g><g><title>sws_init_context (libswscale.so.5.7.100) (1,859 samples, 16.52%)</title><rect x="77.0044%" y="164" width="16.5244%" height="15" fill="rgb(248,47,43)"/><text x="77.2544%" y="174.50">sws_init_context (libswsca..</text></g><g><title>sws_setColorspaceDetails (libswscale.so.5.7.100) (207 samples, 1.84%)</title><rect x="91.6889%" y="180" width="1.8400%" height="15" fill="rgb(221,10,30)"/><text x="91.9389%" y="190.50">s..</text></g><g><title>VideoReformatter__reformat (av/video/reformatter.cpython-38-x86_64-linux-gnu.so) (2,356 samples, 20.94%)</title><rect x="72.7556%" y="132" width="20.9422%" height="15" fill="rgb(210,229,1)"/><text x="73.0056%" y="142.50">VideoReformatter__reformat (av/vi..</text></g><g><title>&lt;module&gt; (PV_ratrace_pyav.py:11) (6,110 samples, 54.31%)</title><rect x="39.7422%" y="52" width="54.3111%" height="15" fill="rgb(222,148,37)"/><text x="39.9922%" y="62.50">&lt;module&gt; (PV_ratrace_pyav.py:11)</text></g><g><title>to_rgb (av/video/frame.cpython-38-x86_64-linux-gnu.so) (2,446 samples, 21.74%)</title><rect x="72.3111%" y="68" width="21.7422%" height="15" fill="rgb(234,67,33)"/><text x="72.5611%" y="78.50">to_rgb (av/video/frame.cpython-38-..</text></g><g><title>reformat (av/video/frame.cpython-38-x86_64-linux-gnu.so) (2,435 samples, 21.64%)</title><rect x="72.4089%" y="84" width="21.6444%" height="15" fill="rgb(247,98,35)"/><text x="72.6589%" y="94.50">reformat (av/video/frame.cpython-3..</text></g><g><title>reformat (av/video/reformatter.cpython-38-x86_64-linux-gnu.so) (2,416 samples, 21.48%)</title><rect x="72.5778%" y="100" width="21.4756%" height="15" fill="rgb(247,138,52)"/><text x="72.8278%" y="110.50">reformat (av/video/reformatter.cpy..</text></g><g><title>reformat (av/video/reformatter.cpython-38-x86_64-linux-gnu.so) (2,406 samples, 21.39%)</title><rect x="72.6667%" y="116" width="21.3867%" height="15" fill="rgb(213,79,30)"/><text x="72.9167%" y="126.50">reformat (av/video/reformatter.cpy..</text></g><g><title>__pyx_tp_dealloc_2av_5plane_Plane (av/plane.cpython-38-x86_64-linux-gnu.so) (116 samples, 1.03%)</title><rect x="94.3556%" y="100" width="1.0311%" height="15" fill="rgb(246,177,23)"/><text x="94.6056%" y="110.50"></text></g><g><title>__pyx_tp_dealloc_2av_5video_5frame_VideoFrame (av/video/frame.cpython-38-x86_64-linux-gnu.so) (115 samples, 1.02%)</title><rect x="94.3644%" y="116" width="1.0222%" height="15" fill="rgb(230,62,27)"/><text x="94.6144%" y="126.50"></text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (120 samples, 1.07%)</title><rect x="94.3289%" y="84" width="1.0667%" height="15" fill="rgb(216,154,8)"/><text x="94.5789%" y="94.50"></text></g><g><title>&lt;module&gt; (PV_ratrace_pyav.py:7) (129 samples, 1.15%)</title><rect x="94.2844%" y="52" width="1.1467%" height="15" fill="rgb(244,35,45)"/><text x="94.5344%" y="62.50"></text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (127 samples, 1.13%)</title><rect x="94.3022%" y="68" width="1.1289%" height="15" fill="rgb(251,115,12)"/><text x="94.5522%" y="78.50"></text></g><g><title>__pyx_tp_new_2av_9container_4core_Container (av/container/core.cpython-38-x86_64-linux-gnu.so) (210 samples, 1.87%)</title><rect x="95.4667%" y="100" width="1.8667%" height="15" fill="rgb(240,54,50)"/><text x="95.7167%" y="110.50">_..</text></g><g><title>avformat_open_input (libavformat.so.58.45.100) (187 samples, 1.66%)</title><rect x="95.6711%" y="116" width="1.6622%" height="15" fill="rgb(233,84,52)"/><text x="95.9211%" y="126.50"></text></g><g><title>avformat_find_stream_info (libavformat.so.58.45.100) (206 samples, 1.83%)</title><rect x="97.3333%" y="100" width="1.8311%" height="15" fill="rgb(207,117,47)"/><text x="97.5833%" y="110.50">a..</text></g><g><title>&lt;module&gt; (PV_ratrace_pyav.py:8) (480 samples, 4.27%)</title><rect x="95.4311%" y="52" width="4.2667%" height="15" fill="rgb(249,43,39)"/><text x="95.6811%" y="62.50">&lt;modu..</text></g><g><title>open (av/container/core.cpython-38-x86_64-linux-gnu.so) (480 samples, 4.27%)</title><rect x="95.4311%" y="68" width="4.2667%" height="15" fill="rgb(209,38,44)"/><text x="95.6811%" y="78.50">open ..</text></g><g><title>__pyx_tp_new_2av_9container_5input_InputContainer (av/container/input.cpython-38-x86_64-linux-gnu.so) (478 samples, 4.25%)</title><rect x="95.4489%" y="84" width="4.2489%" height="15" fill="rgb(236,212,23)"/><text x="95.6989%" y="94.50">__pyx..</text></g><g><title>all (11,250 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>