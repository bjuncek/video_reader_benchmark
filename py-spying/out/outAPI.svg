<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1606" onload="init(evt)" viewBox="0 0 1200 1606" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1606" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1589.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1589.00"> </text><svg id="frames" x="10" width="1180"><g><title>c10::intrusive_ptr&lt;Video, c10::detail::intrusive_target_default_null_type&lt;Video&gt; &gt;::make&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, bool&amp;&gt; (basic_string.h:647) (5,207 samples, 1.94%)</title><rect x="0.1519%" y="356" width="1.9379%" height="15" fill="rgb(227,0,7)"/><text x="0.4019%" y="366.50">c..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (basic_string.h:220) (5,207 samples, 1.94%)</title><rect x="0.1519%" y="372" width="1.9379%" height="15" fill="rgb(217,0,24)"/><text x="0.4019%" y="382.50">s..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (basic_string.h:211) (5,207 samples, 1.94%)</title><rect x="0.1519%" y="388" width="1.9379%" height="15" fill="rgb(221,193,54)"/><text x="0.4019%" y="398.50">s..</text></g><g><title>c10::tagged_capsule&lt;Video&gt;::~tagged_capsule (ivalue_inl.h:41) (5,208 samples, 1.94%)</title><rect x="0.1519%" y="292" width="1.9383%" height="15" fill="rgb(248,212,6)"/><text x="0.4019%" y="302.50">c..</text></g><g><title>c10::IValue::~IValue (ivalue.h:146) (5,208 samples, 1.94%)</title><rect x="0.1519%" y="308" width="1.9383%" height="15" fill="rgb(208,68,35)"/><text x="0.4019%" y="318.50">c..</text></g><g><title>torch::class_&lt;Video&gt;&amp; torch::class_&lt;Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;)::{lambda(c10::tagged_capsule&lt;Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)#1}::operator() const (custom_class.h:87) (5,208 samples, 1.94%)</title><rect x="0.1519%" y="324" width="1.9383%" height="15" fill="rgb(232,128,0)"/><text x="0.4019%" y="334.50">t..</text></g><g><title>c10::make_intrusive&lt;Video, c10::detail::intrusive_target_default_null_type&lt;Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, bool&amp;&gt; (intrusive_ptr.h:386) (5,208 samples, 1.94%)</title><rect x="0.1519%" y="340" width="1.9383%" height="15" fill="rgb(207,160,47)"/><text x="0.4019%" y="350.50">c..</text></g><g><title>torch::detail::BoxedProxy&lt;void, torch::class_&lt;Video&gt;&amp; torch::class_&lt;Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;)::{lambda(c10::tagged_capsule&lt;Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)#1}&gt;::operator() (custom_class_detail.h:115) (5,210 samples, 1.94%)</title><rect x="0.1515%" y="244" width="1.9391%" height="15" fill="rgb(228,23,34)"/><text x="0.4015%" y="254.50">t..</text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::class_&lt;Video&gt;&amp; torch::class_&lt;Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;)::{lambda(c10::tagged_capsule&lt;Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)#1}, false&gt; (custom_class_detail.h:94) (5,210 samples, 1.94%)</title><rect x="0.1515%" y="260" width="1.9391%" height="15" fill="rgb(218,30,26)"/><text x="0.4015%" y="270.50">t..</text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::class_&lt;Video&gt;&amp; torch::class_&lt;Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;)::{lambda(c10::tagged_capsule&lt;Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)#1}, false, (unsigned long)0, (unsigned long)1, (unsigned long)2, (unsigned long)3&gt; (custom_class_detail.h:81) (5,210 samples, 1.94%)</title><rect x="0.1515%" y="276" width="1.9391%" height="15" fill="rgb(220,122,19)"/><text x="0.4015%" y="286.50">t..</text></g><g><title>torch::jit::runAndInsertCall (pybind_utils.h:1098) (5,214 samples, 1.94%)</title><rect x="0.1507%" y="196" width="1.9406%" height="15" fill="rgb(250,228,42)"/><text x="0.4007%" y="206.50">t..</text></g><g><title>std::_Function_handler&lt;void (std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;), void torch::class_&lt;Video&gt;::defineMethod&lt;torch::class_&lt;Video&gt;&amp; torch::class_&lt;Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;)::{lambda(c10::tagged_capsule&lt;Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)#1}&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::class_&lt;Video&gt;&amp; torch::class_&lt;Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;)::{lambda(c10::tagged_capsule&lt;Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)#1})::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}&gt;::_M_invoke (std_function.h:316) (5,212 samples, 1.94%)</title><rect x="0.1515%" y="212" width="1.9398%" height="15" fill="rgb(240,193,28)"/><text x="0.4015%" y="222.50">s..</text></g><g><title>void torch::class_&lt;Video&gt;::defineMethod&lt;torch::class_&lt;Video&gt;&amp; torch::class_&lt;Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;)::{lambda(c10::tagged_capsule&lt;Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)#1}&gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::class_&lt;Video&gt;&amp; torch::class_&lt;Video&gt;::def&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;(torch::detail::types&lt;void, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool&gt;)::{lambda(c10::tagged_capsule&lt;Video&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool)#1})::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}::operator() (custom_class.h:236) (5,212 samples, 1.94%)</title><rect x="0.1515%" y="228" width="1.9398%" height="15" fill="rgb(216,20,37)"/><text x="0.4015%" y="238.50">v..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::object, torch::jit::ScriptClass, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs)#1}, pybind11::object, torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::object, torch::jit::ScriptClass, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(torch::jit::ScriptClass*, pybind11::args&amp;&amp;, pybind11::kwargs)#1}, pybind11::object (*)(torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:155) (5,301 samples, 1.97%)</title><rect x="0.1236%" y="100" width="1.9729%" height="15" fill="rgb(206,188,39)"/><text x="0.3736%" y="110.50">v..</text></g><g><title>pybind11::detail::argument_loader&lt;torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs&gt;::call&lt;pybind11::object, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::object, torch::jit::ScriptClass, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(torch::jit::ScriptClass*, pybind11::args&amp;, pybind11::kwargs)#1}&gt; &amp;&amp; (cast.h:1908) (5,301 samples, 1.97%)</title><rect x="0.1236%" y="116" width="1.9729%" height="15" fill="rgb(217,207,13)"/><text x="0.3736%" y="126.50">p..</text></g><g><title>pybind11::detail::argument_loader&lt;torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs&gt;::call_impl&lt;pybind11::object, pybind11::cpp_function::cpp_function&lt;pybind11::object, torch::jit::ScriptClass, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(torch::jit::ScriptClass*, pybind11::args&amp;, pybind11::kwargs)#1}, (unsigned long)0, (unsigned long)1, (unsigned long)2, pybind11::detail::void_type&gt; (cast.h:1931) (5,301 samples, 1.97%)</title><rect x="0.1236%" y="132" width="1.9729%" height="15" fill="rgb(231,73,38)"/><text x="0.3736%" y="142.50">p..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::object, torch::jit::ScriptClass, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs)#1}::operator() const (pybind11.h:74) (5,300 samples, 1.97%)</title><rect x="0.1239%" y="148" width="1.9726%" height="15" fill="rgb(225,20,46)"/><text x="0.3739%" y="158.50">p..</text></g><g><title>torch::jit::ScriptClass::__call__ (python_custom_class.cpp:23) (5,242 samples, 1.95%)</title><rect x="0.1455%" y="164" width="1.9510%" height="15" fill="rgb(210,31,41)"/><text x="0.3955%" y="174.50">t..</text></g><g><title>torch::jit::invokeScriptMethodFromPython (pybind_utils.h:1170) (5,241 samples, 1.95%)</title><rect x="0.1459%" y="180" width="1.9506%" height="15" fill="rgb(221,200,47)"/><text x="0.3959%" y="190.50">t..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:620) (5,307 samples, 1.98%)</title><rect x="0.1217%" y="68" width="1.9752%" height="15" fill="rgb(226,26,5)"/><text x="0.3717%" y="78.50">p..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::object, torch::jit::ScriptClass, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs)#1}, pybind11::object, torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::object, torch::jit::ScriptClass, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(torch::jit::ScriptClass*, pybind11::args&amp;&amp;, pybind11::kwargs)#1}, pybind11::object (*)(torch::jit::ScriptClass*, pybind11::args, pybind11::kwargs), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:133) (5,307 samples, 1.98%)</title><rect x="0.1217%" y="84" width="1.9752%" height="15" fill="rgb(249,33,26)"/><text x="0.3717%" y="94.50">v..</text></g><g><title>&lt;module&gt; (newAPI.py:12) (6,274 samples, 2.34%)</title><rect x="0.0007%" y="52" width="2.3351%" height="15" fill="rgb(235,183,28)"/><text x="0.2507%" y="62.50">&lt;..</text></g><g><title>torch::detail::BoxedProxy&lt;at::Tensor, torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt; &gt;::operator() (custom_class_detail.h:104) (3,093 samples, 1.15%)</title><rect x="3.3575%" y="228" width="1.1512%" height="15" fill="rgb(221,5,38)"/><text x="3.6075%" y="238.50"></text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;, false&gt; (custom_class_detail.h:95) (3,093 samples, 1.15%)</title><rect x="3.3575%" y="244" width="1.1512%" height="15" fill="rgb(247,18,42)"/><text x="3.6075%" y="254.50"></text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;, false, (unsigned long)0, (unsigned long)1&gt; (custom_class_detail.h:86) (3,093 samples, 1.15%)</title><rect x="3.3575%" y="260" width="1.1512%" height="15" fill="rgb(241,131,45)"/><text x="3.6075%" y="270.50"></text></g><g><title>torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;::operator() (custom_class_detail.h:26) (3,044 samples, 1.13%)</title><rect x="3.3757%" y="276" width="1.1329%" height="15" fill="rgb(249,31,29)"/><text x="3.6257%" y="286.50"></text></g><g><title>c10::guts::invoke&lt;at::Tensor (Video::*&amp;)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), Video&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (C++17.h:145) (3,044 samples, 1.13%)</title><rect x="3.3757%" y="292" width="1.1329%" height="15" fill="rgb(225,111,53)"/><text x="3.6257%" y="302.50"></text></g><g><title>std::_Mem_fn_base&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), true&gt;::operator()&lt;Video&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (functional:175) (3,044 samples, 1.13%)</title><rect x="3.3757%" y="308" width="1.1329%" height="15" fill="rgb(238,160,17)"/><text x="3.6257%" y="318.50"></text></g><g><title>std::__invoke&lt;at::Tensor (Video::* const&amp;)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), Video&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (invoke.h:96) (3,044 samples, 1.13%)</title><rect x="3.3757%" y="324" width="1.1329%" height="15" fill="rgb(214,148,48)"/><text x="3.6257%" y="334.50"></text></g><g><title>std::__invoke_impl&lt;at::Tensor, at::Tensor (Video::* const&amp;)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), Video&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (invoke.h:66) (3,044 samples, 1.13%)</title><rect x="3.3757%" y="340" width="1.1329%" height="15" fill="rgb(232,36,49)"/><text x="3.6257%" y="350.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (basic_string.h:647) (3,044 samples, 1.13%)</title><rect x="3.3757%" y="356" width="1.1329%" height="15" fill="rgb(209,103,24)"/><text x="3.6257%" y="366.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (basic_string.h:220) (3,044 samples, 1.13%)</title><rect x="3.3757%" y="372" width="1.1329%" height="15" fill="rgb(229,88,8)"/><text x="3.6257%" y="382.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (basic_string.h:211) (3,044 samples, 1.13%)</title><rect x="3.3757%" y="388" width="1.1329%" height="15" fill="rgb(213,181,19)"/><text x="3.6257%" y="398.50"></text></g><g><title>std::_Function_handler&lt;void (std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;), void torch::class_&lt;Video&gt;::defineMethod&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;)::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}&gt;::_M_invoke (std_function.h:316) (3,096 samples, 1.15%)</title><rect x="3.3575%" y="196" width="1.1523%" height="15" fill="rgb(254,191,54)"/><text x="3.6075%" y="206.50"></text></g><g><title>void torch::class_&lt;Video&gt;::defineMethod&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;)::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}::operator() (custom_class.h:236) (3,096 samples, 1.15%)</title><rect x="3.3575%" y="212" width="1.1523%" height="15" fill="rgb(241,83,37)"/><text x="3.6075%" y="222.50"></text></g><g><title>torch::jit::runAndInsertCall (pybind_utils.h:1098) (3,097 samples, 1.15%)</title><rect x="3.3575%" y="180" width="1.1526%" height="15" fill="rgb(233,36,39)"/><text x="3.6075%" y="190.50"></text></g><g><title>torch::jit::invokeScriptMethodFromPython (pybind_utils.h:1170) (3,179 samples, 1.18%)</title><rect x="3.3310%" y="164" width="1.1832%" height="15" fill="rgb(226,3,54)"/><text x="3.5810%" y="174.50"></text></g><g><title>operator() (script_init.cpp:1198) (3,191 samples, 1.19%)</title><rect x="3.3269%" y="148" width="1.1876%" height="15" fill="rgb(245,192,40)"/><text x="3.5769%" y="158.50"></text></g><g><title>call&lt;pybind11::object, pybind11::detail::void_type, torch::jit::initJitScriptBindings(PyObject*)::&lt;lambda(pybind11::args, pybind11::kwargs)&gt;&amp;&gt; (cast.h:1908) (3,213 samples, 1.20%)</title><rect x="3.3191%" y="116" width="1.1958%" height="15" fill="rgb(238,167,29)"/><text x="3.5691%" y="126.50"></text></g><g><title>call_impl&lt;pybind11::object, torch::jit::initJitScriptBindings(PyObject*)::&lt;lambda(pybind11::args, pybind11::kwargs)&gt;&amp;, 0, 1, pybind11::detail::void_type&gt; (cast.h:1931) (3,211 samples, 1.20%)</title><rect x="3.3199%" y="132" width="1.1951%" height="15" fill="rgb(232,182,51)"/><text x="3.5699%" y="142.50"></text></g><g><title>_FUN (pybind11.h:133) (3,367 samples, 1.25%)</title><rect x="3.2998%" y="84" width="1.2531%" height="15" fill="rgb(231,60,39)"/><text x="3.5498%" y="94.50"></text></g><g><title>operator() (pybind11.h:155) (3,315 samples, 1.23%)</title><rect x="3.3191%" y="100" width="1.2338%" height="15" fill="rgb(208,69,12)"/><text x="3.5691%" y="110.50"></text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:620) (3,373 samples, 1.26%)</title><rect x="3.2998%" y="68" width="1.2554%" height="15" fill="rgb(235,93,37)"/><text x="3.5498%" y="78.50"></text></g><g><title>&lt;module&gt; (newAPI.py:14) (3,944 samples, 1.47%)</title><rect x="3.0999%" y="52" width="1.4679%" height="15" fill="rgb(213,116,39)"/><text x="3.3499%" y="62.50"></text></g><g><title>at::Tensor::zero_ (TensorMethods.cpp:4837) (3,085 samples, 1.15%)</title><rect x="22.0886%" y="788" width="1.1482%" height="15" fill="rgb(222,207,29)"/><text x="22.3386%" y="798.50"></text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor&amp; (at::Tensor&amp;)&gt;::call (Dispatcher.h:324) (3,026 samples, 1.13%)</title><rect x="22.1106%" y="804" width="1.1262%" height="15" fill="rgb(206,96,30)"/><text x="22.3606%" y="814.50"></text></g><g><title>c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (Dispatcher.h:382) (2,782 samples, 1.04%)</title><rect x="22.2014%" y="820" width="1.0354%" height="15" fill="rgb(218,138,4)"/><text x="22.4514%" y="830.50"></text></g><g><title>at::CPUType::empty_memory_format (CPUType.cpp:176) (3,692 samples, 1.37%)</title><rect x="23.9544%" y="1060" width="1.3741%" height="15" fill="rgb(250,191,14)"/><text x="24.2044%" y="1070.50"></text></g><g><title>c10::impl::detail::with_scattered_tensor_options_impl_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::CPUType::empty_memory_format(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt; &gt;, c10::guts::typelist::typelist&lt;c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;::wrapper (hacky_wrapper_for_legacy_signatures.h:109) (3,721 samples, 1.38%)</title><rect x="23.9447%" y="1044" width="1.3849%" height="15" fill="rgb(239,60,40)"/><text x="24.1947%" y="1054.50"></text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (4,088 samples, 1.52%)</title><rect x="23.8408%" y="1028" width="1.5215%" height="15" fill="rgb(206,27,48)"/><text x="24.0908%" y="1038.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (4,129 samples, 1.54%)</title><rect x="23.8401%" y="1012" width="1.5367%" height="15" fill="rgb(225,35,8)"/><text x="24.0901%" y="1022.50"></text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (KernelFunction_impl.h:43) (4,179 samples, 1.56%)</title><rect x="23.8386%" y="996" width="1.5553%" height="15" fill="rgb(250,213,24)"/><text x="24.0886%" y="1006.50"></text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (KernelFunction_impl.h:53) (4,225 samples, 1.57%)</title><rect x="23.8271%" y="980" width="1.5725%" height="15" fill="rgb(247,123,22)"/><text x="24.0771%" y="990.50"></text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (Dispatcher.h:370) (4,468 samples, 1.66%)</title><rect x="23.7560%" y="964" width="1.6629%" height="15" fill="rgb(231,138,38)"/><text x="24.0060%" y="974.50"></text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::callWithDispatchKey (Dispatcher.h:327) (4,732 samples, 1.76%)</title><rect x="23.6767%" y="948" width="1.7612%" height="15" fill="rgb(231,145,46)"/><text x="23.9267%" y="958.50"></text></g><g><title>empty_memory_format (BackendSelectRegister.cpp:103) (4,895 samples, 1.82%)</title><rect x="23.6585%" y="932" width="1.8218%" height="15" fill="rgb(251,118,11)"/><text x="23.9085%" y="942.50">e..</text></g><g><title>wrapper (hacky_wrapper_for_legacy_signatures.h:109) (5,099 samples, 1.90%)</title><rect x="23.5904%" y="916" width="1.8978%" height="15" fill="rgb(217,147,25)"/><text x="23.8404%" y="926.50">w..</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (5,309 samples, 1.98%)</title><rect x="23.5174%" y="900" width="1.9759%" height="15" fill="rgb(247,81,37)"/><text x="23.7674%" y="910.50">c..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (5,375 samples, 2.00%)</title><rect x="23.5118%" y="884" width="2.0005%" height="15" fill="rgb(209,12,38)"/><text x="23.7618%" y="894.50">c..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (KernelFunction_impl.h:43) (5,440 samples, 2.02%)</title><rect x="23.5062%" y="868" width="2.0247%" height="15" fill="rgb(227,1,9)"/><text x="23.7562%" y="878.50">c..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (KernelFunction_impl.h:53) (5,469 samples, 2.04%)</title><rect x="23.5018%" y="852" width="2.0355%" height="15" fill="rgb(248,47,43)"/><text x="23.7518%" y="862.50">c..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (Dispatcher.h:370) (5,573 samples, 2.07%)</title><rect x="23.4884%" y="836" width="2.0742%" height="15" fill="rgb(221,10,30)"/><text x="23.7384%" y="846.50">c..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (Dispatcher.h:381) (5,768 samples, 2.15%)</title><rect x="23.4300%" y="820" width="2.1467%" height="15" fill="rgb(210,229,1)"/><text x="23.6800%" y="830.50">c..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (Dispatcher.h:323) (6,226 samples, 2.32%)</title><rect x="23.2837%" y="804" width="2.3172%" height="15" fill="rgb(222,148,37)"/><text x="23.5337%" y="814.50">c..</text></g><g><title>at::empty (Functions.cpp:4098) (6,480 samples, 2.41%)</title><rect x="23.2636%" y="788" width="2.4117%" height="15" fill="rgb(234,67,33)"/><text x="23.5136%" y="798.50">at..</text></g><g><title>at::native::zeros (TensorFactories.cpp:844) (9,706 samples, 3.61%)</title><rect x="22.0659%" y="772" width="3.6124%" height="15" fill="rgb(247,98,35)"/><text x="22.3159%" y="782.50">at::..</text></g><g><title>at::TypeDefault::zeros (TypeDefault.cpp:2468) (9,885 samples, 3.68%)</title><rect x="22.0484%" y="756" width="3.6790%" height="15" fill="rgb(247,138,52)"/><text x="22.2984%" y="766.50">at::..</text></g><g><title>c10::impl::detail::with_scattered_tensor_options_impl_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;), &amp;at::TypeDefault::zeros(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;)&gt;, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt; &gt;, c10::guts::typelist::typelist&lt;&gt; &gt;::wrapper (hacky_wrapper_for_legacy_signatures.h:109) (9,906 samples, 3.69%)</title><rect x="22.0410%" y="740" width="3.6868%" height="15" fill="rgb(213,79,30)"/><text x="22.2910%" y="750.50">c10:..</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (10,095 samples, 3.76%)</title><rect x="21.9885%" y="724" width="3.7572%" height="15" fill="rgb(246,177,23)"/><text x="22.2385%" y="734.50">c10:..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (10,137 samples, 3.77%)</title><rect x="21.9881%" y="708" width="3.7728%" height="15" fill="rgb(230,62,27)"/><text x="22.2381%" y="718.50">c10:..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:43) (10,203 samples, 3.80%)</title><rect x="21.9851%" y="692" width="3.7974%" height="15" fill="rgb(216,154,8)"/><text x="22.2351%" y="702.50">c10:..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:53) (10,227 samples, 3.81%)</title><rect x="21.9810%" y="676" width="3.8063%" height="15" fill="rgb(244,35,45)"/><text x="22.2310%" y="686.50">c10:..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (Dispatcher.h:370) (10,299 samples, 3.83%)</title><rect x="21.9684%" y="660" width="3.8331%" height="15" fill="rgb(251,115,12)"/><text x="22.2184%" y="670.50">c10:..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::callWithDispatchKey (Dispatcher.h:327) (10,472 samples, 3.90%)</title><rect x="21.9245%" y="644" width="3.8975%" height="15" fill="rgb(240,54,50)"/><text x="22.1745%" y="654.50">c10:..</text></g><g><title>zeros (BackendSelectRegister.cpp:401) (10,610 samples, 3.95%)</title><rect x="21.9051%" y="628" width="3.9488%" height="15" fill="rgb(233,84,52)"/><text x="22.1551%" y="638.50">zero..</text></g><g><title>wrapper (hacky_wrapper_for_legacy_signatures.h:109) (10,856 samples, 4.04%)</title><rect x="21.8169%" y="612" width="4.0404%" height="15" fill="rgb(207,117,47)"/><text x="22.0669%" y="622.50">wrap..</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (11,220 samples, 4.18%)</title><rect x="21.6904%" y="596" width="4.1759%" height="15" fill="rgb(249,43,39)"/><text x="21.9404%" y="606.50">c10::..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (11,263 samples, 4.19%)</title><rect x="21.6881%" y="580" width="4.1919%" height="15" fill="rgb(209,38,44)"/><text x="21.9381%" y="590.50">c10::..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:43) (11,323 samples, 4.21%)</title><rect x="21.6829%" y="564" width="4.2142%" height="15" fill="rgb(236,212,23)"/><text x="21.9329%" y="574.50">c10::..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:53) (11,382 samples, 4.24%)</title><rect x="21.6755%" y="548" width="4.2362%" height="15" fill="rgb(242,79,21)"/><text x="21.9255%" y="558.50">c10::..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (Dispatcher.h:370) (11,492 samples, 4.28%)</title><rect x="21.6591%" y="532" width="4.2771%" height="15" fill="rgb(211,96,35)"/><text x="21.9091%" y="542.50">c10::..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (Dispatcher.h:381) (12,157 samples, 4.52%)</title><rect x="21.4392%" y="516" width="4.5246%" height="15" fill="rgb(253,215,40)"/><text x="21.6892%" y="526.50">c10::..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (Dispatcher.h:323) (13,005 samples, 4.84%)</title><rect x="21.2181%" y="500" width="4.8402%" height="15" fill="rgb(211,81,21)"/><text x="21.4681%" y="510.50">c10::T..</text></g><g><title>at::zeros (Functions.cpp:11200) (13,642 samples, 5.08%)</title><rect x="21.1392%" y="484" width="5.0773%" height="15" fill="rgb(208,190,38)"/><text x="21.3892%" y="494.50">at::ze..</text></g><g><title>torch::zeros(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;)::{lambda()#1}::operator() const (variable_factories.h:616) (13,687 samples, 5.09%)</title><rect x="21.1250%" y="452" width="5.0941%" height="15" fill="rgb(235,213,38)"/><text x="21.3750%" y="462.50">torch:..</text></g><g><title>at::AutoNonVariableTypeMode::~AutoNonVariableTypeMode (LegacyTypeDispatch.h:46) (13,687 samples, 5.09%)</title><rect x="21.1250%" y="468" width="5.0941%" height="15" fill="rgb(237,122,38)"/><text x="21.3750%" y="478.50">at::Au..</text></g><g><title>torch::zeros (variable_factories.h:618) (13,816 samples, 5.14%)</title><rect x="21.1228%" y="436" width="5.1421%" height="15" fill="rgb(244,218,35)"/><text x="21.3728%" y="446.50">torch:..</text></g><g><title>c10::TensorOptions::TensorOptions (TensorOptions.h:145) (14,320 samples, 5.33%)</title><rect x="20.9564%" y="420" width="5.3296%" height="15" fill="rgb(240,68,47)"/><text x="21.2064%" y="430.50">c10::Te..</text></g><g><title>Video::NextNoPTS (Video.cpp:421) (14,364 samples, 5.35%)</title><rect x="20.9561%" y="404" width="5.3460%" height="15" fill="rgb(210,16,53)"/><text x="21.2061%" y="414.50">Video::..</text></g><g><title>at::native::fill_ (Fill.cpp:38) (3,452 samples, 1.28%)</title><rect x="27.1350%" y="1076" width="1.2848%" height="15" fill="rgb(235,124,12)"/><text x="27.3850%" y="1086.50"></text></g><g><title>at::TypeDefault::fill__Scalar (TypeDefault.cpp:1052) (3,594 samples, 1.34%)</title><rect x="27.1291%" y="1060" width="1.3376%" height="15" fill="rgb(224,169,11)"/><text x="27.3791%" y="1070.50"></text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor&amp; (*)(at::Tensor&amp;, c10::Scalar), at::Tensor&amp;, c10::guts::typelist::typelist&lt;at::Tensor&amp;, c10::Scalar&gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (3,697 samples, 1.38%)</title><rect x="27.0915%" y="1044" width="1.3760%" height="15" fill="rgb(250,166,2)"/><text x="27.3415%" y="1054.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor&amp; (*)(at::Tensor&amp;, c10::Scalar), at::Tensor&amp;, c10::guts::typelist::typelist&lt;at::Tensor&amp;, c10::Scalar&gt; &gt;, at::Tensor&amp; (at::Tensor&amp;, c10::Scalar)&gt;::call (make_boxed_from_unboxed_functor.h:416) (3,714 samples, 1.38%)</title><rect x="27.0878%" y="1028" width="1.3823%" height="15" fill="rgb(242,216,29)"/><text x="27.3378%" y="1038.50"></text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Scalar&gt; (KernelFunction_impl.h:43) (3,739 samples, 1.39%)</title><rect x="27.0818%" y="1012" width="1.3916%" height="15" fill="rgb(230,116,27)"/><text x="27.3318%" y="1022.50"></text></g><g><title>c10::KernelFunction::call&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Scalar&gt; (KernelFunction_impl.h:53) (3,747 samples, 1.39%)</title><rect x="27.0807%" y="996" width="1.3946%" height="15" fill="rgb(228,99,48)"/><text x="27.3307%" y="1006.50"></text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Scalar&gt; (Dispatcher.h:370) (3,840 samples, 1.43%)</title><rect x="27.0509%" y="980" width="1.4292%" height="15" fill="rgb(253,11,6)"/><text x="27.3009%" y="990.50"></text></g><g><title>c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Scalar&gt; (Dispatcher.h:381) (3,939 samples, 1.47%)</title><rect x="27.0144%" y="964" width="1.4660%" height="15" fill="rgb(247,143,39)"/><text x="27.2644%" y="974.50"></text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor&amp; (at::Tensor&amp;, c10::Scalar)&gt;::call (Dispatcher.h:323) (4,097 samples, 1.52%)</title><rect x="26.9608%" y="948" width="1.5248%" height="15" fill="rgb(236,97,10)"/><text x="27.2108%" y="958.50"></text></g><g><title>at::Tensor::fill_ (TensorMethods.cpp:1932) (4,100 samples, 1.53%)</title><rect x="26.9605%" y="932" width="1.5259%" height="15" fill="rgb(233,208,19)"/><text x="27.2105%" y="942.50"></text></g><g><title>at::native::zero_ (Fill.cpp:98) (4,151 samples, 1.54%)</title><rect x="26.9582%" y="916" width="1.5449%" height="15" fill="rgb(216,164,2)"/><text x="27.2082%" y="926.50"></text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (KernelFunction_impl.h:44) (4,209 samples, 1.57%)</title><rect x="26.9381%" y="852" width="1.5665%" height="15" fill="rgb(220,129,5)"/><text x="27.1881%" y="862.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor&amp; (*)(at::Tensor&amp;), at::Tensor&amp;, c10::guts::typelist::typelist&lt;at::Tensor&amp;&gt; &gt;, at::Tensor&amp; (at::Tensor&amp;)&gt;::call (make_boxed_from_unboxed_functor.h:417) (4,196 samples, 1.56%)</title><rect x="26.9430%" y="868" width="1.5617%" height="15" fill="rgb(242,17,10)"/><text x="27.1930%" y="878.50"></text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor&amp; (*)(at::Tensor&amp;), at::Tensor&amp;, c10::guts::typelist::typelist&lt;at::Tensor&amp;&gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:19) (4,183 samples, 1.56%)</title><rect x="26.9478%" y="884" width="1.5568%" height="15" fill="rgb(242,107,0)"/><text x="27.1978%" y="894.50"></text></g><g><title>at::CPUType::zero_ (CPUType.cpp:464) (4,174 samples, 1.55%)</title><rect x="26.9512%" y="900" width="1.5535%" height="15" fill="rgb(251,28,31)"/><text x="27.2012%" y="910.50"></text></g><g><title>c10::KernelFunction::call&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (KernelFunction_impl.h:53) (4,221 samples, 1.57%)</title><rect x="26.9348%" y="836" width="1.5710%" height="15" fill="rgb(233,223,10)"/><text x="27.1848%" y="846.50"></text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (Dispatcher.h:370) (4,259 samples, 1.59%)</title><rect x="26.9236%" y="820" width="1.5851%" height="15" fill="rgb(215,21,27)"/><text x="27.1736%" y="830.50"></text></g><g><title>at::Tensor::zero_ (TensorMethods.cpp:4837) (4,640 samples, 1.73%)</title><rect x="26.7833%" y="772" width="1.7269%" height="15" fill="rgb(232,23,21)"/><text x="27.0333%" y="782.50"></text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor&amp; (at::Tensor&amp;)&gt;::call (Dispatcher.h:324) (4,610 samples, 1.72%)</title><rect x="26.7945%" y="788" width="1.7158%" height="15" fill="rgb(244,5,23)"/><text x="27.0445%" y="798.50"></text></g><g><title>c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (Dispatcher.h:382) (4,465 samples, 1.66%)</title><rect x="26.8484%" y="804" width="1.6618%" height="15" fill="rgb(226,81,46)"/><text x="27.0984%" y="814.50"></text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (Dispatcher.h:381) (2,704 samples, 1.01%)</title><rect x="28.6148%" y="804" width="1.0064%" height="15" fill="rgb(247,70,30)"/><text x="28.8648%" y="814.50"></text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (Dispatcher.h:323) (3,001 samples, 1.12%)</title><rect x="28.5314%" y="788" width="1.1169%" height="15" fill="rgb(212,68,19)"/><text x="28.7814%" y="798.50"></text></g><g><title>at::empty (Functions.cpp:4098) (3,124 samples, 1.16%)</title><rect x="28.5184%" y="772" width="1.1627%" height="15" fill="rgb(240,187,13)"/><text x="28.7684%" y="782.50"></text></g><g><title>at::native::zeros (TensorFactories.cpp:844) (7,823 samples, 2.91%)</title><rect x="26.7740%" y="756" width="2.9116%" height="15" fill="rgb(223,113,26)"/><text x="27.0240%" y="766.50">at..</text></g><g><title>at::TypeDefault::zeros (TypeDefault.cpp:2468) (7,884 samples, 2.93%)</title><rect x="26.7714%" y="740" width="2.9343%" height="15" fill="rgb(206,192,2)"/><text x="27.0214%" y="750.50">at..</text></g><g><title>c10::impl::detail::with_scattered_tensor_options_impl_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;), &amp;at::TypeDefault::zeros(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;)&gt;, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt; &gt;, c10::guts::typelist::typelist&lt;&gt; &gt;::wrapper (hacky_wrapper_for_legacy_signatures.h:109) (7,909 samples, 2.94%)</title><rect x="26.7636%" y="724" width="2.9436%" height="15" fill="rgb(241,108,4)"/><text x="27.0136%" y="734.50">c1..</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (8,054 samples, 3.00%)</title><rect x="26.7226%" y="708" width="2.9976%" height="15" fill="rgb(247,173,49)"/><text x="26.9726%" y="718.50">c10..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (8,082 samples, 3.01%)</title><rect x="26.7223%" y="692" width="3.0080%" height="15" fill="rgb(224,114,35)"/><text x="26.9723%" y="702.50">c10..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:43) (8,116 samples, 3.02%)</title><rect x="26.7208%" y="676" width="3.0206%" height="15" fill="rgb(245,159,27)"/><text x="26.9708%" y="686.50">c10..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:53) (8,136 samples, 3.03%)</title><rect x="26.7163%" y="660" width="3.0281%" height="15" fill="rgb(245,172,44)"/><text x="26.9663%" y="670.50">c10..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (Dispatcher.h:370) (8,200 samples, 3.05%)</title><rect x="26.7055%" y="644" width="3.0519%" height="15" fill="rgb(236,23,11)"/><text x="26.9555%" y="654.50">c10..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::callWithDispatchKey (Dispatcher.h:327) (8,356 samples, 3.11%)</title><rect x="26.6657%" y="628" width="3.1099%" height="15" fill="rgb(205,117,38)"/><text x="26.9157%" y="638.50">c10..</text></g><g><title>zeros (BackendSelectRegister.cpp:401) (8,430 samples, 3.14%)</title><rect x="26.6579%" y="612" width="3.1375%" height="15" fill="rgb(237,72,25)"/><text x="26.9079%" y="622.50">zer..</text></g><g><title>wrapper (hacky_wrapper_for_legacy_signatures.h:109) (8,526 samples, 3.17%)</title><rect x="26.6233%" y="596" width="3.1732%" height="15" fill="rgb(244,70,9)"/><text x="26.8733%" y="606.50">wra..</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (8,706 samples, 3.24%)</title><rect x="26.5615%" y="580" width="3.2402%" height="15" fill="rgb(217,125,39)"/><text x="26.8115%" y="590.50">c10..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (8,738 samples, 3.25%)</title><rect x="26.5607%" y="564" width="3.2521%" height="15" fill="rgb(235,36,10)"/><text x="26.8107%" y="574.50">c10..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:43) (8,767 samples, 3.26%)</title><rect x="26.5596%" y="548" width="3.2629%" height="15" fill="rgb(251,123,47)"/><text x="26.8096%" y="558.50">c10..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:53) (8,782 samples, 3.27%)</title><rect x="26.5589%" y="532" width="3.2685%" height="15" fill="rgb(221,13,13)"/><text x="26.8089%" y="542.50">c10..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (Dispatcher.h:370) (8,848 samples, 3.29%)</title><rect x="26.5473%" y="516" width="3.2931%" height="15" fill="rgb(238,131,9)"/><text x="26.7973%" y="526.50">c10..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (Dispatcher.h:381) (9,032 samples, 3.36%)</title><rect x="26.4926%" y="500" width="3.3615%" height="15" fill="rgb(211,50,8)"/><text x="26.7426%" y="510.50">c10..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (Dispatcher.h:323) (9,311 samples, 3.47%)</title><rect x="26.4245%" y="484" width="3.4654%" height="15" fill="rgb(245,182,24)"/><text x="26.6745%" y="494.50">c10..</text></g><g><title>at::zeros (Functions.cpp:11200) (9,441 samples, 3.51%)</title><rect x="26.4007%" y="468" width="3.5138%" height="15" fill="rgb(242,14,37)"/><text x="26.6507%" y="478.50">at:..</text></g><g><title>torch::zeros(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;)::{lambda()#1}::operator() const (variable_factories.h:616) (9,460 samples, 3.52%)</title><rect x="26.3966%" y="436" width="3.5208%" height="15" fill="rgb(246,228,12)"/><text x="26.6466%" y="446.50">tor..</text></g><g><title>at::AutoNonVariableTypeMode::~AutoNonVariableTypeMode (LegacyTypeDispatch.h:46) (9,460 samples, 3.52%)</title><rect x="26.3966%" y="452" width="3.5208%" height="15" fill="rgb(213,55,15)"/><text x="26.6466%" y="462.50">at:..</text></g><g><title>torch::zeros (variable_factories.h:618) (9,522 samples, 3.54%)</title><rect x="26.3959%" y="420" width="3.5439%" height="15" fill="rgb(209,9,3)"/><text x="26.6459%" y="430.50">torc..</text></g><g><title>Video::NextNoPTS (Video.cpp:425) (9,827 samples, 3.66%)</title><rect x="26.3032%" y="404" width="3.6574%" height="15" fill="rgb(230,59,30)"/><text x="26.5532%" y="414.50">Vide..</text></g><g><title>ffmpeg::Decoder::getFrame (decoder.cpp:487) (2,743 samples, 1.02%)</title><rect x="30.2625%" y="436" width="1.0209%" height="15" fill="rgb(209,121,21)"/><text x="30.5125%" y="446.50"></text></g><g><title>av_read_frame (libavformat.so.58.45.100) (2,742 samples, 1.02%)</title><rect x="30.2628%" y="452" width="1.0205%" height="15" fill="rgb(220,109,13)"/><text x="30.5128%" y="462.50"></text></g><g><title>0x7f7f23b42e5a (libavcodec.so.58.91.100) (6,298 samples, 2.34%)</title><rect x="32.3850%" y="548" width="2.3440%" height="15" fill="rgb(232,18,1)"/><text x="32.6350%" y="558.50">0..</text></g><g><title>0x7f7f23b42e89 (libavcodec.so.58.91.100) (3,139 samples, 1.17%)</title><rect x="34.8306%" y="548" width="1.1683%" height="15" fill="rgb(215,41,42)"/><text x="35.0806%" y="558.50"></text></g><g><title>0x7f7f23b43caa (libavcodec.so.58.91.100) (10,142 samples, 3.77%)</title><rect x="32.2778%" y="532" width="3.7747%" height="15" fill="rgb(224,123,36)"/><text x="32.5278%" y="542.50">0x7f..</text></g><g><title>0x7f7f23b4958a (libavcodec.so.58.91.100) (2,847 samples, 1.06%)</title><rect x="38.7132%" y="580" width="1.0596%" height="15" fill="rgb(240,125,3)"/><text x="38.9632%" y="590.50"></text></g><g><title>0x7f7f23b4b76d (libavcodec.so.58.91.100) (8,862 samples, 3.30%)</title><rect x="43.5646%" y="580" width="3.2983%" height="15" fill="rgb(205,98,50)"/><text x="43.8146%" y="590.50">0x7..</text></g><g><title>0x7f7f23b96720 (libavcodec.so.58.91.100) (45,828 samples, 17.06%)</title><rect x="37.4091%" y="564" width="17.0563%" height="15" fill="rgb(205,185,37)"/><text x="37.6591%" y="574.50">0x7f7f23b96720 (libavcodec..</text></g><g><title>0x7f7f23b96a3c (libavcodec.so.58.91.100) (8,044 samples, 2.99%)</title><rect x="54.5399%" y="564" width="2.9938%" height="15" fill="rgb(238,207,15)"/><text x="54.7899%" y="574.50">0x7..</text></g><g><title>0x7f7f23b93411 (libavcodec.so.58.91.100) (2,842 samples, 1.06%)</title><rect x="58.9286%" y="580" width="1.0577%" height="15" fill="rgb(213,199,42)"/><text x="59.1786%" y="590.50"></text></g><g><title>0x7f7f23b96aed (libavcodec.so.58.91.100) (6,610 samples, 2.46%)</title><rect x="57.5609%" y="564" width="2.4601%" height="15" fill="rgb(235,201,11)"/><text x="57.8109%" y="574.50">0x..</text></g><g><title>0x7f7f23b98321 (libavcodec.so.58.91.100) (61,411 samples, 22.86%)</title><rect x="37.2167%" y="548" width="22.8560%" height="15" fill="rgb(207,46,11)"/><text x="37.4667%" y="558.50">0x7f7f23b98321 (libavcodec.so.58.91...</text></g><g><title>0x7f7f23b9e4f0 (libavcodec.so.58.91.100) (61,426 samples, 22.86%)</title><rect x="37.2122%" y="532" width="22.8616%" height="15" fill="rgb(241,35,35)"/><text x="37.4622%" y="542.50">0x7f7f23b9e4f0 (libavcodec.so.58.91...</text></g><g><title>0x7f7f23a6eef7 (libavcodec.so.58.91.100) (76,619 samples, 28.52%)</title><rect x="31.5588%" y="516" width="28.5162%" height="15" fill="rgb(243,32,47)"/><text x="31.8088%" y="526.50">0x7f7f23a6eef7 (libavcodec.so.58.91.100)</text></g><g><title>ffmpeg::Stream::decodePacket (stream.cpp:144) (77,348 samples, 28.79%)</title><rect x="31.3924%" y="468" width="28.7875%" height="15" fill="rgb(247,202,23)"/><text x="31.6424%" y="478.50">ffmpeg::Stream::decodePacket (stream.cpp:144)</text></g><g><title>ffmpeg::Stream::analyzePacket (stream.cpp:98) (77,038 samples, 28.67%)</title><rect x="31.5078%" y="484" width="28.6721%" height="15" fill="rgb(219,102,11)"/><text x="31.7578%" y="494.50">ffmpeg::Stream::analyzePacket (stream.cpp:98)</text></g><g><title>avcodec_send_packet (libavcodec.so.58.91.100) (77,031 samples, 28.67%)</title><rect x="31.5104%" y="500" width="28.6695%" height="15" fill="rgb(243,110,44)"/><text x="31.7604%" y="510.50">avcodec_send_packet (libavcodec.so.58.91.100)</text></g><g><title>ffmpeg::VideoStream::copyFrameBytes (video_stream.cpp:115) (3,162 samples, 1.18%)</title><rect x="60.2287%" y="484" width="1.1768%" height="15" fill="rgb(222,74,54)"/><text x="60.4787%" y="494.50"></text></g><g><title>ffmpeg::Stream::decodePacket (stream.cpp:147) (3,303 samples, 1.23%)</title><rect x="60.1799%" y="468" width="1.2293%" height="15" fill="rgb(216,99,12)"/><text x="60.4299%" y="478.50"></text></g><g><title>ffmpeg::Decoder::processPacket (decoder.cpp:600) (80,678 samples, 30.03%)</title><rect x="31.3838%" y="452" width="30.0269%" height="15" fill="rgb(226,22,26)"/><text x="31.6338%" y="462.50">ffmpeg::Decoder::processPacket (decoder.cpp:600)</text></g><g><title>ffmpeg::Decoder::getFrame (decoder.cpp:517) (80,837 samples, 30.09%)</title><rect x="31.3526%" y="436" width="30.0860%" height="15" fill="rgb(217,163,10)"/><text x="31.6026%" y="446.50">ffmpeg::Decoder::getFrame (decoder.cpp:517)</text></g><g><title>ffmpeg::SyncDecoder::decode (sync_decoder.cpp:72) (86,221 samples, 32.09%)</title><rect x="29.9755%" y="420" width="32.0899%" height="15" fill="rgb(213,25,53)"/><text x="30.2255%" y="430.50">ffmpeg::SyncDecoder::decode (sync_decoder.cpp:72)</text></g><g><title>Video::NextNoPTS (Video.cpp:426) (86,299 samples, 32.12%)</title><rect x="29.9606%" y="404" width="32.1189%" height="15" fill="rgb(252,105,26)"/><text x="30.2106%" y="414.50">Video::NextNoPTS (Video.cpp:426)</text></g><g><title>futex_wake (futex.h:66) (4,506 samples, 1.68%)</title><rect x="65.7366%" y="1332" width="1.6771%" height="15" fill="rgb(220,39,43)"/><text x="65.9866%" y="1342.50"></text></g><g><title>GOMP_parallel (parallel.c:171) (7,261 samples, 2.70%)</title><rect x="64.8292%" y="1300" width="2.7024%" height="15" fill="rgb(229,68,48)"/><text x="65.0792%" y="1310.50">GO..</text></g><g><title>gomp_team_start (team.c:861) (4,825 samples, 1.80%)</title><rect x="65.7358%" y="1316" width="1.7958%" height="15" fill="rgb(252,8,32)"/><text x="65.9858%" y="1326.50">g..</text></g><g><title>Vec256 (vec256_base.h:117) (11,350 samples, 4.22%)</title><rect x="71.0231%" y="1556" width="4.2243%" height="15" fill="rgb(223,20,43)"/><text x="71.2731%" y="1566.50">Vec25..</text></g><g><title>apply&lt;at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt;, std::tuple&lt;&gt; &gt; (C++17.h:132) (14,861 samples, 5.53%)</title><rect x="70.4063%" y="1508" width="5.5310%" height="15" fill="rgb(229,81,49)"/><text x="70.6563%" y="1518.50">apply&lt;a..</text></g><g><title>apply_impl&lt;at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt;, std::tuple&lt;&gt; &gt; (C++17.h:125) (14,161 samples, 5.27%)</title><rect x="70.6669%" y="1524" width="5.2705%" height="15" fill="rgb(236,28,36)"/><text x="70.9169%" y="1534.50">apply_..</text></g><g><title>operator() (FillKernel.cpp.AVX2.cpp:32) (13,929 samples, 5.18%)</title><rect x="70.7532%" y="1540" width="5.1841%" height="15" fill="rgb(249,185,26)"/><text x="71.0032%" y="1550.50">operat..</text></g><g><title>vectorized_loop&lt;at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt;, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt; &gt; (Loops.h:153) (17,300 samples, 6.44%)</title><rect x="69.8782%" y="1492" width="6.4387%" height="15" fill="rgb(249,174,33)"/><text x="70.1282%" y="1502.50">vectoriz..</text></g><g><title>Vec256 (vec256_base.h:117) (11,770 samples, 4.38%)</title><rect x="77.2977%" y="1556" width="4.3806%" height="15" fill="rgb(233,201,37)"/><text x="77.5477%" y="1566.50">Vec25..</text></g><g><title>apply&lt;at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt;, std::tuple&lt;&gt; &gt; (C++17.h:132) (15,197 samples, 5.66%)</title><rect x="76.6784%" y="1508" width="5.6560%" height="15" fill="rgb(221,78,26)"/><text x="76.9284%" y="1518.50">apply&lt;a..</text></g><g><title>apply_impl&lt;at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt;, std::tuple&lt;&gt; &gt; (C++17.h:125) (14,392 samples, 5.36%)</title><rect x="76.9780%" y="1524" width="5.3564%" height="15" fill="rgb(250,127,30)"/><text x="77.2280%" y="1534.50">apply_i..</text></g><g><title>operator() (FillKernel.cpp.AVX2.cpp:32) (14,139 samples, 5.26%)</title><rect x="77.0721%" y="1540" width="5.2623%" height="15" fill="rgb(230,49,44)"/><text x="77.3221%" y="1550.50">operat..</text></g><g><title>vectorized_loop&lt;at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt;, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt; &gt; (Loops.h:154) (16,727 samples, 6.23%)</title><rect x="76.3170%" y="1492" width="6.2255%" height="15" fill="rgb(229,67,23)"/><text x="76.5670%" y="1502.50">vectoriz..</text></g><g><title>vectorized_loop&lt;at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt;, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt; &gt; (Loops.h:155) (2,999 samples, 1.12%)</title><rect x="82.5424%" y="1492" width="1.1162%" height="15" fill="rgb(249,83,47)"/><text x="82.7924%" y="1502.50"></text></g><g><title> vec_func_t = at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt;]::&lt;lambda(char**, const int64_t*, int64_t)&gt; &gt; (FunctionRef.h:39) (42,538 samples, 15.83%)</title><rect x="67.8320%" y="1460" width="15.8319%" height="15" fill="rgb(215,43,3)"/><text x="68.0820%" y="1470.50"> vec_func_t = at::native..</text></g><g><title>operator() (Loops.h:234) (42,510 samples, 15.82%)</title><rect x="67.8424%" y="1476" width="15.8214%" height="15" fill="rgb(238,154,13)"/><text x="68.0924%" y="1486.50">operator() (Loops.h:234)</text></g><g><title>callback_fn&lt;at::native::(anonymous namespace)::cpu_kernel_vec(at::TensorIterator&amp;, func_t&amp;&amp;, vec_func_t&amp;&amp;) [with bool check_dynamic_cast = true (42,556 samples, 15.84%)</title><rect x="67.8271%" y="1428" width="15.8386%" height="15" fill="rgb(219,56,2)"/><text x="68.0771%" y="1438.50">callback_fn&lt;at::native::..</text></g><g><title> func_t = at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&amp;, c10::Scalar)::&lt;lambda()&gt;::&lt;lambda()&gt;::&lt;lambda()&gt; (42,556 samples, 15.84%)</title><rect x="67.8271%" y="1444" width="15.8386%" height="15" fill="rgb(233,0,4)"/><text x="68.0771%" y="1454.50"> func_t = at::native::(a..</text></g><g><title>c10::function_ref&lt;void (char**, long const*, long)&gt;::operator() (FunctionRef.h:59) (42,562 samples, 15.84%)</title><rect x="67.8256%" y="1412" width="15.8408%" height="15" fill="rgb(235,30,7)"/><text x="68.0756%" y="1422.50">c10::function_ref&lt;void (..</text></g><g><title>callback_fn&lt;at::TensorIterator::for_each(at::TensorIterator::loop_t, int64_t)::&lt;lambda(char**, const int64_t*, int64_t, int64_t)&gt; &gt; (FunctionRef.h:39) (42,713 samples, 15.90%)</title><rect x="67.7724%" y="1380" width="15.8970%" height="15" fill="rgb(250,79,13)"/><text x="68.0224%" y="1390.50">callback_fn&lt;at::TensorIt..</text></g><g><title>operator() (TensorIterator.cpp:592) (42,711 samples, 15.90%)</title><rect x="67.7732%" y="1396" width="15.8963%" height="15" fill="rgb(211,146,34)"/><text x="68.0232%" y="1406.50">operator() (TensorIterat..</text></g><g><title>c10::function_ref&lt;void (char**, long const*, long, long)&gt;::operator() (FunctionRef.h:59) (42,792 samples, 15.93%)</title><rect x="67.7650%" y="1364" width="15.9264%" height="15" fill="rgb(228,22,38)"/><text x="68.0150%" y="1374.50">c10::function_ref&lt;void (..</text></g><g><title>at::TensorIterator::serial_for_each (TensorIterator.cpp:633) (42,914 samples, 15.97%)</title><rect x="67.7211%" y="1348" width="15.9718%" height="15" fill="rgb(235,168,5)"/><text x="67.9711%" y="1358.50">at::TensorIterator::seria..</text></g><g><title>operator() (TensorIterator.cpp:604) (43,588 samples, 16.22%)</title><rect x="67.5525%" y="1332" width="16.2227%" height="15" fill="rgb(221,155,16)"/><text x="67.8025%" y="1342.50">operator() (TensorIterato..</text></g><g><title>GOMP_parallel (parallel.c:173) (43,645 samples, 16.24%)</title><rect x="67.5316%" y="1300" width="16.2439%" height="15" fill="rgb(215,215,53)"/><text x="67.7816%" y="1310.50">GOMP_parallel (parallel.c..</text></g><g><title>at::parallel_for&lt;at::TensorIterator::for_each(c10::function_ref&lt;void (char**, long const*, long, long)&gt;, long)::{lambda(long, long)#1}&gt; [clone ._omp_fn.0] (ParallelOpenMP.h:48) (43,600 samples, 16.23%)</title><rect x="67.5484%" y="1316" width="16.2271%" height="15" fill="rgb(223,4,10)"/><text x="67.7984%" y="1326.50">at::parallel_for&lt;at::Tens..</text></g><g><title>do_spin (wait.h:56) (14,294 samples, 5.32%)</title><rect x="83.8510%" y="1348" width="5.3200%" height="15" fill="rgb(234,103,6)"/><text x="84.1010%" y="1358.50">do_spin..</text></g><g><title>do_spin (wait.h:57) (4,630 samples, 1.72%)</title><rect x="89.1710%" y="1348" width="1.7232%" height="15" fill="rgb(227,97,0)"/><text x="89.4210%" y="1358.50"></text></g><g><title>do_wait (wait.h:66) (18,929 samples, 7.05%)</title><rect x="83.8503%" y="1332" width="7.0450%" height="15" fill="rgb(234,150,53)"/><text x="84.1003%" y="1342.50">do_wait (..</text></g><g><title>gomp_team_barrier_wait_end (bar.c:113) (19,118 samples, 7.12%)</title><rect x="83.8495%" y="1316" width="7.1154%" height="15" fill="rgb(228,201,54)"/><text x="84.0995%" y="1326.50">gomp_team_..</text></g><g><title>gomp_team_end (team.c:935) (19,339 samples, 7.20%)</title><rect x="83.7826%" y="1300" width="7.1976%" height="15" fill="rgb(222,22,37)"/><text x="84.0326%" y="1310.50">gomp_team_..</text></g><g><title>parallel_for&lt;at::TensorIterator::for_each(at::TensorIterator::loop2d_t, int64_t)::&lt;lambda(int64_t, int64_t)&gt; &gt; (ParallelOpenMP.h:56) (70,412 samples, 26.21%)</title><rect x="64.7916%" y="1284" width="26.2061%" height="15" fill="rgb(237,53,32)"/><text x="65.0416%" y="1294.50">parallel_for&lt;at::TensorIterator::for_each(..</text></g><g><title>at::TensorIterator::for_each (TensorIterator.cpp:602) (70,588 samples, 26.27%)</title><rect x="64.7283%" y="1268" width="26.2716%" height="15" fill="rgb(233,25,53)"/><text x="64.9783%" y="1278.50">at::TensorIterator::for_each (TensorIterat..</text></g><g><title>cpu_kernel_vec&lt;&gt; (Loops.h:235) (70,724 samples, 26.32%)</title><rect x="64.6811%" y="1236" width="26.3222%" height="15" fill="rgb(210,40,34)"/><text x="64.9311%" y="1246.50">cpu_kernel_vec&lt;&gt; (Loops.h:235)</text></g><g><title>at::TensorIterator::for_each (TensorIterator.cpp:593) (70,703 samples, 26.31%)</title><rect x="64.6889%" y="1252" width="26.3144%" height="15" fill="rgb(241,220,44)"/><text x="64.9389%" y="1262.50">at::TensorIterator::for_each (TensorIterat..</text></g><g><title>fill_kernel (FillKernel.cpp.AVX2.cpp:40) (71,094 samples, 26.46%)</title><rect x="64.5713%" y="1188" width="26.4599%" height="15" fill="rgb(235,28,35)"/><text x="64.8213%" y="1198.50">fill_kernel (FillKernel.cpp.AVX2.cpp:40)</text></g><g><title>operator() (FillKernel.cpp.AVX2.cpp:32) (71,083 samples, 26.46%)</title><rect x="64.5754%" y="1204" width="26.4558%" height="15" fill="rgb(210,56,17)"/><text x="64.8254%" y="1214.50">operator() (FillKernel.cpp.AVX2.cpp:32)</text></g><g><title>operator() (FillKernel.cpp.AVX2.cpp:32) (71,035 samples, 26.44%)</title><rect x="64.5932%" y="1220" width="26.4379%" height="15" fill="rgb(224,130,29)"/><text x="64.8432%" y="1230.50">operator() (FillKernel.cpp.AVX2.cpp:32)</text></g><g><title>at::native::DispatchStub&lt;void (*)(at::TensorIterator&amp;, c10::Scalar), at::native::fill_stub&gt;::operator()&lt;at::TensorIterator&amp;, c10::Scalar&amp;&gt; (DispatchStub.h:76) (71,172 samples, 26.49%)</title><rect x="64.5575%" y="1172" width="26.4889%" height="15" fill="rgb(235,212,8)"/><text x="64.8075%" y="1182.50">at::native::DispatchStub&lt;void (*)(at::Tens..</text></g><g><title>at::native::fill_out (Fill.cpp:34) (71,242 samples, 26.51%)</title><rect x="64.5415%" y="1156" width="26.5150%" height="15" fill="rgb(223,33,50)"/><text x="64.7915%" y="1166.50">at::native::fill_out (Fill.cpp:34)</text></g><g><title>at::native::fill_ (Fill.cpp:38) (73,717 samples, 27.44%)</title><rect x="63.6226%" y="1140" width="27.4361%" height="15" fill="rgb(219,149,13)"/><text x="63.8726%" y="1150.50">at::native::fill_ (Fill.cpp:38)</text></g><g><title>at::TypeDefault::fill__Scalar (TypeDefault.cpp:1052) (73,972 samples, 27.53%)</title><rect x="63.6118%" y="1124" width="27.5310%" height="15" fill="rgb(250,156,29)"/><text x="63.8618%" y="1134.50">at::TypeDefault::fill__Scalar (TypeDefault.c..</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor&amp; (*)(at::Tensor&amp;, c10::Scalar), at::Tensor&amp;, c10::guts::typelist::typelist&lt;at::Tensor&amp;, c10::Scalar&gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (74,106 samples, 27.58%)</title><rect x="63.5623%" y="1108" width="27.5809%" height="15" fill="rgb(216,193,19)"/><text x="63.8123%" y="1118.50">c10::impl::detail::WrapFunctionIntoRuntimeFu..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor&amp; (*)(at::Tensor&amp;, c10::Scalar), at::Tensor&amp;, c10::guts::typelist::typelist&lt;at::Tensor&amp;, c10::Scalar&gt; &gt;, at::Tensor&amp; (at::Tensor&amp;, c10::Scalar)&gt;::call (make_boxed_from_unboxed_functor.h:416) (74,138 samples, 27.59%)</title><rect x="63.5563%" y="1092" width="27.5928%" height="15" fill="rgb(216,135,14)"/><text x="63.8063%" y="1102.50">c10::impl::wrap_kernel_functor_unboxed_&lt;c10:..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Scalar&gt; (KernelFunction_impl.h:43) (74,160 samples, 27.60%)</title><rect x="63.5519%" y="1076" width="27.6010%" height="15" fill="rgb(241,47,5)"/><text x="63.8019%" y="1086.50">c10::callUnboxedKernelFunction&lt;at::Tensor&amp;, ..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Scalar&gt; (KernelFunction_impl.h:53) (74,189 samples, 27.61%)</title><rect x="63.5496%" y="1060" width="27.6118%" height="15" fill="rgb(233,42,35)"/><text x="63.7996%" y="1070.50">c10::KernelFunction::call&lt;at::Tensor&amp;, at::T..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Scalar&gt; (Dispatcher.h:370) (74,421 samples, 27.70%)</title><rect x="63.4730%" y="1044" width="27.6981%" height="15" fill="rgb(231,13,6)"/><text x="63.7230%" y="1054.50">c10::Dispatcher::callWithDispatchKey&lt;at::Ten..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor&amp;, c10::Scalar&gt; (Dispatcher.h:381) (74,563 samples, 27.75%)</title><rect x="63.4205%" y="1028" width="27.7510%" height="15" fill="rgb(207,181,40)"/><text x="63.6705%" y="1038.50">c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor&amp; (at::Tensor&amp;, c10::Scalar)&gt;::call (Dispatcher.h:323) (74,790 samples, 27.84%)</title><rect x="63.3468%" y="1012" width="27.8355%" height="15" fill="rgb(254,173,49)"/><text x="63.5968%" y="1022.50">c10::TypedOperatorHandle&lt;at::Tensor&amp; (at::Ten..</text></g><g><title>at::Tensor::fill_ (TensorMethods.cpp:1932) (74,817 samples, 27.85%)</title><rect x="63.3420%" y="996" width="27.8455%" height="15" fill="rgb(221,1,38)"/><text x="63.5920%" y="1006.50">at::Tensor::fill_ (TensorMethods.cpp:1932)</text></g><g><title>at::native::zero_ (Fill.cpp:98) (74,899 samples, 27.88%)</title><rect x="63.3315%" y="980" width="27.8760%" height="15" fill="rgb(206,124,46)"/><text x="63.5815%" y="990.50">at::native::zero_ (Fill.cpp:98)</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (KernelFunction_impl.h:44) (75,006 samples, 27.92%)</title><rect x="63.2947%" y="916" width="27.9159%" height="15" fill="rgb(249,21,11)"/><text x="63.5447%" y="926.50">c10::callUnboxedKernelFunction&lt;at::Tensor&amp;, a..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor&amp; (*)(at::Tensor&amp;), at::Tensor&amp;, c10::guts::typelist::typelist&lt;at::Tensor&amp;&gt; &gt;, at::Tensor&amp; (at::Tensor&amp;)&gt;::call (make_boxed_from_unboxed_functor.h:417) (74,984 samples, 27.91%)</title><rect x="63.3029%" y="932" width="27.9077%" height="15" fill="rgb(222,201,40)"/><text x="63.5529%" y="942.50">c10::impl::wrap_kernel_functor_unboxed_&lt;c10::..</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor&amp; (*)(at::Tensor&amp;), at::Tensor&amp;, c10::guts::typelist::typelist&lt;at::Tensor&amp;&gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:19) (74,952 samples, 27.90%)</title><rect x="63.3148%" y="948" width="27.8958%" height="15" fill="rgb(235,61,29)"/><text x="63.5648%" y="958.50">c10::impl::detail::WrapFunctionIntoRuntimeFun..</text></g><g><title>at::CPUType::zero_ (CPUType.cpp:464) (74,938 samples, 27.89%)</title><rect x="63.3200%" y="964" width="27.8905%" height="15" fill="rgb(219,207,3)"/><text x="63.5700%" y="974.50">at::CPUType::zero_ (CPUType.cpp:464)</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (KernelFunction_impl.h:53) (75,024 samples, 27.92%)</title><rect x="63.2906%" y="900" width="27.9226%" height="15" fill="rgb(222,56,46)"/><text x="63.5406%" y="910.50">c10::KernelFunction::call&lt;at::Tensor&amp;, at::Te..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (Dispatcher.h:370) (75,116 samples, 27.96%)</title><rect x="63.2601%" y="884" width="27.9568%" height="15" fill="rgb(239,76,54)"/><text x="63.5101%" y="894.50">c10::Dispatcher::callWithDispatchKey&lt;at::Tens..</text></g><g><title>at::Tensor::zero_ (TensorMethods.cpp:4837) (75,592 samples, 28.13%)</title><rect x="63.0840%" y="836" width="28.1340%" height="15" fill="rgb(231,124,27)"/><text x="63.3340%" y="846.50">at::Tensor::zero_ (TensorMethods.cpp:4837)</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor&amp; (at::Tensor&amp;)&gt;::call (Dispatcher.h:324) (75,529 samples, 28.11%)</title><rect x="63.1075%" y="852" width="28.1105%" height="15" fill="rgb(249,195,6)"/><text x="63.3575%" y="862.50">c10::TypedOperatorHandle&lt;at::Tensor&amp; (at::Ten..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor&amp;&gt; (Dispatcher.h:382) (75,294 samples, 28.02%)</title><rect x="63.1950%" y="868" width="28.0230%" height="15" fill="rgb(237,174,47)"/><text x="63.4450%" y="878.50">c10::Dispatcher::call&lt;at::Tensor&amp;, at::Tensor..</text></g><g><title>at::CPUType::empty_memory_format (CPUType.cpp:176) (4,280 samples, 1.59%)</title><rect x="91.6933%" y="1108" width="1.5929%" height="15" fill="rgb(206,201,31)"/><text x="91.9433%" y="1118.50"></text></g><g><title>c10::impl::detail::with_scattered_tensor_options_impl_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt;), &amp;at::CPUType::empty_memory_format(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt; &gt;, c10::guts::typelist::typelist&lt;c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;::wrapper (hacky_wrapper_for_legacy_signatures.h:109) (4,300 samples, 1.60%)</title><rect x="91.6862%" y="1092" width="1.6004%" height="15" fill="rgb(231,57,52)"/><text x="91.9362%" y="1102.50"></text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (4,477 samples, 1.67%)</title><rect x="91.6367%" y="1076" width="1.6663%" height="15" fill="rgb(248,177,22)"/><text x="91.8867%" y="1086.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (4,510 samples, 1.68%)</title><rect x="91.6348%" y="1060" width="1.6785%" height="15" fill="rgb(215,211,37)"/><text x="91.8848%" y="1070.50"></text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (KernelFunction_impl.h:43) (4,547 samples, 1.69%)</title><rect x="91.6330%" y="1044" width="1.6923%" height="15" fill="rgb(241,128,51)"/><text x="91.8830%" y="1054.50"></text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (KernelFunction_impl.h:53) (4,570 samples, 1.70%)</title><rect x="91.6311%" y="1028" width="1.7009%" height="15" fill="rgb(227,165,31)"/><text x="91.8811%" y="1038.50"></text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (Dispatcher.h:370) (4,821 samples, 1.79%)</title><rect x="91.5556%" y="1012" width="1.7943%" height="15" fill="rgb(228,167,24)"/><text x="91.8056%" y="1022.50">c..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::callWithDispatchKey (Dispatcher.h:327) (5,000 samples, 1.86%)</title><rect x="91.5079%" y="996" width="1.8609%" height="15" fill="rgb(228,143,12)"/><text x="91.7579%" y="1006.50">c..</text></g><g><title>empty_memory_format (BackendSelectRegister.cpp:103) (5,113 samples, 1.90%)</title><rect x="91.4919%" y="980" width="1.9030%" height="15" fill="rgb(249,149,8)"/><text x="91.7419%" y="990.50">e..</text></g><g><title>wrapper (hacky_wrapper_for_legacy_signatures.h:109) (5,174 samples, 1.93%)</title><rect x="91.4767%" y="964" width="1.9257%" height="15" fill="rgb(243,35,44)"/><text x="91.7267%" y="974.50">w..</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (5,339 samples, 1.99%)</title><rect x="91.4201%" y="948" width="1.9871%" height="15" fill="rgb(246,89,9)"/><text x="91.6701%" y="958.50">c..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (5,392 samples, 2.01%)</title><rect x="91.4167%" y="932" width="2.0068%" height="15" fill="rgb(233,213,13)"/><text x="91.6667%" y="942.50">c..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (KernelFunction_impl.h:43) (5,448 samples, 2.03%)</title><rect x="91.4115%" y="916" width="2.0276%" height="15" fill="rgb(233,141,41)"/><text x="91.6615%" y="926.50">c..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (KernelFunction_impl.h:53) (5,473 samples, 2.04%)</title><rect x="91.4100%" y="900" width="2.0370%" height="15" fill="rgb(239,167,4)"/><text x="91.6600%" y="910.50">c..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (Dispatcher.h:370) (5,535 samples, 2.06%)</title><rect x="91.4011%" y="884" width="2.0600%" height="15" fill="rgb(209,217,16)"/><text x="91.6511%" y="894.50">c..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; (Dispatcher.h:381) (5,694 samples, 2.12%)</title><rect x="91.3557%" y="868" width="2.1192%" height="15" fill="rgb(219,88,35)"/><text x="91.6057%" y="878.50">c..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (Dispatcher.h:323) (6,045 samples, 2.25%)</title><rect x="91.2485%" y="852" width="2.2498%" height="15" fill="rgb(220,193,23)"/><text x="91.4985%" y="862.50">c..</text></g><g><title>at::empty (Functions.cpp:4098) (6,210 samples, 2.31%)</title><rect x="91.2325%" y="836" width="2.3112%" height="15" fill="rgb(230,90,52)"/><text x="91.4825%" y="846.50">a..</text></g><g><title>at::native::zeros (TensorFactories.cpp:844) (81,928 samples, 30.49%)</title><rect x="63.0561%" y="820" width="30.4921%" height="15" fill="rgb(252,106,19)"/><text x="63.3061%" y="830.50">at::native::zeros (TensorFactories.cpp:844)</text></g><g><title>at::TypeDefault::zeros (TypeDefault.cpp:2468) (82,079 samples, 30.55%)</title><rect x="63.0465%" y="804" width="30.5483%" height="15" fill="rgb(206,74,20)"/><text x="63.2965%" y="814.50">at::TypeDefault::zeros (TypeDefault.cpp:2468)</text></g><g><title>c10::impl::detail::with_scattered_tensor_options_impl_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;), &amp;at::TypeDefault::zeros(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;)&gt;, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt; &gt;, c10::guts::typelist::typelist&lt;&gt; &gt;::wrapper (hacky_wrapper_for_legacy_signatures.h:109) (82,122 samples, 30.56%)</title><rect x="63.0319%" y="788" width="30.5643%" height="15" fill="rgb(230,138,44)"/><text x="63.2819%" y="798.50">c10::impl::detail::with_scattered_tensor_options_..</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (82,292 samples, 30.63%)</title><rect x="62.9884%" y="772" width="30.6276%" height="15" fill="rgb(235,182,43)"/><text x="63.2384%" y="782.50">c10::impl::detail::WrapFunctionIntoRuntimeFunctor..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (82,337 samples, 30.64%)</title><rect x="62.9865%" y="756" width="30.6443%" height="15" fill="rgb(242,16,51)"/><text x="63.2365%" y="766.50">c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:43) (82,395 samples, 30.67%)</title><rect x="62.9854%" y="740" width="30.6659%" height="15" fill="rgb(248,9,4)"/><text x="63.2354%" y="750.50">c10::callUnboxedKernelFunction&lt;at::Tensor, c10::A..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:53) (82,428 samples, 30.68%)</title><rect x="62.9806%" y="724" width="30.6782%" height="15" fill="rgb(210,31,22)"/><text x="63.2306%" y="734.50">c10::KernelFunction::call&lt;at::Tensor, c10::ArrayR..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (Dispatcher.h:370) (82,502 samples, 30.71%)</title><rect x="62.9631%" y="708" width="30.7057%" height="15" fill="rgb(239,54,39)"/><text x="63.2131%" y="718.50">c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::callWithDispatchKey (Dispatcher.h:327) (82,665 samples, 30.77%)</title><rect x="62.9151%" y="692" width="30.7664%" height="15" fill="rgb(230,99,41)"/><text x="63.1651%" y="702.50">c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;..</text></g><g><title>zeros (BackendSelectRegister.cpp:401) (82,759 samples, 30.80%)</title><rect x="62.8998%" y="676" width="30.8014%" height="15" fill="rgb(253,106,12)"/><text x="63.1498%" y="686.50">zeros (BackendSelectRegister.cpp:401)</text></g><g><title>wrapper (hacky_wrapper_for_legacy_signatures.h:109) (82,900 samples, 30.85%)</title><rect x="62.8529%" y="660" width="30.8539%" height="15" fill="rgb(213,46,41)"/><text x="63.1029%" y="670.50">wrapper (hacky_wrapper_for_legacy_signatures.h:109)</text></g><g><title>c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;::operator() (WrapFunctionIntoRuntimeFunctor.h:18) (83,209 samples, 30.97%)</title><rect x="62.7498%" y="644" width="30.9689%" height="15" fill="rgb(215,133,35)"/><text x="62.9998%" y="654.50">c10::impl::detail::WrapFunctionIntoRuntimeFunctor_..</text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoRuntimeFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (make_boxed_from_unboxed_functor.h:416) (83,248 samples, 30.98%)</title><rect x="62.7495%" y="628" width="30.9834%" height="15" fill="rgb(213,28,5)"/><text x="62.9995%" y="638.50">c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl:..</text></g><g><title>c10::callUnboxedKernelFunction&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:43) (83,294 samples, 31.00%)</title><rect x="62.7457%" y="612" width="31.0005%" height="15" fill="rgb(215,77,49)"/><text x="62.9957%" y="622.50">c10::callUnboxedKernelFunction&lt;at::Tensor, c10::Ar..</text></g><g><title>c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (KernelFunction_impl.h:53) (83,324 samples, 31.01%)</title><rect x="62.7442%" y="596" width="31.0117%" height="15" fill="rgb(248,100,22)"/><text x="62.9942%" y="606.50">c10::KernelFunction::call&lt;at::Tensor, c10::ArrayRe..</text></g><g><title>c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (Dispatcher.h:370) (83,418 samples, 31.05%)</title><rect x="62.7286%" y="580" width="31.0466%" height="15" fill="rgb(208,67,9)"/><text x="62.9786%" y="590.50">c10::Dispatcher::callWithDispatchKey&lt;at::Tensor, c..</text></g><g><title>c10::Dispatcher::call&lt;at::Tensor, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt; &gt; (Dispatcher.h:381) (83,940 samples, 31.24%)</title><rect x="62.5656%" y="564" width="31.2409%" height="15" fill="rgb(219,133,21)"/><text x="62.8156%" y="574.50">c10::Dispatcher::call&lt;at::Tensor, c10::ArrayRef&lt;lo..</text></g><g><title>c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::ScalarType&gt;, c10::optional&lt;c10::Layout&gt;, c10::optional&lt;c10::Device&gt;, c10::optional&lt;bool&gt;)&gt;::call (Dispatcher.h:323) (84,613 samples, 31.49%)</title><rect x="62.3933%" y="548" width="31.4914%" height="15" fill="rgb(246,46,29)"/><text x="62.6433%" y="558.50">c10::TypedOperatorHandle&lt;at::Tensor(c10::ArrayRef&lt;l..</text></g><g><title>at::zeros (Functions.cpp:11200) (84,968 samples, 31.62%)</title><rect x="62.3244%" y="532" width="31.6235%" height="15" fill="rgb(246,185,52)"/><text x="62.5744%" y="542.50">at::zeros (Functions.cpp:11200)</text></g><g><title>torch::zeros(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;)::{lambda()#1}::operator() const (variable_factories.h:616) (85,026 samples, 31.65%)</title><rect x="62.3095%" y="500" width="31.6451%" height="15" fill="rgb(252,136,11)"/><text x="62.5595%" y="510.50">torch::zeros(c10::ArrayRef&lt;long&gt;, c10::TensorOption..</text></g><g><title>at::AutoNonVariableTypeMode::~AutoNonVariableTypeMode (LegacyTypeDispatch.h:46) (85,026 samples, 31.65%)</title><rect x="62.3095%" y="516" width="31.6451%" height="15" fill="rgb(219,138,53)"/><text x="62.5595%" y="526.50">at::AutoNonVariableTypeMode::~AutoNonVariableTypeMo..</text></g><g><title>torch::zeros (variable_factories.h:618) (85,165 samples, 31.70%)</title><rect x="62.3077%" y="484" width="31.6969%" height="15" fill="rgb(211,51,23)"/><text x="62.5577%" y="494.50">torch::zeros (variable_factories.h:618)</text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::intrusive_ptr (intrusive_ptr.h:222) (85,860 samples, 31.96%)</title><rect x="62.0818%" y="468" width="31.9555%" height="15" fill="rgb(247,221,28)"/><text x="62.3318%" y="478.50">c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTe..</text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::operator=&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt; &amp; (intrusive_ptr.h:262) (85,874 samples, 31.96%)</title><rect x="62.0818%" y="452" width="31.9607%" height="15" fill="rgb(251,222,45)"/><text x="62.3318%" y="462.50">c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTe..</text></g><g><title>at::Tensor::operator= &amp; (TensorBody.h:176) (85,875 samples, 31.96%)</title><rect x="62.0818%" y="420" width="31.9611%" height="15" fill="rgb(217,162,53)"/><text x="62.3318%" y="430.50">at::Tensor::operator= &amp; (TensorBody.h:176)</text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::operator= &amp; (intrusive_ptr.h:253) (85,875 samples, 31.96%)</title><rect x="62.0818%" y="436" width="31.9611%" height="15" fill="rgb(229,93,14)"/><text x="62.3318%" y="446.50">c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTe..</text></g><g><title>Video::NextNoPTS (Video.cpp:437) (86,882 samples, 32.34%)</title><rect x="62.0806%" y="404" width="32.3359%" height="15" fill="rgb(209,67,49)"/><text x="62.3306%" y="414.50">Video::NextNoPTS (Video.cpp:437)</text></g><g><title>Video::NextNoPTS (Video.cpp:462) (3,991 samples, 1.49%)</title><rect x="94.4191%" y="404" width="1.4854%" height="15" fill="rgb(213,87,29)"/><text x="94.6691%" y="414.50"></text></g><g><title>fillVideoTensor (Video.cpp:63) (3,335 samples, 1.24%)</title><rect x="94.6633%" y="420" width="1.2412%" height="15" fill="rgb(205,151,52)"/><text x="94.9133%" y="430.50"></text></g><g><title>torch::detail::BoxedProxy&lt;at::Tensor, torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt; &gt;::operator() (custom_class_detail.h:104) (204,740 samples, 76.20%)</title><rect x="20.0796%" y="228" width="76.2005%" height="15" fill="rgb(253,215,39)"/><text x="20.3296%" y="238.50">torch::detail::BoxedProxy&lt;at::Tensor, torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::cha..</text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;, false&gt; (custom_class_detail.h:95) (204,736 samples, 76.20%)</title><rect x="20.0811%" y="244" width="76.1990%" height="15" fill="rgb(221,220,41)"/><text x="20.3311%" y="254.50">torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char..</text></g><g><title>torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;, false, (unsigned long)0, (unsigned long)1&gt; (custom_class_detail.h:86) (204,736 samples, 76.20%)</title><rect x="20.0811%" y="260" width="76.1990%" height="15" fill="rgb(218,133,21)"/><text x="20.3311%" y="270.50">torch::detail::call_torchbind_method_from_stack&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char..</text></g><g><title>torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;::operator() (custom_class_detail.h:26) (202,477 samples, 75.36%)</title><rect x="20.9218%" y="276" width="75.3582%" height="15" fill="rgb(221,193,43)"/><text x="21.1718%" y="286.50">torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;..</text></g><g><title>c10::guts::invoke&lt;at::Tensor (Video::*&amp;)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), Video&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (C++17.h:145) (202,477 samples, 75.36%)</title><rect x="20.9218%" y="292" width="75.3582%" height="15" fill="rgb(240,128,52)"/><text x="21.1718%" y="302.50">c10::guts::invoke&lt;at::Tensor (Video::*&amp;)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), Vi..</text></g><g><title>std::_Mem_fn_base&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), true&gt;::operator()&lt;Video&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (functional:175) (202,477 samples, 75.36%)</title><rect x="20.9218%" y="308" width="75.3582%" height="15" fill="rgb(253,114,12)"/><text x="21.1718%" y="318.50">std::_Mem_fn_base&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), tru..</text></g><g><title>std::__invoke&lt;at::Tensor (Video::* const&amp;)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), Video&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (invoke.h:96) (202,477 samples, 75.36%)</title><rect x="20.9218%" y="324" width="75.3582%" height="15" fill="rgb(215,223,47)"/><text x="21.1718%" y="334.50">std::__invoke&lt;at::Tensor (Video::* const&amp;)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), ..</text></g><g><title>std::__invoke_impl&lt;at::Tensor, at::Tensor (Video::* const&amp;)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;), Video&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (invoke.h:66) (202,477 samples, 75.36%)</title><rect x="20.9218%" y="340" width="75.3582%" height="15" fill="rgb(248,225,23)"/><text x="21.1718%" y="350.50">std::__invoke_impl&lt;at::Tensor, at::Tensor (Video::* const&amp;)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::all..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (basic_string.h:647) (202,466 samples, 75.35%)</title><rect x="20.9259%" y="356" width="75.3541%" height="15" fill="rgb(250,108,0)"/><text x="21.1759%" y="366.50">std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (basic_string.h:647)</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (basic_string.h:220) (202,466 samples, 75.35%)</title><rect x="20.9259%" y="372" width="75.3541%" height="15" fill="rgb(228,208,7)"/><text x="21.1759%" y="382.50">std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (basic_string.h:220)</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (basic_string.h:211) (202,454 samples, 75.35%)</title><rect x="20.9304%" y="388" width="75.3497%" height="15" fill="rgb(244,45,10)"/><text x="21.1804%" y="398.50">std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (basic_string.h:211)</text></g><g><title>std::_Function_handler&lt;void (std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;), void torch::class_&lt;Video&gt;::defineMethod&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;)::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}&gt;::_M_invoke (std_function.h:316) (204,912 samples, 76.26%)</title><rect x="20.0796%" y="196" width="76.2645%" height="15" fill="rgb(207,125,25)"/><text x="20.3296%" y="206.50">std::_Function_handler&lt;void (std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;), void torch::class_&lt;Video&gt;::defineMethod&lt;..</text></g><g><title>void torch::class_&lt;Video&gt;::defineMethod&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;)&gt;)::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}::operator() (custom_class.h:236) (204,912 samples, 76.26%)</title><rect x="20.0796%" y="212" width="76.2645%" height="15" fill="rgb(210,195,18)"/><text x="20.3296%" y="222.50">void torch::class_&lt;Video&gt;::defineMethod&lt;torch::detail::WrapMethod&lt;at::Tensor (Video::*)(std::__cxx11::basic_string&lt;char, std::c..</text></g><g><title>torch::jit::runAndInsertCall (pybind_utils.h:1098) (205,123 samples, 76.34%)</title><rect x="20.0074%" y="180" width="76.3430%" height="15" fill="rgb(249,80,12)"/><text x="20.2574%" y="190.50">torch::jit::runAndInsertCall (pybind_utils.h:1098)</text></g><g><title>torch::jit::invokeScriptMethodFromPython (pybind_utils.h:1170) (209,739 samples, 78.06%)</title><rect x="18.9921%" y="164" width="78.0610%" height="15" fill="rgb(221,65,9)"/><text x="19.2421%" y="174.50">torch::jit::invokeScriptMethodFromPython (pybind_utils.h:1170)</text></g><g><title>operator() (script_init.cpp:1198) (210,397 samples, 78.31%)</title><rect x="18.7710%" y="148" width="78.3059%" height="15" fill="rgb(235,49,36)"/><text x="19.0210%" y="158.50">operator() (script_init.cpp:1198)</text></g><g><title>call_impl&lt;pybind11::object, torch::jit::initJitScriptBindings(PyObject*)::&lt;lambda(pybind11::args, pybind11::kwargs)&gt;&amp;, 0, 1, pybind11::detail::void_type&gt; (cast.h:1931) (211,050 samples, 78.55%)</title><rect x="18.5600%" y="132" width="78.5489%" height="15" fill="rgb(225,32,20)"/><text x="18.8100%" y="142.50">call_impl&lt;pybind11::object, torch::jit::initJitScriptBindings(PyObject*)::&lt;lambda(pybind11::args, pybind11::kwargs)&gt;&amp;, 0, 1, pybind..</text></g><g><title>call&lt;pybind11::object, pybind11::detail::void_type, torch::jit::initJitScriptBindings(PyObject*)::&lt;lambda(pybind11::args, pybind11::kwargs)&gt;&amp;&gt; (cast.h:1908) (211,079 samples, 78.56%)</title><rect x="18.5544%" y="116" width="78.5597%" height="15" fill="rgb(215,141,46)"/><text x="18.8044%" y="126.50">call&lt;pybind11::object, pybind11::detail::void_type, torch::jit::initJitScriptBindings(PyObject*)::&lt;lambda(pybind11::args, pybind11:..</text></g><g><title>call_impl&lt;pybind11::object, torch::jit::initJitScriptBindings(PyObject*)::&lt;lambda(torch::jit::Object&amp;, const string&amp;)&gt;&amp;, 0, 1, pybind11::detail::void_type&gt; (cast.h:1932) (3,670 samples, 1.37%)</title><rect x="97.1521%" y="132" width="1.3659%" height="15" fill="rgb(250,160,47)"/><text x="97.4021%" y="142.50"></text></g><g><title>call&lt;pybind11::object, pybind11::detail::void_type, torch::jit::initJitScriptBindings(PyObject*)::&lt;lambda(torch::jit::Object&amp;, const string&amp;)&gt;&amp;&gt; (cast.h:1908) (3,752 samples, 1.40%)</title><rect x="97.1227%" y="116" width="1.3964%" height="15" fill="rgb(216,222,40)"/><text x="97.3727%" y="126.50"></text></g><g><title>operator() (pybind11.h:155) (214,928 samples, 79.99%)</title><rect x="18.5365%" y="100" width="79.9923%" height="15" fill="rgb(234,217,39)"/><text x="18.7865%" y="110.50">operator() (pybind11.h:155)</text></g><g><title>_FUN (pybind11.h:133) (217,208 samples, 80.84%)</title><rect x="17.7326%" y="84" width="80.8408%" height="15" fill="rgb(207,178,40)"/><text x="17.9826%" y="94.50">_FUN (pybind11.h:133)</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:620) (217,366 samples, 80.90%)</title><rect x="17.7311%" y="68" width="80.8996%" height="15" fill="rgb(221,136,13)"/><text x="17.9811%" y="78.50">pybind11::cpp_function::dispatcher (pybind11.h:620)</text></g><g><title>&lt;module&gt; (newAPI.py:17) (254,971 samples, 94.90%)</title><rect x="4.8853%" y="52" width="94.8955%" height="15" fill="rgb(249,199,10)"/><text x="5.1353%" y="62.50">&lt;module&gt; (newAPI.py:17)</text></g><g><title>all (268,686 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(249,222,13)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>