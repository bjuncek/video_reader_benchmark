<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180"><g><title>0x7f05f4458525 (libavcodec-4cf96bc1.so.58.65.103) (20 samples, 1.53%)</title><rect x="0.3067%" y="308" width="1.5337%" height="15" fill="rgb(227,0,7)"/><text x="0.5567%" y="318.50"></text></g><g><title>0x7f05f3f46ebe (libavcodec-4cf96bc1.so.58.65.103) (20 samples, 1.53%)</title><rect x="0.3067%" y="324" width="1.5337%" height="15" fill="rgb(217,0,24)"/><text x="0.5567%" y="334.50"></text></g><g><title>0x7f05f43da79f (libavcodec-4cf96bc1.so.58.65.103) (20 samples, 1.53%)</title><rect x="0.3067%" y="340" width="1.5337%" height="15" fill="rgb(221,193,54)"/><text x="0.5567%" y="350.50"></text></g><g><title>av_buffer_unref (libavutil-ac3ec209.so.56.38.100) (15 samples, 1.15%)</title><rect x="0.6902%" y="356" width="1.1503%" height="15" fill="rgb(248,212,6)"/><text x="0.9402%" y="366.50"></text></g><g><title>cfree (libc-2.27.so) (15 samples, 1.15%)</title><rect x="0.6902%" y="372" width="1.1503%" height="15" fill="rgb(208,68,35)"/><text x="0.9402%" y="382.50"></text></g><g><title>__madvise (libc-2.27.so) (15 samples, 1.15%)</title><rect x="0.6902%" y="388" width="1.1503%" height="15" fill="rgb(232,128,0)"/><text x="0.9402%" y="398.50"></text></g><g><title>avcodec_free_context (libavcodec-4cf96bc1.so.58.65.103) (110 samples, 8.44%)</title><rect x="0.3067%" y="276" width="8.4356%" height="15" fill="rgb(207,160,47)"/><text x="0.5567%" y="286.50">avcodec_free..</text></g><g><title>avcodec_close (libavcodec-4cf96bc1.so.58.65.103) (110 samples, 8.44%)</title><rect x="0.3067%" y="292" width="8.4356%" height="15" fill="rgb(228,23,34)"/><text x="0.5567%" y="302.50">avcodec_clos..</text></g><g><title>av_buffer_pool_uninit (libavutil-ac3ec209.so.56.38.100) (82 samples, 6.29%)</title><rect x="2.4540%" y="308" width="6.2883%" height="15" fill="rgb(218,30,26)"/><text x="2.7040%" y="318.50">av_buffe..</text></g><g><title>cfree (libc-2.27.so) (82 samples, 6.29%)</title><rect x="2.4540%" y="324" width="6.2883%" height="15" fill="rgb(220,122,19)"/><text x="2.7040%" y="334.50">cfree (l..</text></g><g><title>__madvise (libc-2.27.so) (80 samples, 6.13%)</title><rect x="2.6074%" y="340" width="6.1350%" height="15" fill="rgb(250,228,42)"/><text x="2.8574%" y="350.50">__madvis..</text></g><g><title>__del__ (decord/video_reader.py:56) (129 samples, 9.89%)</title><rect x="0.0000%" y="68" width="9.8926%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="78.50">__del__ (decor..</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:173) (129 samples, 9.89%)</title><rect x="0.0000%" y="84" width="9.8926%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="94.50">__call__ (deco..</text></g><g><title>PyCFuncPtr_call (_ctypes.c:4212) (129 samples, 9.89%)</title><rect x="0.0000%" y="100" width="9.8926%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="110.50">PyCFuncPtr_cal..</text></g><g><title>_ctypes_callproc (callproc.c:1214) (129 samples, 9.89%)</title><rect x="0.0000%" y="116" width="9.8926%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="126.50">_ctypes_callpr..</text></g><g><title>_call_function_pointer (callproc.c:892) (129 samples, 9.89%)</title><rect x="0.0000%" y="132" width="9.8926%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="142.50">_call_function..</text></g><g><title>ffi_call (libffi.so.6.0.4) (129 samples, 9.89%)</title><rect x="0.0000%" y="148" width="9.8926%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="158.50">ffi_call (libf..</text></g><g><title>ffi_call_unix64 (libffi.so.6.0.4) (129 samples, 9.89%)</title><rect x="0.0000%" y="164" width="9.8926%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="174.50">ffi_call_unix6..</text></g><g><title>DECORDFuncCall (decord/libdecord.so) (129 samples, 9.89%)</title><rect x="0.0000%" y="180" width="9.8926%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="190.50">DECORDFuncCall..</text></g><g><title>0x7f05f5f2cedc (decord/libdecord.so) (129 samples, 9.89%)</title><rect x="0.0000%" y="196" width="9.8926%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="206.50">0x7f05f5f2cedc..</text></g><g><title>decord::VideoReader::~VideoReader (decord/libdecord.so) (129 samples, 9.89%)</title><rect x="0.0000%" y="212" width="9.8926%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="222.50">decord::VideoR..</text></g><g><title>decord::VideoReader::~VideoReader (decord/libdecord.so) (129 samples, 9.89%)</title><rect x="0.0000%" y="228" width="9.8926%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="238.50">decord::VideoR..</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::~FFMPEGThreadedDecoder (decord/libdecord.so) (129 samples, 9.89%)</title><rect x="0.0000%" y="244" width="9.8926%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="254.50">decord::ffmpeg..</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::~FFMPEGThreadedDecoder (decord/libdecord.so) (129 samples, 9.89%)</title><rect x="0.0000%" y="260" width="9.8926%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="270.50">decord::ffmpeg..</text></g><g><title>0x1000 (?) (53 samples, 4.06%)</title><rect x="10.1994%" y="100" width="4.0644%" height="15" fill="rgb(241,131,45)"/><text x="10.4494%" y="110.50">0x10..</text></g><g><title>0x7f05f44589d2 (libavcodec-4cf96bc1.so.58.65.103) (53 samples, 4.06%)</title><rect x="10.1994%" y="116" width="4.0644%" height="15" fill="rgb(249,31,29)"/><text x="10.4494%" y="126.50">0x7f..</text></g><g><title>0x7f05f41b0b5d (libavcodec-4cf96bc1.so.58.65.103) (17 samples, 1.30%)</title><rect x="15.0307%" y="292" width="1.3037%" height="15" fill="rgb(225,111,53)"/><text x="15.2807%" y="302.50"></text></g><g><title>0x7f05f5be1f0b (libavformat-b798543f.so.58.35.101) (19 samples, 1.46%)</title><rect x="15.0307%" y="244" width="1.4571%" height="15" fill="rgb(238,160,17)"/><text x="15.2807%" y="254.50"></text></g><g><title>avcodec_send_packet (libavcodec-4cf96bc1.so.58.65.103) (19 samples, 1.46%)</title><rect x="15.0307%" y="260" width="1.4571%" height="15" fill="rgb(214,148,48)"/><text x="15.2807%" y="270.50"></text></g><g><title>0x7f05f40e1d97 (libavcodec-4cf96bc1.so.58.65.103) (19 samples, 1.46%)</title><rect x="15.0307%" y="276" width="1.4571%" height="15" fill="rgb(232,36,49)"/><text x="15.2807%" y="286.50"></text></g><g><title>0x7f05f5be7e1d (libavformat-b798543f.so.58.35.101) (21 samples, 1.61%)</title><rect x="18.4816%" y="244" width="1.6104%" height="15" fill="rgb(209,103,24)"/><text x="18.7316%" y="254.50"></text></g><g><title>0x7f05f5be72fb (libavformat-b798543f.so.58.35.101) (21 samples, 1.61%)</title><rect x="18.4816%" y="260" width="1.6104%" height="15" fill="rgb(229,88,8)"/><text x="18.7316%" y="270.50"></text></g><g><title>avcodec_open2 (libavcodec-4cf96bc1.so.58.65.103) (21 samples, 1.61%)</title><rect x="21.9325%" y="244" width="1.6104%" height="15" fill="rgb(213,181,19)"/><text x="22.1825%" y="254.50"></text></g><g><title>avformat_find_stream_info (libavformat-b798543f.so.58.35.101) (120 samples, 9.20%)</title><rect x="14.4172%" y="228" width="9.2025%" height="15" fill="rgb(254,191,54)"/><text x="14.6672%" y="238.50">avformat_find..</text></g><g><title>avformat_open_input (libavformat-b798543f.so.58.35.101) (26 samples, 1.99%)</title><rect x="23.6196%" y="228" width="1.9939%" height="15" fill="rgb(241,83,37)"/><text x="23.8696%" y="238.50">a..</text></g><g><title>0x7f05f44589d2 (libavcodec-4cf96bc1.so.58.65.103) (28 samples, 2.15%)</title><rect x="26.4571%" y="260" width="2.1472%" height="15" fill="rgb(233,36,39)"/><text x="26.7071%" y="270.50">0..</text></g><g><title>pthread_create@@GLIBC_2.2.5 (libpthread-2.27.so) (28 samples, 2.15%)</title><rect x="26.4571%" y="276" width="2.1472%" height="15" fill="rgb(226,3,54)"/><text x="26.7071%" y="286.50">p..</text></g><g><title>avcodec_open2 (libavcodec-4cf96bc1.so.58.65.103) (46 samples, 3.53%)</title><rect x="25.6902%" y="244" width="3.5276%" height="15" fill="rgb(245,192,40)"/><text x="25.9402%" y="254.50">avc..</text></g><g><title>av_read_frame (libavformat-b798543f.so.58.35.101) (19 samples, 1.46%)</title><rect x="29.2945%" y="260" width="1.4571%" height="15" fill="rgb(238,167,29)"/><text x="29.5445%" y="270.50"></text></g><g><title>decord::VideoReader::IndexKeyframes (decord/libdecord.so) (25 samples, 1.92%)</title><rect x="29.2178%" y="244" width="1.9172%" height="15" fill="rgb(232,182,51)"/><text x="29.4678%" y="254.50">d..</text></g><g><title>avfilter_graph_config (libavfilter-30dd71f3.so.7.70.101) (33 samples, 2.53%)</title><rect x="31.6718%" y="292" width="2.5307%" height="15" fill="rgb(231,60,39)"/><text x="31.9218%" y="302.50">av..</text></g><g><title>avfilter_config_links (libavfilter-30dd71f3.so.7.70.101) (21 samples, 1.61%)</title><rect x="32.5920%" y="308" width="1.6104%" height="15" fill="rgb(208,69,12)"/><text x="32.8420%" y="318.50"></text></g><g><title>0x7f05f57100ae (libavfilter-30dd71f3.so.7.70.101) (17 samples, 1.30%)</title><rect x="32.8988%" y="324" width="1.3037%" height="15" fill="rgb(235,93,37)"/><text x="33.1488%" y="334.50"></text></g><g><title>sws_init_context (libswscale-99a5f1f1.so.5.6.100) (17 samples, 1.30%)</title><rect x="32.8988%" y="340" width="1.3037%" height="15" fill="rgb(213,116,39)"/><text x="33.1488%" y="350.50"></text></g><g><title>decord::ffmpeg::FFMPEGFilterGraph::FFMPEGFilterGraph (decord/libdecord.so) (53 samples, 4.06%)</title><rect x="31.1350%" y="260" width="4.0644%" height="15" fill="rgb(222,207,29)"/><text x="31.3850%" y="270.50">deco..</text></g><g><title>decord::ffmpeg::FFMPEGFilterGraph::Init (decord/libdecord.so) (53 samples, 4.06%)</title><rect x="31.1350%" y="276" width="4.0644%" height="15" fill="rgb(206,96,30)"/><text x="31.3850%" y="286.50">deco..</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:173) (327 samples, 25.08%)</title><rect x="10.1994%" y="84" width="25.0767%" height="15" fill="rgb(218,138,4)"/><text x="10.4494%" y="94.50">__call__ (decord/_ffi/_ctypes/function.p..</text></g><g><title>PyCFuncPtr_call (_ctypes.c:4212) (272 samples, 20.86%)</title><rect x="14.4172%" y="100" width="20.8589%" height="15" fill="rgb(250,191,14)"/><text x="14.6672%" y="110.50">PyCFuncPtr_call (_ctypes.c:4212)</text></g><g><title>_ctypes_callproc (callproc.c:1214) (272 samples, 20.86%)</title><rect x="14.4172%" y="116" width="20.8589%" height="15" fill="rgb(239,60,40)"/><text x="14.6672%" y="126.50">_ctypes_callproc (callproc.c:1214)</text></g><g><title>_call_function_pointer (callproc.c:892) (272 samples, 20.86%)</title><rect x="14.4172%" y="132" width="20.8589%" height="15" fill="rgb(206,27,48)"/><text x="14.6672%" y="142.50">_call_function_pointer (callproc...</text></g><g><title>ffi_call (libffi.so.6.0.4) (272 samples, 20.86%)</title><rect x="14.4172%" y="148" width="20.8589%" height="15" fill="rgb(225,35,8)"/><text x="14.6672%" y="158.50">ffi_call (libffi.so.6.0.4)</text></g><g><title>ffi_call_unix64 (libffi.so.6.0.4) (272 samples, 20.86%)</title><rect x="14.4172%" y="164" width="20.8589%" height="15" fill="rgb(250,213,24)"/><text x="14.6672%" y="174.50">ffi_call_unix64 (libffi.so.6.0.4)</text></g><g><title>DECORDFuncCall (decord/libdecord.so) (272 samples, 20.86%)</title><rect x="14.4172%" y="180" width="20.8589%" height="15" fill="rgb(247,123,22)"/><text x="14.6672%" y="190.50">DECORDFuncCall (decord/libdecord...</text></g><g><title>0x7f05f5f2bea9 (decord/libdecord.so) (272 samples, 20.86%)</title><rect x="14.4172%" y="196" width="20.8589%" height="15" fill="rgb(231,138,38)"/><text x="14.6672%" y="206.50">0x7f05f5f2bea9 (decord/libdecord...</text></g><g><title>decord::VideoReader::VideoReader (decord/libdecord.so) (272 samples, 20.86%)</title><rect x="14.4172%" y="212" width="20.8589%" height="15" fill="rgb(231,145,46)"/><text x="14.6672%" y="222.50">decord::VideoReader::VideoReader ..</text></g><g><title>decord::VideoReader::SetVideoStream (decord/libdecord.so) (126 samples, 9.66%)</title><rect x="25.6135%" y="228" width="9.6626%" height="15" fill="rgb(251,118,11)"/><text x="25.8635%" y="238.50">decord::VideoR..</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::SetCodecContext (decord/libdecord.so) (54 samples, 4.14%)</title><rect x="31.1350%" y="244" width="4.1411%" height="15" fill="rgb(217,147,25)"/><text x="31.3850%" y="254.50">decor..</text></g><g><title>__init__ (decord/video_reader.py:44) (333 samples, 25.54%)</title><rect x="9.8926%" y="68" width="25.5368%" height="15" fill="rgb(247,81,37)"/><text x="10.1426%" y="78.50">__init__ (decord/video_reader.py:44)</text></g><g><title>&lt;module&gt; (PV_ratrace_decord.py:10) (468 samples, 35.89%)</title><rect x="0.0000%" y="52" width="35.8896%" height="15" fill="rgb(209,12,38)"/><text x="0.2500%" y="62.50">&lt;module&gt; (PV_ratrace_decord.py:10)</text></g><g><title>0x7f05f5aa60d1 (libavformat-b798543f.so.58.35.101) (20 samples, 1.53%)</title><rect x="38.5736%" y="324" width="1.5337%" height="15" fill="rgb(227,1,9)"/><text x="38.8236%" y="334.50"></text></g><g><title>0x7f05f5be72fb (libavformat-b798543f.so.58.35.101) (21 samples, 1.61%)</title><rect x="38.5736%" y="308" width="1.6104%" height="15" fill="rgb(248,47,43)"/><text x="38.8236%" y="318.50"></text></g><g><title>0x7f05f5be7e1d (libavformat-b798543f.so.58.35.101) (22 samples, 1.69%)</title><rect x="38.5736%" y="292" width="1.6871%" height="15" fill="rgb(221,10,30)"/><text x="38.8236%" y="302.50"></text></g><g><title>av_read_frame (libavformat-b798543f.so.58.35.101) (38 samples, 2.91%)</title><rect x="38.5736%" y="276" width="2.9141%" height="15" fill="rgb(210,229,1)"/><text x="38.8236%" y="286.50">av..</text></g><g><title>decord::VideoReader::PushNext (decord/libdecord.so) (49 samples, 3.76%)</title><rect x="37.8834%" y="260" width="3.7577%" height="15" fill="rgb(222,148,37)"/><text x="38.1334%" y="270.50">deco..</text></g><g><title>0x7f05f5be7e1d (libavformat-b798543f.so.58.35.101) (16 samples, 1.23%)</title><rect x="41.7945%" y="324" width="1.2270%" height="15" fill="rgb(234,67,33)"/><text x="42.0445%" y="334.50"></text></g><g><title>0x7f05f5be72fb (libavformat-b798543f.so.58.35.101) (16 samples, 1.23%)</title><rect x="41.7945%" y="340" width="1.2270%" height="15" fill="rgb(247,98,35)"/><text x="42.0445%" y="350.50"></text></g><g><title>av_read_frame (libavformat-b798543f.so.58.35.101) (28 samples, 2.15%)</title><rect x="41.7945%" y="308" width="2.1472%" height="15" fill="rgb(247,138,52)"/><text x="42.0445%" y="318.50">a..</text></g><g><title>decord::VideoReader::PushNext (decord/libdecord.so) (30 samples, 2.30%)</title><rect x="41.7178%" y="292" width="2.3006%" height="15" fill="rgb(213,79,30)"/><text x="41.9678%" y="302.50">d..</text></g><g><title>decord::VideoReader::SeekAccurate (decord/libdecord.so) (206 samples, 15.80%)</title><rect x="41.6411%" y="260" width="15.7975%" height="15" fill="rgb(246,177,23)"/><text x="41.8911%" y="270.50">decord::VideoReader::See..</text></g><g><title>decord::VideoReader::SkipFrames (decord/libdecord.so) (205 samples, 15.72%)</title><rect x="41.7178%" y="276" width="15.7209%" height="15" fill="rgb(230,62,27)"/><text x="41.9678%" y="286.50">decord::VideoReader::Ski..</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::Pop (decord/libdecord.so) (175 samples, 13.42%)</title><rect x="44.0184%" y="292" width="13.4202%" height="15" fill="rgb(216,154,8)"/><text x="44.2684%" y="302.50">decord::ffmpeg::FFMP..</text></g><g><title>dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQueueType)0&gt;::Pop (decord/libdecord.so) (175 samples, 13.42%)</title><rect x="44.0184%" y="308" width="13.4202%" height="15" fill="rgb(244,35,45)"/><text x="44.2684%" y="318.50">dmlc::ConcurrentBloc..</text></g><g><title>std::condition_variable::wait (decord/libdecord.so) (175 samples, 13.42%)</title><rect x="44.0184%" y="324" width="13.4202%" height="15" fill="rgb(251,115,12)"/><text x="44.2684%" y="334.50">std::condition_varia..</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (175 samples, 13.42%)</title><rect x="44.0184%" y="340" width="13.4202%" height="15" fill="rgb(240,54,50)"/><text x="44.2684%" y="350.50">__pthread_cond_wait ..</text></g><g><title>_ctypes_callproc (callproc.c:1214) (759 samples, 58.21%)</title><rect x="37.7301%" y="132" width="58.2055%" height="15" fill="rgb(233,84,52)"/><text x="37.9801%" y="142.50">_ctypes_callproc (callproc.c:1214)</text></g><g><title>_call_function_pointer (callproc.c:892) (759 samples, 58.21%)</title><rect x="37.7301%" y="148" width="58.2055%" height="15" fill="rgb(207,117,47)"/><text x="37.9801%" y="158.50">_call_function_pointer (callproc.c:892)</text></g><g><title>ffi_call (libffi.so.6.0.4) (759 samples, 58.21%)</title><rect x="37.7301%" y="164" width="58.2055%" height="15" fill="rgb(249,43,39)"/><text x="37.9801%" y="174.50">ffi_call (libffi.so.6.0.4)</text></g><g><title>ffi_call_unix64 (libffi.so.6.0.4) (759 samples, 58.21%)</title><rect x="37.7301%" y="180" width="58.2055%" height="15" fill="rgb(209,38,44)"/><text x="37.9801%" y="190.50">ffi_call_unix64 (libffi.so.6.0.4)</text></g><g><title>DECORDFuncCall (decord/libdecord.so) (759 samples, 58.21%)</title><rect x="37.7301%" y="196" width="58.2055%" height="15" fill="rgb(236,212,23)"/><text x="37.9801%" y="206.50">DECORDFuncCall (decord/libdecord.so)</text></g><g><title>0x7f05f5f2c05e (decord/libdecord.so) (759 samples, 58.21%)</title><rect x="37.7301%" y="212" width="58.2055%" height="15" fill="rgb(242,79,21)"/><text x="37.9801%" y="222.50">0x7f05f5f2c05e (decord/libdecord.so)</text></g><g><title>decord::VideoReader::NextFrame (decord/libdecord.so) (759 samples, 58.21%)</title><rect x="37.7301%" y="228" width="58.2055%" height="15" fill="rgb(211,96,35)"/><text x="37.9801%" y="238.50">decord::VideoReader::NextFrame (decord/libdecord.so)</text></g><g><title>decord::VideoReader::NextFrameImpl (decord/libdecord.so) (759 samples, 58.21%)</title><rect x="37.7301%" y="244" width="58.2055%" height="15" fill="rgb(253,215,40)"/><text x="37.9801%" y="254.50">decord::VideoReader::NextFrameImpl (decord/libdecord.so)</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::Pop (decord/libdecord.so) (502 samples, 38.50%)</title><rect x="57.4387%" y="260" width="38.4969%" height="15" fill="rgb(211,81,21)"/><text x="57.6887%" y="270.50">decord::ffmpeg::FFMPEGThreadedDecoder::Pop (decord/libdecord.so)</text></g><g><title>dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQueueType)0&gt;::Pop (decord/libdecord.so) (502 samples, 38.50%)</title><rect x="57.4387%" y="276" width="38.4969%" height="15" fill="rgb(208,190,38)"/><text x="57.6887%" y="286.50">dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::..</text></g><g><title>std::condition_variable::wait (decord/libdecord.so) (501 samples, 38.42%)</title><rect x="57.5153%" y="292" width="38.4202%" height="15" fill="rgb(235,213,38)"/><text x="57.7653%" y="302.50">std::condition_variable::wait (decord/libdecord.so)</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (501 samples, 38.42%)</title><rect x="57.5153%" y="308" width="38.4202%" height="15" fill="rgb(237,122,38)"/><text x="57.7653%" y="318.50">__pthread_cond_wait (libpthread-2.27.so)</text></g><g><title>PyCFuncPtr_call (_ctypes.c:4212) (762 samples, 58.44%)</title><rect x="37.7301%" y="116" width="58.4356%" height="15" fill="rgb(244,218,35)"/><text x="37.9801%" y="126.50">PyCFuncPtr_call (_ctypes.c:4212)</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:173) (767 samples, 58.82%)</title><rect x="37.5767%" y="100" width="58.8190%" height="15" fill="rgb(240,68,47)"/><text x="37.8267%" y="110.50">__call__ (decord/_ffi/_ctypes/function.py:173)</text></g><g><title>next (decord/video_reader.py:104) (783 samples, 60.05%)</title><rect x="37.1166%" y="84" width="60.0460%" height="15" fill="rgb(210,16,53)"/><text x="37.3666%" y="94.50">next (decord/video_reader.py:104)</text></g><g><title>&lt;module&gt; (PV_ratrace_decord.py:13) (804 samples, 61.66%)</title><rect x="35.9663%" y="52" width="61.6564%" height="15" fill="rgb(235,124,12)"/><text x="36.2163%" y="62.50">&lt;module&gt; (PV_ratrace_decord.py:13)</text></g><g><title>__getitem__ (decord/video_reader.py:92) (790 samples, 60.58%)</title><rect x="37.0399%" y="68" width="60.5828%" height="15" fill="rgb(224,169,11)"/><text x="37.2899%" y="78.50">__getitem__ (decord/video_reader.py:92)</text></g><g><title>&lt;module&gt; (numpy/__init__.py:140) (21 samples, 1.61%)</title><rect x="97.6227%" y="340" width="1.6104%" height="15" fill="rgb(250,166,2)"/><text x="97.8727%" y="350.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (21 samples, 1.61%)</title><rect x="97.6227%" y="356" width="1.6104%" height="15" fill="rgb(242,216,29)"/><text x="97.8727%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (21 samples, 1.61%)</title><rect x="97.6227%" y="372" width="1.6104%" height="15" fill="rgb(230,116,27)"/><text x="97.8727%" y="382.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (21 samples, 1.61%)</title><rect x="97.6227%" y="388" width="1.6104%" height="15" fill="rgb(228,99,48)"/><text x="97.8727%" y="398.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (21 samples, 1.61%)</title><rect x="97.6227%" y="404" width="1.6104%" height="15" fill="rgb(253,11,6)"/><text x="97.8727%" y="414.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (21 samples, 1.61%)</title><rect x="97.6227%" y="420" width="1.6104%" height="15" fill="rgb(247,143,39)"/><text x="97.8727%" y="430.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (21 samples, 1.61%)</title><rect x="97.6227%" y="436" width="1.6104%" height="15" fill="rgb(236,97,10)"/><text x="97.8727%" y="446.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (21 samples, 1.61%)</title><rect x="97.6227%" y="452" width="1.6104%" height="15" fill="rgb(233,208,19)"/><text x="97.8727%" y="462.50"></text></g><g><title>&lt;module&gt; (decord/_ffi/runtime_ctypes.py:7) (25 samples, 1.92%)</title><rect x="97.6227%" y="244" width="1.9172%" height="15" fill="rgb(216,164,2)"/><text x="97.8727%" y="254.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (25 samples, 1.92%)</title><rect x="97.6227%" y="260" width="1.9172%" height="15" fill="rgb(220,129,5)"/><text x="97.8727%" y="270.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (25 samples, 1.92%)</title><rect x="97.6227%" y="276" width="1.9172%" height="15" fill="rgb(242,17,10)"/><text x="97.8727%" y="286.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (25 samples, 1.92%)</title><rect x="97.6227%" y="292" width="1.9172%" height="15" fill="rgb(242,107,0)"/><text x="97.8727%" y="302.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (25 samples, 1.92%)</title><rect x="97.6227%" y="308" width="1.9172%" height="15" fill="rgb(251,28,31)"/><text x="97.8727%" y="318.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (25 samples, 1.92%)</title><rect x="97.6227%" y="324" width="1.9172%" height="15" fill="rgb(233,223,10)"/><text x="97.8727%" y="334.50">_..</text></g><g><title>&lt;module&gt; (PV_ratrace_decord.py:2) (27 samples, 2.07%)</title><rect x="97.6227%" y="52" width="2.0706%" height="15" fill="rgb(215,21,27)"/><text x="97.8727%" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (27 samples, 2.07%)</title><rect x="97.6227%" y="68" width="2.0706%" height="15" fill="rgb(232,23,21)"/><text x="97.8727%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (27 samples, 2.07%)</title><rect x="97.6227%" y="84" width="2.0706%" height="15" fill="rgb(244,5,23)"/><text x="97.8727%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (27 samples, 2.07%)</title><rect x="97.6227%" y="100" width="2.0706%" height="15" fill="rgb(226,81,46)"/><text x="97.8727%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (27 samples, 2.07%)</title><rect x="97.6227%" y="116" width="2.0706%" height="15" fill="rgb(247,70,30)"/><text x="97.8727%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (27 samples, 2.07%)</title><rect x="97.6227%" y="132" width="2.0706%" height="15" fill="rgb(212,68,19)"/><text x="97.8727%" y="142.50">_..</text></g><g><title>&lt;module&gt; (decord/__init__.py:4) (27 samples, 2.07%)</title><rect x="97.6227%" y="148" width="2.0706%" height="15" fill="rgb(240,187,13)"/><text x="97.8727%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (27 samples, 2.07%)</title><rect x="97.6227%" y="164" width="2.0706%" height="15" fill="rgb(223,113,26)"/><text x="97.8727%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (27 samples, 2.07%)</title><rect x="97.6227%" y="180" width="2.0706%" height="15" fill="rgb(206,192,2)"/><text x="97.8727%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (27 samples, 2.07%)</title><rect x="97.6227%" y="196" width="2.0706%" height="15" fill="rgb(241,108,4)"/><text x="97.8727%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (27 samples, 2.07%)</title><rect x="97.6227%" y="212" width="2.0706%" height="15" fill="rgb(247,173,49)"/><text x="97.8727%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (27 samples, 2.07%)</title><rect x="97.6227%" y="228" width="2.0706%" height="15" fill="rgb(224,114,35)"/><text x="97.8727%" y="238.50">_..</text></g><g><title>all (1,304 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>