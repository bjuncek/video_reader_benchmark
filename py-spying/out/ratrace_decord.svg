<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180"><g><title>0x7f54bbce171b (libavcodec-4cf96bc1.so.58.65.103) (15 samples, 1.06%)</title><rect x="1.6901%" y="308" width="1.0563%" height="15" fill="rgb(227,0,7)"/><text x="1.9401%" y="318.50"></text></g><g><title>__GI___pthread_timedjoin_ex (libpthread-2.27.so) (15 samples, 1.06%)</title><rect x="1.6901%" y="324" width="1.0563%" height="15" fill="rgb(217,0,24)"/><text x="1.9401%" y="334.50"></text></g><g><title>avcodec_free_context (libavcodec-4cf96bc1.so.58.65.103) (79 samples, 5.56%)</title><rect x="0.9155%" y="276" width="5.5634%" height="15" fill="rgb(221,193,54)"/><text x="1.1655%" y="286.50">avcodec..</text></g><g><title>avcodec_close (libavcodec-4cf96bc1.so.58.65.103) (79 samples, 5.56%)</title><rect x="0.9155%" y="292" width="5.5634%" height="15" fill="rgb(248,212,6)"/><text x="1.1655%" y="302.50">avcodec..</text></g><g><title>av_buffer_pool_uninit (libavutil-ac3ec209.so.56.38.100) (53 samples, 3.73%)</title><rect x="2.7465%" y="308" width="3.7324%" height="15" fill="rgb(208,68,35)"/><text x="2.9965%" y="318.50">av_b..</text></g><g><title>cfree (libc-2.27.so) (53 samples, 3.73%)</title><rect x="2.7465%" y="324" width="3.7324%" height="15" fill="rgb(232,128,0)"/><text x="2.9965%" y="334.50">cfre..</text></g><g><title>__madvise (libc-2.27.so) (52 samples, 3.66%)</title><rect x="2.8169%" y="340" width="3.6620%" height="15" fill="rgb(207,160,47)"/><text x="3.0669%" y="350.50">__ma..</text></g><g><title>cfree (libc-2.27.so) (20 samples, 1.41%)</title><rect x="6.4789%" y="276" width="1.4085%" height="15" fill="rgb(228,23,34)"/><text x="6.7289%" y="286.50"></text></g><g><title>__madvise (libc-2.27.so) (20 samples, 1.41%)</title><rect x="6.4789%" y="292" width="1.4085%" height="15" fill="rgb(218,30,26)"/><text x="6.7289%" y="302.50"></text></g><g><title>__del__ (decord/video_reader.py:56) (110 samples, 7.75%)</title><rect x="0.2113%" y="68" width="7.7465%" height="15" fill="rgb(220,122,19)"/><text x="0.4613%" y="78.50">__del__ (de..</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:175) (107 samples, 7.54%)</title><rect x="0.4225%" y="84" width="7.5352%" height="15" fill="rgb(250,228,42)"/><text x="0.6725%" y="94.50">__call__ (..</text></g><g><title>PyCFuncPtr_call (_ctypes.c:4017) (107 samples, 7.54%)</title><rect x="0.4225%" y="100" width="7.5352%" height="15" fill="rgb(240,193,28)"/><text x="0.6725%" y="110.50">PyCFuncPtr..</text></g><g><title>_ctypes_callproc (callproc.c:1186) (107 samples, 7.54%)</title><rect x="0.4225%" y="116" width="7.5352%" height="15" fill="rgb(216,20,37)"/><text x="0.6725%" y="126.50">_ctypes_ca..</text></g><g><title>_call_function_pointer (callproc.c:850) (107 samples, 7.54%)</title><rect x="0.4225%" y="132" width="7.5352%" height="15" fill="rgb(206,188,39)"/><text x="0.6725%" y="142.50">_call_func..</text></g><g><title>ffi_call (libffi.so.6.0.4) (107 samples, 7.54%)</title><rect x="0.4225%" y="148" width="7.5352%" height="15" fill="rgb(217,207,13)"/><text x="0.6725%" y="158.50">ffi_call (..</text></g><g><title>ffi_call_unix64 (libffi.so.6.0.4) (107 samples, 7.54%)</title><rect x="0.4225%" y="164" width="7.5352%" height="15" fill="rgb(231,73,38)"/><text x="0.6725%" y="174.50">ffi_call_u..</text></g><g><title>DECORDFuncCall (decord/libdecord.so) (107 samples, 7.54%)</title><rect x="0.4225%" y="180" width="7.5352%" height="15" fill="rgb(225,20,46)"/><text x="0.6725%" y="190.50">DECORDFunc..</text></g><g><title>0x7f54bd7b5edc (decord/libdecord.so) (107 samples, 7.54%)</title><rect x="0.4225%" y="196" width="7.5352%" height="15" fill="rgb(210,31,41)"/><text x="0.6725%" y="206.50">0x7f54bd7b..</text></g><g><title>decord::VideoReader::~VideoReader (decord/libdecord.so) (107 samples, 7.54%)</title><rect x="0.4225%" y="212" width="7.5352%" height="15" fill="rgb(221,200,47)"/><text x="0.6725%" y="222.50">decord::Vi..</text></g><g><title>decord::VideoReader::~VideoReader (decord/libdecord.so) (107 samples, 7.54%)</title><rect x="0.4225%" y="228" width="7.5352%" height="15" fill="rgb(226,26,5)"/><text x="0.6725%" y="238.50">decord::Vi..</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::~FFMPEGThreadedDecoder (decord/libdecord.so) (104 samples, 7.32%)</title><rect x="0.6338%" y="244" width="7.3239%" height="15" fill="rgb(249,33,26)"/><text x="0.8838%" y="254.50">decord::ff..</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::~FFMPEGThreadedDecoder (decord/libdecord.so) (104 samples, 7.32%)</title><rect x="0.6338%" y="260" width="7.3239%" height="15" fill="rgb(235,183,28)"/><text x="0.8838%" y="270.50">decord::ff..</text></g><g><title>0x1000 (?) (27 samples, 1.90%)</title><rect x="8.2394%" y="100" width="1.9014%" height="15" fill="rgb(221,5,38)"/><text x="8.4894%" y="110.50">0..</text></g><g><title>0x7f54bbce19d2 (libavcodec-4cf96bc1.so.58.65.103) (27 samples, 1.90%)</title><rect x="8.2394%" y="116" width="1.9014%" height="15" fill="rgb(247,18,42)"/><text x="8.4894%" y="126.50">0..</text></g><g><title>0x7f54bd470e1d (libavformat-b798543f.so.58.35.101) (15 samples, 1.06%)</title><rect x="13.5915%" y="244" width="1.0563%" height="15" fill="rgb(241,131,45)"/><text x="13.8415%" y="254.50"></text></g><g><title>0x7f54bd4702fb (libavformat-b798543f.so.58.35.101) (15 samples, 1.06%)</title><rect x="13.5915%" y="260" width="1.0563%" height="15" fill="rgb(249,31,29)"/><text x="13.8415%" y="270.50"></text></g><g><title>avformat_find_stream_info (libavformat-b798543f.so.58.35.101) (92 samples, 6.48%)</title><rect x="10.4225%" y="228" width="6.4789%" height="15" fill="rgb(225,111,53)"/><text x="10.6725%" y="238.50">avformat..</text></g><g><title>av_probe_input_buffer2 (libavformat-b798543f.so.58.35.101) (25 samples, 1.76%)</title><rect x="17.7465%" y="244" width="1.7606%" height="15" fill="rgb(238,160,17)"/><text x="17.9965%" y="254.50"></text></g><g><title>av_probe_input_format2 (libavformat-b798543f.so.58.35.101) (23 samples, 1.62%)</title><rect x="17.8873%" y="260" width="1.6197%" height="15" fill="rgb(214,148,48)"/><text x="18.1373%" y="270.50"></text></g><g><title>av_probe_input_format3 (libavformat-b798543f.so.58.35.101) (23 samples, 1.62%)</title><rect x="17.8873%" y="276" width="1.6197%" height="15" fill="rgb(232,36,49)"/><text x="18.1373%" y="286.50"></text></g><g><title>avformat_open_input (libavformat-b798543f.so.58.35.101) (44 samples, 3.10%)</title><rect x="16.9014%" y="228" width="3.0986%" height="15" fill="rgb(209,103,24)"/><text x="17.1514%" y="238.50">avf..</text></g><g><title>0x7f54bbce19d2 (libavcodec-4cf96bc1.so.58.65.103) (18 samples, 1.27%)</title><rect x="20.4930%" y="260" width="1.2676%" height="15" fill="rgb(229,88,8)"/><text x="20.7430%" y="270.50"></text></g><g><title>pthread_create@@GLIBC_2.2.5 (libpthread-2.27.so) (18 samples, 1.27%)</title><rect x="20.4930%" y="276" width="1.2676%" height="15" fill="rgb(213,181,19)"/><text x="20.7430%" y="286.50"></text></g><g><title>avcodec_open2 (libavcodec-4cf96bc1.so.58.65.103) (31 samples, 2.18%)</title><rect x="20.2817%" y="244" width="2.1831%" height="15" fill="rgb(254,191,54)"/><text x="20.5317%" y="254.50">a..</text></g><g><title>decord::VideoReader::IndexKeyframes (decord/libdecord.so) (24 samples, 1.69%)</title><rect x="22.5352%" y="244" width="1.6901%" height="15" fill="rgb(241,83,37)"/><text x="22.7852%" y="254.50"></text></g><g><title>av_read_frame (libavformat-b798543f.so.58.35.101) (23 samples, 1.62%)</title><rect x="22.6056%" y="260" width="1.6197%" height="15" fill="rgb(233,36,39)"/><text x="22.8556%" y="270.50"></text></g><g><title>avfilter_graph_config (libavfilter-30dd71f3.so.7.70.101) (25 samples, 1.76%)</title><rect x="24.6479%" y="292" width="1.7606%" height="15" fill="rgb(226,3,54)"/><text x="24.8979%" y="302.50"></text></g><g><title>avfilter_config_links (libavfilter-30dd71f3.so.7.70.101) (18 samples, 1.27%)</title><rect x="25.1408%" y="308" width="1.2676%" height="15" fill="rgb(245,192,40)"/><text x="25.3908%" y="318.50"></text></g><g><title>0x7f54bcf990ae (libavfilter-30dd71f3.so.7.70.101) (16 samples, 1.13%)</title><rect x="25.2817%" y="324" width="1.1268%" height="15" fill="rgb(238,167,29)"/><text x="25.5317%" y="334.50"></text></g><g><title>sws_init_context (libswscale-99a5f1f1.so.5.6.100) (16 samples, 1.13%)</title><rect x="25.2817%" y="340" width="1.1268%" height="15" fill="rgb(232,182,51)"/><text x="25.5317%" y="350.50"></text></g><g><title>__init__ (decord/video_reader.py:45) (269 samples, 18.94%)</title><rect x="8.0282%" y="68" width="18.9437%" height="15" fill="rgb(231,60,39)"/><text x="8.2782%" y="78.50">__init__ (decord/video_reader...</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:175) (266 samples, 18.73%)</title><rect x="8.2394%" y="84" width="18.7324%" height="15" fill="rgb(208,69,12)"/><text x="8.4894%" y="94.50">__call__ (decord/_ffi/_ctypes..</text></g><g><title>PyCFuncPtr_call (_ctypes.c:4017) (236 samples, 16.62%)</title><rect x="10.3521%" y="100" width="16.6197%" height="15" fill="rgb(235,93,37)"/><text x="10.6021%" y="110.50">PyCFuncPtr_call (_ctypes.c..</text></g><g><title>_ctypes_callproc (callproc.c:1186) (236 samples, 16.62%)</title><rect x="10.3521%" y="116" width="16.6197%" height="15" fill="rgb(213,116,39)"/><text x="10.6021%" y="126.50">_ctypes_callproc (callproc..</text></g><g><title>_call_function_pointer (callproc.c:850) (236 samples, 16.62%)</title><rect x="10.3521%" y="132" width="16.6197%" height="15" fill="rgb(222,207,29)"/><text x="10.6021%" y="142.50">_call_function_pointer (ca..</text></g><g><title>ffi_call (libffi.so.6.0.4) (236 samples, 16.62%)</title><rect x="10.3521%" y="148" width="16.6197%" height="15" fill="rgb(206,96,30)"/><text x="10.6021%" y="158.50">ffi_call (libffi.so.6.0.4)</text></g><g><title>ffi_call_unix64 (libffi.so.6.0.4) (236 samples, 16.62%)</title><rect x="10.3521%" y="164" width="16.6197%" height="15" fill="rgb(218,138,4)"/><text x="10.6021%" y="174.50">ffi_call_unix64 (libffi.so..</text></g><g><title>DECORDFuncCall (decord/libdecord.so) (235 samples, 16.55%)</title><rect x="10.4225%" y="180" width="16.5493%" height="15" fill="rgb(250,191,14)"/><text x="10.6725%" y="190.50">DECORDFuncCall (decord/lib..</text></g><g><title>0x7f54bd7b4ea9 (decord/libdecord.so) (235 samples, 16.55%)</title><rect x="10.4225%" y="196" width="16.5493%" height="15" fill="rgb(239,60,40)"/><text x="10.6725%" y="206.50">0x7f54bd7b4ea9 (decord/lib..</text></g><g><title>decord::VideoReader::VideoReader (decord/libdecord.so) (235 samples, 16.55%)</title><rect x="10.4225%" y="212" width="16.5493%" height="15" fill="rgb(206,27,48)"/><text x="10.6725%" y="222.50">decord::VideoReader::Video..</text></g><g><title>decord::VideoReader::SetVideoStream (decord/libdecord.so) (99 samples, 6.97%)</title><rect x="20.0000%" y="228" width="6.9718%" height="15" fill="rgb(225,35,8)"/><text x="20.2500%" y="238.50">decord::V..</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::SetCodecContext (decord/libdecord.so) (39 samples, 2.75%)</title><rect x="24.2254%" y="244" width="2.7465%" height="15" fill="rgb(250,213,24)"/><text x="24.4754%" y="254.50">de..</text></g><g><title>decord::ffmpeg::FFMPEGFilterGraph::FFMPEGFilterGraph (decord/libdecord.so) (39 samples, 2.75%)</title><rect x="24.2254%" y="260" width="2.7465%" height="15" fill="rgb(247,123,22)"/><text x="24.4754%" y="270.50">de..</text></g><g><title>decord::ffmpeg::FFMPEGFilterGraph::Init (decord/libdecord.so) (39 samples, 2.75%)</title><rect x="24.2254%" y="276" width="2.7465%" height="15" fill="rgb(231,138,38)"/><text x="24.4754%" y="286.50">de..</text></g><g><title>&lt;module&gt; (PV_ratrace_decord.py:10) (388 samples, 27.32%)</title><rect x="0.0000%" y="52" width="27.3239%" height="15" fill="rgb(231,145,46)"/><text x="0.2500%" y="62.50">&lt;module&gt; (PV_ratrace_decord.py:10)</text></g><g><title>0x7f54bd32f0d1 (libavformat-b798543f.so.58.35.101) (18 samples, 1.27%)</title><rect x="29.5775%" y="324" width="1.2676%" height="15" fill="rgb(251,118,11)"/><text x="29.8275%" y="334.50"></text></g><g><title>0x7f54bd470e1d (libavformat-b798543f.so.58.35.101) (27 samples, 1.90%)</title><rect x="29.0141%" y="292" width="1.9014%" height="15" fill="rgb(217,147,25)"/><text x="29.2641%" y="302.50">0..</text></g><g><title>0x7f54bd4702fb (libavformat-b798543f.so.58.35.101) (27 samples, 1.90%)</title><rect x="29.0141%" y="308" width="1.9014%" height="15" fill="rgb(247,81,37)"/><text x="29.2641%" y="318.50">0..</text></g><g><title>0x7f54bd4710b1 (libavformat-b798543f.so.58.35.101) (17 samples, 1.20%)</title><rect x="30.9859%" y="292" width="1.1972%" height="15" fill="rgb(209,12,38)"/><text x="31.2359%" y="302.50"></text></g><g><title>av_read_frame (libavformat-b798543f.so.58.35.101) (64 samples, 4.51%)</title><rect x="28.9437%" y="276" width="4.5070%" height="15" fill="rgb(227,1,9)"/><text x="29.1937%" y="286.50">av_re..</text></g><g><title>0x7f54bd471577 (libavformat-b798543f.so.58.35.101) (16 samples, 1.13%)</title><rect x="32.3239%" y="292" width="1.1268%" height="15" fill="rgb(248,47,43)"/><text x="32.5739%" y="302.50"></text></g><g><title>av_opt_get_dict_val (libavutil-ac3ec209.so.56.38.100) (16 samples, 1.13%)</title><rect x="32.3239%" y="308" width="1.1268%" height="15" fill="rgb(221,10,30)"/><text x="32.5739%" y="318.50"></text></g><g><title>av_opt_find2 (libavutil-ac3ec209.so.56.38.100) (16 samples, 1.13%)</title><rect x="32.3239%" y="324" width="1.1268%" height="15" fill="rgb(210,229,1)"/><text x="32.5739%" y="334.50"></text></g><g><title>decord::VideoReader::PushNext (decord/libdecord.so) (71 samples, 5.00%)</title><rect x="28.5915%" y="260" width="5.0000%" height="15" fill="rgb(222,148,37)"/><text x="28.8415%" y="270.50">decord..</text></g><g><title>0x7f54bd32f0d1 (libavformat-b798543f.so.58.35.101) (26 samples, 1.83%)</title><rect x="35.1408%" y="356" width="1.8310%" height="15" fill="rgb(234,67,33)"/><text x="35.3908%" y="366.50">0..</text></g><g><title>0x7f54bd46b641 (libavformat-b798543f.so.58.35.101) (16 samples, 1.13%)</title><rect x="35.8451%" y="372" width="1.1268%" height="15" fill="rgb(247,98,35)"/><text x="36.0951%" y="382.50"></text></g><g><title>avio_read (libavformat-b798543f.so.58.35.101) (16 samples, 1.13%)</title><rect x="35.8451%" y="388" width="1.1268%" height="15" fill="rgb(247,138,52)"/><text x="36.0951%" y="398.50"></text></g><g><title>0x7f54bd470e1d (libavformat-b798543f.so.58.35.101) (31 samples, 2.18%)</title><rect x="34.8592%" y="324" width="2.1831%" height="15" fill="rgb(213,79,30)"/><text x="35.1092%" y="334.50">0..</text></g><g><title>0x7f54bd4702fb (libavformat-b798543f.so.58.35.101) (31 samples, 2.18%)</title><rect x="34.8592%" y="340" width="2.1831%" height="15" fill="rgb(246,177,23)"/><text x="35.1092%" y="350.50">0..</text></g><g><title>0x7f54bd4710b1 (libavformat-b798543f.so.58.35.101) (15 samples, 1.06%)</title><rect x="37.0423%" y="324" width="1.0563%" height="15" fill="rgb(230,62,27)"/><text x="37.2923%" y="334.50"></text></g><g><title>av_read_frame (libavformat-b798543f.so.58.35.101) (69 samples, 4.86%)</title><rect x="34.8592%" y="308" width="4.8592%" height="15" fill="rgb(216,154,8)"/><text x="35.1092%" y="318.50">av_rea..</text></g><g><title>0x7f54bd471577 (libavformat-b798543f.so.58.35.101) (21 samples, 1.48%)</title><rect x="38.2394%" y="324" width="1.4789%" height="15" fill="rgb(244,35,45)"/><text x="38.4894%" y="334.50"></text></g><g><title>av_opt_get_dict_val (libavutil-ac3ec209.so.56.38.100) (21 samples, 1.48%)</title><rect x="38.2394%" y="340" width="1.4789%" height="15" fill="rgb(251,115,12)"/><text x="38.4894%" y="350.50"></text></g><g><title>av_opt_find2 (libavutil-ac3ec209.so.56.38.100) (20 samples, 1.41%)</title><rect x="38.3099%" y="356" width="1.4085%" height="15" fill="rgb(240,54,50)"/><text x="38.5599%" y="366.50"></text></g><g><title>decord::VideoReader::PushNext (decord/libdecord.so) (78 samples, 5.49%)</title><rect x="34.5775%" y="292" width="5.4930%" height="15" fill="rgb(233,84,52)"/><text x="34.8275%" y="302.50">decord:..</text></g><g><title>decord::VideoReader::SeekAccurate (decord/libdecord.so) (262 samples, 18.45%)</title><rect x="33.5915%" y="260" width="18.4507%" height="15" fill="rgb(207,117,47)"/><text x="33.8415%" y="270.50">decord::VideoReader::SeekAccu..</text></g><g><title>decord::VideoReader::SkipFrames (decord/libdecord.so) (248 samples, 17.46%)</title><rect x="34.5775%" y="276" width="17.4648%" height="15" fill="rgb(249,43,39)"/><text x="34.8275%" y="286.50">decord::VideoReader::SkipFr..</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::Pop (decord/libdecord.so) (170 samples, 11.97%)</title><rect x="40.0704%" y="292" width="11.9718%" height="15" fill="rgb(209,38,44)"/><text x="40.3204%" y="302.50">decord::ffmpeg::FF..</text></g><g><title>dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQueueType)0&gt;::Pop (decord/libdecord.so) (170 samples, 11.97%)</title><rect x="40.0704%" y="308" width="11.9718%" height="15" fill="rgb(236,212,23)"/><text x="40.3204%" y="318.50">dmlc::ConcurrentBl..</text></g><g><title>std::condition_variable::wait (decord/libdecord.so) (169 samples, 11.90%)</title><rect x="40.1408%" y="324" width="11.9014%" height="15" fill="rgb(242,79,21)"/><text x="40.3908%" y="334.50">std::condition_var..</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (169 samples, 11.90%)</title><rect x="40.1408%" y="340" width="11.9014%" height="15" fill="rgb(211,96,35)"/><text x="40.3908%" y="350.50">__pthread_cond_wai..</text></g><g><title>__call__ (decord/_ffi/_ctypes/function.py:175) (1,000 samples, 70.42%)</title><rect x="28.1690%" y="100" width="70.4225%" height="15" fill="rgb(253,215,40)"/><text x="28.4190%" y="110.50">__call__ (decord/_ffi/_ctypes/function.py:175)</text></g><g><title>PyCFuncPtr_call (_ctypes.c:4017) (996 samples, 70.14%)</title><rect x="28.4507%" y="116" width="70.1408%" height="15" fill="rgb(211,81,21)"/><text x="28.7007%" y="126.50">PyCFuncPtr_call (_ctypes.c:4017)</text></g><g><title>_ctypes_callproc (callproc.c:1186) (996 samples, 70.14%)</title><rect x="28.4507%" y="132" width="70.1408%" height="15" fill="rgb(208,190,38)"/><text x="28.7007%" y="142.50">_ctypes_callproc (callproc.c:1186)</text></g><g><title>_call_function_pointer (callproc.c:850) (996 samples, 70.14%)</title><rect x="28.4507%" y="148" width="70.1408%" height="15" fill="rgb(235,213,38)"/><text x="28.7007%" y="158.50">_call_function_pointer (callproc.c:850)</text></g><g><title>ffi_call (libffi.so.6.0.4) (996 samples, 70.14%)</title><rect x="28.4507%" y="164" width="70.1408%" height="15" fill="rgb(237,122,38)"/><text x="28.7007%" y="174.50">ffi_call (libffi.so.6.0.4)</text></g><g><title>ffi_call_unix64 (libffi.so.6.0.4) (996 samples, 70.14%)</title><rect x="28.4507%" y="180" width="70.1408%" height="15" fill="rgb(244,218,35)"/><text x="28.7007%" y="190.50">ffi_call_unix64 (libffi.so.6.0.4)</text></g><g><title>DECORDFuncCall (decord/libdecord.so) (995 samples, 70.07%)</title><rect x="28.5211%" y="196" width="70.0704%" height="15" fill="rgb(240,68,47)"/><text x="28.7711%" y="206.50">DECORDFuncCall (decord/libdecord.so)</text></g><g><title>0x7f54bd7b505e (decord/libdecord.so) (995 samples, 70.07%)</title><rect x="28.5211%" y="212" width="70.0704%" height="15" fill="rgb(210,16,53)"/><text x="28.7711%" y="222.50">0x7f54bd7b505e (decord/libdecord.so)</text></g><g><title>decord::VideoReader::NextFrame (decord/libdecord.so) (995 samples, 70.07%)</title><rect x="28.5211%" y="228" width="70.0704%" height="15" fill="rgb(235,124,12)"/><text x="28.7711%" y="238.50">decord::VideoReader::NextFrame (decord/libdecord.so)</text></g><g><title>decord::VideoReader::NextFrameImpl (decord/libdecord.so) (995 samples, 70.07%)</title><rect x="28.5211%" y="244" width="70.0704%" height="15" fill="rgb(224,169,11)"/><text x="28.7711%" y="254.50">decord::VideoReader::NextFrameImpl (decord/libdecord.so)</text></g><g><title>decord::ffmpeg::FFMPEGThreadedDecoder::Pop (decord/libdecord.so) (661 samples, 46.55%)</title><rect x="52.0423%" y="260" width="46.5493%" height="15" fill="rgb(250,166,2)"/><text x="52.2923%" y="270.50">decord::ffmpeg::FFMPEGThreadedDecoder::Pop (decord/libdecord.so)</text></g><g><title>dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQueueType)0&gt;::Pop (decord/libdecord.so) (660 samples, 46.48%)</title><rect x="52.1127%" y="276" width="46.4789%" height="15" fill="rgb(242,216,29)"/><text x="52.3627%" y="286.50">dmlc::ConcurrentBlockingQueue&lt;decord::runtime::NDArray, (dmlc::ConcurrentQue..</text></g><g><title>std::condition_variable::wait (decord/libdecord.so) (660 samples, 46.48%)</title><rect x="52.1127%" y="292" width="46.4789%" height="15" fill="rgb(230,116,27)"/><text x="52.3627%" y="302.50">std::condition_variable::wait (decord/libdecord.so)</text></g><g><title>__pthread_cond_wait (libpthread-2.27.so) (660 samples, 46.48%)</title><rect x="52.1127%" y="308" width="46.4789%" height="15" fill="rgb(228,99,48)"/><text x="52.3627%" y="318.50">__pthread_cond_wait (libpthread-2.27.so)</text></g><g><title>next (decord/video_reader.py:104) (1,004 samples, 70.70%)</title><rect x="27.9577%" y="84" width="70.7042%" height="15" fill="rgb(253,11,6)"/><text x="28.2077%" y="94.50">next (decord/video_reader.py:104)</text></g><g><title>&lt;module&gt; (PV_ratrace_decord.py:13) (1,014 samples, 71.41%)</title><rect x="27.3239%" y="52" width="71.4085%" height="15" fill="rgb(247,143,39)"/><text x="27.5739%" y="62.50">&lt;module&gt; (PV_ratrace_decord.py:13)</text></g><g><title>__getitem__ (decord/video_reader.py:92) (1,005 samples, 70.77%)</title><rect x="27.9577%" y="68" width="70.7746%" height="15" fill="rgb(236,97,10)"/><text x="28.2077%" y="78.50">__getitem__ (decord/video_reader.py:92)</text></g><g><title>all (1,420 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>